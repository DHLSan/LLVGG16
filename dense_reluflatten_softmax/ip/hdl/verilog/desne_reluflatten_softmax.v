// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="desne_reluflatten_softmax,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.905300,HLS_SYN_LAT=-1681594719,HLS_SYN_TPT=none,HLS_SYN_MEM=94,HLS_SYN_DSP=42,HLS_SYN_FF=6554,HLS_SYN_LUT=10432}" *)

module desne_reluflatten_softmax (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt,
        s_axi_INPUT_AWVALID,
        s_axi_INPUT_AWREADY,
        s_axi_INPUT_AWADDR,
        s_axi_INPUT_WVALID,
        s_axi_INPUT_WREADY,
        s_axi_INPUT_WDATA,
        s_axi_INPUT_WSTRB,
        s_axi_INPUT_ARVALID,
        s_axi_INPUT_ARREADY,
        s_axi_INPUT_ARADDR,
        s_axi_INPUT_RVALID,
        s_axi_INPUT_RREADY,
        s_axi_INPUT_RDATA,
        s_axi_INPUT_RRESP,
        s_axi_INPUT_BVALID,
        s_axi_INPUT_BREADY,
        s_axi_INPUT_BRESP,
        s_axi_OUTPUT_AWVALID,
        s_axi_OUTPUT_AWREADY,
        s_axi_OUTPUT_AWADDR,
        s_axi_OUTPUT_WVALID,
        s_axi_OUTPUT_WREADY,
        s_axi_OUTPUT_WDATA,
        s_axi_OUTPUT_WSTRB,
        s_axi_OUTPUT_ARVALID,
        s_axi_OUTPUT_ARREADY,
        s_axi_OUTPUT_ARADDR,
        s_axi_OUTPUT_RVALID,
        s_axi_OUTPUT_RREADY,
        s_axi_OUTPUT_RDATA,
        s_axi_OUTPUT_RRESP,
        s_axi_OUTPUT_BVALID,
        s_axi_OUTPUT_BREADY,
        s_axi_OUTPUT_BRESP,
        s_axi_OUTPUT1_AWVALID,
        s_axi_OUTPUT1_AWREADY,
        s_axi_OUTPUT1_AWADDR,
        s_axi_OUTPUT1_WVALID,
        s_axi_OUTPUT1_WREADY,
        s_axi_OUTPUT1_WDATA,
        s_axi_OUTPUT1_WSTRB,
        s_axi_OUTPUT1_ARVALID,
        s_axi_OUTPUT1_ARREADY,
        s_axi_OUTPUT1_ARADDR,
        s_axi_OUTPUT1_RVALID,
        s_axi_OUTPUT1_RREADY,
        s_axi_OUTPUT1_RDATA,
        s_axi_OUTPUT1_RRESP,
        s_axi_OUTPUT1_BVALID,
        s_axi_OUTPUT1_BREADY,
        s_axi_OUTPUT1_BRESP,
        s_axi_bias_AWVALID,
        s_axi_bias_AWREADY,
        s_axi_bias_AWADDR,
        s_axi_bias_WVALID,
        s_axi_bias_WREADY,
        s_axi_bias_WDATA,
        s_axi_bias_WSTRB,
        s_axi_bias_ARVALID,
        s_axi_bias_ARREADY,
        s_axi_bias_ARADDR,
        s_axi_bias_RVALID,
        s_axi_bias_RREADY,
        s_axi_bias_RDATA,
        s_axi_bias_RRESP,
        s_axi_bias_BVALID,
        s_axi_bias_BREADY,
        s_axi_bias_BRESP,
        s_axi_bias2_AWVALID,
        s_axi_bias2_AWREADY,
        s_axi_bias2_AWADDR,
        s_axi_bias2_WVALID,
        s_axi_bias2_WREADY,
        s_axi_bias2_WDATA,
        s_axi_bias2_WSTRB,
        s_axi_bias2_ARVALID,
        s_axi_bias2_ARREADY,
        s_axi_bias2_ARADDR,
        s_axi_bias2_RVALID,
        s_axi_bias2_RREADY,
        s_axi_bias2_RDATA,
        s_axi_bias2_RRESP,
        s_axi_bias2_BVALID,
        s_axi_bias2_BREADY,
        s_axi_bias2_BRESP,
        s_axi_bias3_AWVALID,
        s_axi_bias3_AWREADY,
        s_axi_bias3_AWADDR,
        s_axi_bias3_WVALID,
        s_axi_bias3_WREADY,
        s_axi_bias3_WDATA,
        s_axi_bias3_WSTRB,
        s_axi_bias3_ARVALID,
        s_axi_bias3_ARREADY,
        s_axi_bias3_ARADDR,
        s_axi_bias3_RVALID,
        s_axi_bias3_RREADY,
        s_axi_bias3_RDATA,
        s_axi_bias3_RRESP,
        s_axi_bias3_BVALID,
        s_axi_bias3_BREADY,
        s_axi_bias3_BRESP
);

parameter    ap_ST_fsm_state1 = 188'd1;
parameter    ap_ST_fsm_state2 = 188'd2;
parameter    ap_ST_fsm_state3 = 188'd4;
parameter    ap_ST_fsm_state4 = 188'd8;
parameter    ap_ST_fsm_state5 = 188'd16;
parameter    ap_ST_fsm_state6 = 188'd32;
parameter    ap_ST_fsm_state7 = 188'd64;
parameter    ap_ST_fsm_state8 = 188'd128;
parameter    ap_ST_fsm_state9 = 188'd256;
parameter    ap_ST_fsm_state10 = 188'd512;
parameter    ap_ST_fsm_state11 = 188'd1024;
parameter    ap_ST_fsm_state12 = 188'd2048;
parameter    ap_ST_fsm_state13 = 188'd4096;
parameter    ap_ST_fsm_state14 = 188'd8192;
parameter    ap_ST_fsm_state15 = 188'd16384;
parameter    ap_ST_fsm_state16 = 188'd32768;
parameter    ap_ST_fsm_state17 = 188'd65536;
parameter    ap_ST_fsm_state18 = 188'd131072;
parameter    ap_ST_fsm_state19 = 188'd262144;
parameter    ap_ST_fsm_state20 = 188'd524288;
parameter    ap_ST_fsm_state21 = 188'd1048576;
parameter    ap_ST_fsm_state22 = 188'd2097152;
parameter    ap_ST_fsm_state23 = 188'd4194304;
parameter    ap_ST_fsm_state24 = 188'd8388608;
parameter    ap_ST_fsm_state25 = 188'd16777216;
parameter    ap_ST_fsm_state26 = 188'd33554432;
parameter    ap_ST_fsm_state27 = 188'd67108864;
parameter    ap_ST_fsm_state28 = 188'd134217728;
parameter    ap_ST_fsm_state29 = 188'd268435456;
parameter    ap_ST_fsm_state30 = 188'd536870912;
parameter    ap_ST_fsm_state31 = 188'd1073741824;
parameter    ap_ST_fsm_state32 = 188'd2147483648;
parameter    ap_ST_fsm_state33 = 188'd4294967296;
parameter    ap_ST_fsm_state34 = 188'd8589934592;
parameter    ap_ST_fsm_state35 = 188'd17179869184;
parameter    ap_ST_fsm_state36 = 188'd34359738368;
parameter    ap_ST_fsm_state37 = 188'd68719476736;
parameter    ap_ST_fsm_state38 = 188'd137438953472;
parameter    ap_ST_fsm_state39 = 188'd274877906944;
parameter    ap_ST_fsm_state40 = 188'd549755813888;
parameter    ap_ST_fsm_state41 = 188'd1099511627776;
parameter    ap_ST_fsm_state42 = 188'd2199023255552;
parameter    ap_ST_fsm_state43 = 188'd4398046511104;
parameter    ap_ST_fsm_state44 = 188'd8796093022208;
parameter    ap_ST_fsm_state45 = 188'd17592186044416;
parameter    ap_ST_fsm_state46 = 188'd35184372088832;
parameter    ap_ST_fsm_state47 = 188'd70368744177664;
parameter    ap_ST_fsm_state48 = 188'd140737488355328;
parameter    ap_ST_fsm_state49 = 188'd281474976710656;
parameter    ap_ST_fsm_state50 = 188'd562949953421312;
parameter    ap_ST_fsm_state51 = 188'd1125899906842624;
parameter    ap_ST_fsm_state52 = 188'd2251799813685248;
parameter    ap_ST_fsm_state53 = 188'd4503599627370496;
parameter    ap_ST_fsm_state54 = 188'd9007199254740992;
parameter    ap_ST_fsm_state55 = 188'd18014398509481984;
parameter    ap_ST_fsm_state56 = 188'd36028797018963968;
parameter    ap_ST_fsm_state57 = 188'd72057594037927936;
parameter    ap_ST_fsm_state58 = 188'd144115188075855872;
parameter    ap_ST_fsm_state59 = 188'd288230376151711744;
parameter    ap_ST_fsm_state60 = 188'd576460752303423488;
parameter    ap_ST_fsm_state61 = 188'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 188'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 188'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 188'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 188'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 188'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 188'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 188'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 188'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 188'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 188'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 188'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 188'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 188'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 188'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 188'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 188'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 188'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 188'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 188'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 188'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 188'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 188'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 188'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 188'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 188'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 188'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 188'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 188'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 188'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 188'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 188'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 188'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 188'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 188'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 188'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 188'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 188'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 188'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 188'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 188'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 188'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 188'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 188'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 188'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 188'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 188'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 188'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 188'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 188'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 188'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 188'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 188'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 188'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 188'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 188'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 188'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 188'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 188'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 188'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 188'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 188'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 188'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 188'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 188'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 188'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 188'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 188'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 188'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 188'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 188'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 188'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 188'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 188'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 188'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 188'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 188'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 188'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 188'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 188'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 188'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 188'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 188'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 188'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 188'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 188'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 188'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 188'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 188'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 188'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 188'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 188'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 188'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 188'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 188'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 188'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 188'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 188'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 188'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 188'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 188'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 188'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 188'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 188'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 188'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 188'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 188'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 188'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 188'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 188'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 188'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 188'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 188'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 188'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 188'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 188'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 188'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 188'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 188'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 188'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 188'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 188'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 188'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 188'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 188'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 188'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 188'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 188'd196159429230833773869868419475239575503198607639501078528;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_ADDR_WIDTH = 18;
parameter    C_S_AXI_OUTPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT1_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT1_ADDR_WIDTH = 13;
parameter    C_S_AXI_BIAS_DATA_WIDTH = 32;
parameter    C_S_AXI_BIAS_ADDR_WIDTH = 15;
parameter    C_S_AXI_BIAS2_DATA_WIDTH = 32;
parameter    C_S_AXI_BIAS2_ADDR_WIDTH = 15;
parameter    C_S_AXI_BIAS3_DATA_WIDTH = 32;
parameter    C_S_AXI_BIAS3_ADDR_WIDTH = 13;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT1_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_BIAS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_BIAS2_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_BIAS3_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;
input   s_axi_INPUT_AWVALID;
output   s_axi_INPUT_AWREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_AWADDR;
input   s_axi_INPUT_WVALID;
output   s_axi_INPUT_WREADY;
input  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_WDATA;
input  [C_S_AXI_INPUT_WSTRB_WIDTH - 1:0] s_axi_INPUT_WSTRB;
input   s_axi_INPUT_ARVALID;
output   s_axi_INPUT_ARREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_ARADDR;
output   s_axi_INPUT_RVALID;
input   s_axi_INPUT_RREADY;
output  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_RDATA;
output  [1:0] s_axi_INPUT_RRESP;
output   s_axi_INPUT_BVALID;
input   s_axi_INPUT_BREADY;
output  [1:0] s_axi_INPUT_BRESP;
input   s_axi_OUTPUT_AWVALID;
output   s_axi_OUTPUT_AWREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_AWADDR;
input   s_axi_OUTPUT_WVALID;
output   s_axi_OUTPUT_WREADY;
input  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_WDATA;
input  [C_S_AXI_OUTPUT_WSTRB_WIDTH - 1:0] s_axi_OUTPUT_WSTRB;
input   s_axi_OUTPUT_ARVALID;
output   s_axi_OUTPUT_ARREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_ARADDR;
output   s_axi_OUTPUT_RVALID;
input   s_axi_OUTPUT_RREADY;
output  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_RDATA;
output  [1:0] s_axi_OUTPUT_RRESP;
output   s_axi_OUTPUT_BVALID;
input   s_axi_OUTPUT_BREADY;
output  [1:0] s_axi_OUTPUT_BRESP;
input   s_axi_OUTPUT1_AWVALID;
output   s_axi_OUTPUT1_AWREADY;
input  [C_S_AXI_OUTPUT1_ADDR_WIDTH - 1:0] s_axi_OUTPUT1_AWADDR;
input   s_axi_OUTPUT1_WVALID;
output   s_axi_OUTPUT1_WREADY;
input  [C_S_AXI_OUTPUT1_DATA_WIDTH - 1:0] s_axi_OUTPUT1_WDATA;
input  [C_S_AXI_OUTPUT1_WSTRB_WIDTH - 1:0] s_axi_OUTPUT1_WSTRB;
input   s_axi_OUTPUT1_ARVALID;
output   s_axi_OUTPUT1_ARREADY;
input  [C_S_AXI_OUTPUT1_ADDR_WIDTH - 1:0] s_axi_OUTPUT1_ARADDR;
output   s_axi_OUTPUT1_RVALID;
input   s_axi_OUTPUT1_RREADY;
output  [C_S_AXI_OUTPUT1_DATA_WIDTH - 1:0] s_axi_OUTPUT1_RDATA;
output  [1:0] s_axi_OUTPUT1_RRESP;
output   s_axi_OUTPUT1_BVALID;
input   s_axi_OUTPUT1_BREADY;
output  [1:0] s_axi_OUTPUT1_BRESP;
input   s_axi_bias_AWVALID;
output   s_axi_bias_AWREADY;
input  [C_S_AXI_BIAS_ADDR_WIDTH - 1:0] s_axi_bias_AWADDR;
input   s_axi_bias_WVALID;
output   s_axi_bias_WREADY;
input  [C_S_AXI_BIAS_DATA_WIDTH - 1:0] s_axi_bias_WDATA;
input  [C_S_AXI_BIAS_WSTRB_WIDTH - 1:0] s_axi_bias_WSTRB;
input   s_axi_bias_ARVALID;
output   s_axi_bias_ARREADY;
input  [C_S_AXI_BIAS_ADDR_WIDTH - 1:0] s_axi_bias_ARADDR;
output   s_axi_bias_RVALID;
input   s_axi_bias_RREADY;
output  [C_S_AXI_BIAS_DATA_WIDTH - 1:0] s_axi_bias_RDATA;
output  [1:0] s_axi_bias_RRESP;
output   s_axi_bias_BVALID;
input   s_axi_bias_BREADY;
output  [1:0] s_axi_bias_BRESP;
input   s_axi_bias2_AWVALID;
output   s_axi_bias2_AWREADY;
input  [C_S_AXI_BIAS2_ADDR_WIDTH - 1:0] s_axi_bias2_AWADDR;
input   s_axi_bias2_WVALID;
output   s_axi_bias2_WREADY;
input  [C_S_AXI_BIAS2_DATA_WIDTH - 1:0] s_axi_bias2_WDATA;
input  [C_S_AXI_BIAS2_WSTRB_WIDTH - 1:0] s_axi_bias2_WSTRB;
input   s_axi_bias2_ARVALID;
output   s_axi_bias2_ARREADY;
input  [C_S_AXI_BIAS2_ADDR_WIDTH - 1:0] s_axi_bias2_ARADDR;
output   s_axi_bias2_RVALID;
input   s_axi_bias2_RREADY;
output  [C_S_AXI_BIAS2_DATA_WIDTH - 1:0] s_axi_bias2_RDATA;
output  [1:0] s_axi_bias2_RRESP;
output   s_axi_bias2_BVALID;
input   s_axi_bias2_BREADY;
output  [1:0] s_axi_bias2_BRESP;
input   s_axi_bias3_AWVALID;
output   s_axi_bias3_AWREADY;
input  [C_S_AXI_BIAS3_ADDR_WIDTH - 1:0] s_axi_bias3_AWADDR;
input   s_axi_bias3_WVALID;
output   s_axi_bias3_WREADY;
input  [C_S_AXI_BIAS3_DATA_WIDTH - 1:0] s_axi_bias3_WDATA;
input  [C_S_AXI_BIAS3_WSTRB_WIDTH - 1:0] s_axi_bias3_WSTRB;
input   s_axi_bias3_ARVALID;
output   s_axi_bias3_ARREADY;
input  [C_S_AXI_BIAS3_ADDR_WIDTH - 1:0] s_axi_bias3_ARADDR;
output   s_axi_bias3_RVALID;
input   s_axi_bias3_RREADY;
output  [C_S_AXI_BIAS3_DATA_WIDTH - 1:0] s_axi_bias3_RDATA;
output  [1:0] s_axi_bias3_RRESP;
output   s_axi_bias3_BVALID;
input   s_axi_bias3_BREADY;
output  [1:0] s_axi_bias3_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [187:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [14:0] mem_block1_dense_address0;
reg    mem_block1_dense_ce0;
reg    mem_block1_dense_we0;
reg   [31:0] mem_block1_dense_d0;
wire   [31:0] mem_block1_dense_q0;
wire   [11:0] bd1_address0;
reg    bd1_ce0;
wire   [31:0] bd1_q0;
wire   [11:0] bd2_address0;
reg    bd2_ce0;
wire   [31:0] bd2_q0;
wire   [9:0] bd3_address0;
reg    bd3_ce0;
wire   [31:0] bd3_q0;
wire   [9:0] class_address0;
reg    class_ce0;
reg    class_we0;
wire   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
wire   [63:0] grp_fu_635_p1;
reg   [63:0] reg_643;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state94;
wire   [63:0] grp_fu_625_p2;
reg   [63:0] reg_649;
wire    ap_CS_fsm_state13;
reg   [0:0] tmp_1_reg_1324;
wire    ap_CS_fsm_state56;
reg   [0:0] tmp_23_reg_1401;
wire    ap_CS_fsm_state100;
reg   [0:0] tmp_54_reg_1483;
wire   [63:0] grp_fu_608_p1;
reg   [63:0] reg_654;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state143;
reg   [63:0] reg_661;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state108;
reg   [63:0] reg_666;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state114;
wire   [63:0] grp_fu_621_p2;
reg   [63:0] reg_670;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state120;
wire   [31:0] grp_fu_605_p1;
reg   [31:0] reg_675;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state162;
wire   [31:0] mem_block2_dense_q0;
reg   [31:0] reg_684;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state137;
wire    ap_CS_fsm_state169;
wire   [31:0] grp_fu_594_p2;
reg   [31:0] reg_692;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state142;
wire   [0:0] tmp_1_fu_698_p1;
wire    ap_CS_fsm_state2;
wire   [12:0] i_11_fu_708_p2;
reg   [12:0] i_11_reg_1332;
wire   [31:0] tmp_2_cast_fu_714_p1;
wire   [0:0] exitcond14_fu_702_p2;
wire   [14:0] j_3_fu_725_p2;
reg   [14:0] j_3_reg_1345;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond13_fu_719_p2;
wire   [12:0] idx_urem_fu_748_p3;
wire   [63:0] sum_1_in_v_fu_761_p3;
reg   [63:0] sum_1_in_v_reg_1360;
wire   [12:0] i_12_fu_774_p2;
reg   [12:0] i_12_reg_1368;
wire    ap_CS_fsm_state35;
wire   [0:0] exitcond12_fu_768_p2;
reg   [11:0] mem_block2_dense_add_1_reg_1378;
reg   [31:0] bd1_load_reg_1383;
wire   [31:0] storemerge_fu_828_p3;
reg   [31:0] storemerge_reg_1388;
wire    ap_CS_fsm_state42;
wire   [14:0] i_13_fu_842_p2;
wire    ap_CS_fsm_state44;
wire   [0:0] tmp_23_fu_853_p1;
wire    ap_CS_fsm_state45;
wire   [12:0] i_14_fu_863_p2;
reg   [12:0] i_14_reg_1409;
wire   [31:0] tmp_20_cast_fu_869_p1;
wire   [0:0] exitcond10_fu_857_p2;
wire   [12:0] j_4_fu_880_p2;
reg   [12:0] j_4_reg_1422;
wire    ap_CS_fsm_state57;
wire   [0:0] exitcond9_fu_874_p2;
wire   [12:0] idx_urem3_fu_903_p3;
wire   [63:0] sum1_1_in_v_fu_916_p3;
reg   [63:0] sum1_1_in_v_reg_1437;
wire   [12:0] i_15_fu_929_p2;
reg   [12:0] i_15_reg_1445;
wire    ap_CS_fsm_state79;
wire   [0:0] exitcond8_fu_923_p2;
reg   [14:0] mem_block1_dense_add_3_reg_1455;
reg   [31:0] bd2_load_reg_1460;
wire    ap_CS_fsm_state80;
reg   [31:0] mem_block1_dense_loa_1_reg_1465;
wire   [31:0] storemerge1_fu_983_p3;
reg   [31:0] storemerge1_reg_1470;
wire    ap_CS_fsm_state86;
wire   [12:0] i_16_fu_997_p2;
wire    ap_CS_fsm_state88;
wire   [0:0] tmp_54_fu_1008_p1;
wire    ap_CS_fsm_state89;
wire   [9:0] i_17_fu_1018_p2;
reg   [9:0] i_17_reg_1491;
wire   [31:0] tmp_36_cast_fu_1024_p1;
wire   [0:0] exitcond6_fu_1012_p2;
wire   [12:0] j_5_fu_1035_p2;
reg   [12:0] j_5_reg_1504;
wire    ap_CS_fsm_state101;
wire   [0:0] exitcond5_fu_1029_p2;
wire   [9:0] idx_urem6_fu_1058_p3;
wire   [63:0] sum2_1_in_v_fu_1071_p3;
reg   [63:0] sum2_1_in_v_reg_1519;
wire   [9:0] i_18_fu_1084_p2;
reg   [9:0] i_18_reg_1527;
wire    ap_CS_fsm_state122;
wire   [0:0] exitcond4_fu_1078_p2;
reg   [11:0] mem_block2_dense_add_5_reg_1537;
reg   [31:0] bd3_load_reg_1547;
wire   [31:0] storemerge2_fu_1138_p3;
reg   [31:0] storemerge2_reg_1552;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state132;
wire   [0:0] exitcond3_fu_1146_p2;
wire   [9:0] i_19_fu_1157_p2;
reg   [9:0] i_19_reg_1565;
reg   [31:0] max_val_2_reg_1570;
wire    ap_CS_fsm_state133;
wire   [0:0] grp_fu_615_p2;
reg   [0:0] tmp_69_reg_1577;
wire    ap_CS_fsm_state134;
wire   [31:0] max_val_1_fu_1245_p3;
wire    ap_CS_fsm_state135;
wire   [9:0] i_20_fu_1258_p2;
reg   [9:0] i_20_reg_1590;
wire    ap_CS_fsm_state136;
reg   [11:0] mem_block2_dense_add_8_reg_1595;
wire   [0:0] exitcond2_fu_1252_p2;
wire   [63:0] grp_fu_638_p2;
reg   [63:0] tmp_60_reg_1600;
wire    ap_CS_fsm_state161;
wire    ap_CS_fsm_state167;
wire   [9:0] i_21_fu_1275_p2;
reg   [9:0] i_21_reg_1613;
wire    ap_CS_fsm_state168;
reg   [11:0] mem_block2_dense_add_9_reg_1618;
wire   [0:0] exitcond1_fu_1269_p2;
wire   [31:0] grp_fu_600_p2;
reg   [31:0] tmp_63_reg_1623;
wire    ap_CS_fsm_state185;
wire   [9:0] i_22_fu_1292_p2;
reg   [9:0] i_22_reg_1631;
wire    ap_CS_fsm_state187;
wire   [63:0] tmp_64_fu_1298_p1;
reg   [63:0] tmp_64_reg_1636;
wire   [0:0] exitcond_fu_1286_p2;
wire   [31:0] counter_1_fu_1316_p3;
reg   [31:0] counter_1_reg_1646;
reg   [11:0] mem_block2_dense_address0;
reg    mem_block2_dense_ce0;
reg    mem_block2_dense_we0;
reg   [31:0] mem_block2_dense_d0;
reg   [12:0] i_reg_317;
reg   [12:0] phi_urem_reg_329;
reg   [14:0] j_reg_341;
reg   [31:0] sum_reg_352;
reg   [12:0] i_1_reg_365;
wire    ap_CS_fsm_state43;
reg   [14:0] i_2_reg_376;
wire   [0:0] exitcond11_fu_836_p2;
reg   [12:0] i_3_reg_387;
reg   [12:0] phi_urem1_reg_399;
reg   [12:0] j_1_reg_411;
reg   [31:0] sum1_reg_422;
reg   [12:0] i_4_reg_435;
wire    ap_CS_fsm_state87;
reg   [12:0] i_5_reg_446;
wire   [0:0] exitcond7_fu_991_p2;
reg   [9:0] i_6_reg_457;
reg   [9:0] phi_urem4_reg_469;
reg   [12:0] j_2_reg_481;
reg   [31:0] sum2_reg_492;
reg   [9:0] i_7_reg_505;
wire    ap_CS_fsm_state130;
reg   [9:0] i_8_reg_516;
reg   [31:0] max_val1_reg_527;
reg   [9:0] i_9_reg_537;
reg   [31:0] sum3_reg_548;
reg   [9:0] i_s_reg_560;
wire    ap_CS_fsm_state186;
reg   [9:0] i_10_reg_571;
wire    ap_CS_fsm_state188;
reg   [31:0] counter_reg_582;
wire   [63:0] tmp_s_fu_731_p1;
wire   [63:0] tmp_8_fu_756_p1;
wire   [63:0] tmp_5_fu_780_p1;
wire   [63:0] tmp_14_fu_848_p1;
wire   [63:0] tmp_28_fu_886_p1;
wire   [63:0] tmp_27_fu_911_p1;
wire   [63:0] tmp_20_fu_935_p1;
wire   [63:0] tmp_26_fu_1003_p1;
wire   [63:0] tmp_46_fu_1041_p1;
wire   [63:0] tmp_45_fu_1066_p1;
wire   [63:0] tmp_38_fu_1090_p1;
wire   [63:0] tmp_48_fu_1152_p1;
wire   [63:0] tmp_57_fu_1264_p1;
wire   [63:0] tmp_62_fu_1281_p1;
wire    ap_CS_fsm_state163;
reg   [31:0] grp_fu_594_p0;
reg   [31:0] grp_fu_594_p1;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state170;
reg   [63:0] grp_fu_605_p0;
reg   [31:0] grp_fu_608_p0;
reg   [31:0] grp_fu_615_p0;
reg   [31:0] grp_fu_615_p1;
reg   [63:0] grp_fu_621_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state116;
reg   [63:0] grp_fu_625_p0;
reg   [63:0] grp_fu_625_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state109;
reg   [31:0] grp_fu_635_p0;
wire    ap_CS_fsm_state144;
wire   [12:0] next_urem_fu_736_p2;
wire   [0:0] tmp_17_fu_742_p2;
wire   [31:0] tmp_6_to_int_fu_786_p1;
wire   [7:0] tmp_fu_790_p4;
wire   [22:0] tmp_2_fu_800_p1;
wire   [0:0] notrhs_fu_810_p2;
wire   [0:0] notlhs_fu_804_p2;
wire   [0:0] tmp_7_fu_816_p2;
wire   [0:0] tmp_15_fu_822_p2;
wire   [12:0] next_urem2_fu_891_p2;
wire   [0:0] tmp_41_fu_897_p2;
wire   [31:0] tmp_24_to_int_fu_941_p1;
wire   [7:0] tmp_22_fu_945_p4;
wire   [22:0] tmp_35_fu_955_p1;
wire   [0:0] notrhs1_fu_965_p2;
wire   [0:0] notlhs1_fu_959_p2;
wire   [0:0] tmp_24_fu_971_p2;
wire   [0:0] tmp_30_fu_977_p2;
wire   [9:0] next_urem5_fu_1046_p2;
wire   [0:0] tmp_71_fu_1052_p2;
wire   [31:0] tmp_43_to_int_fu_1096_p1;
wire   [7:0] tmp_40_fu_1100_p4;
wire   [22:0] tmp_56_fu_1110_p1;
wire   [0:0] notrhs2_fu_1120_p2;
wire   [0:0] notlhs2_fu_1114_p2;
wire   [0:0] tmp_42_fu_1126_p2;
wire   [0:0] tmp_44_fu_1132_p2;
wire   [31:0] max_val_2_to_int_fu_1163_p1;
wire   [31:0] max_val1_to_int_fu_1180_p1;
wire   [7:0] tmp_53_fu_1166_p4;
wire   [22:0] tmp_72_fu_1176_p1;
wire   [0:0] notrhs3_fu_1204_p2;
wire   [0:0] notlhs3_fu_1198_p2;
wire   [7:0] tmp_55_fu_1184_p4;
wire   [22:0] tmp_73_fu_1194_p1;
wire   [0:0] notrhs4_fu_1222_p2;
wire   [0:0] notlhs4_fu_1216_p2;
wire   [0:0] tmp_66_fu_1210_p2;
wire   [0:0] tmp_67_fu_1228_p2;
wire   [0:0] tmp_68_fu_1234_p2;
wire   [0:0] tmp_70_fu_1240_p2;
wire   [0:0] tmp_65_fu_1304_p2;
wire   [31:0] counter_0_op_fu_1310_p2;
reg   [1:0] grp_fu_594_opcode;
reg   [4:0] grp_fu_615_opcode;
reg   [187:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 188'd1;
end

desne_reluflatten_softmax_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
desne_reluflatten_softmax_CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

desne_reluflatten_softmax_INPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUT_DATA_WIDTH ))
desne_reluflatten_softmax_INPUT_s_axi_U(
    .AWVALID(s_axi_INPUT_AWVALID),
    .AWREADY(s_axi_INPUT_AWREADY),
    .AWADDR(s_axi_INPUT_AWADDR),
    .WVALID(s_axi_INPUT_WVALID),
    .WREADY(s_axi_INPUT_WREADY),
    .WDATA(s_axi_INPUT_WDATA),
    .WSTRB(s_axi_INPUT_WSTRB),
    .ARVALID(s_axi_INPUT_ARVALID),
    .ARREADY(s_axi_INPUT_ARREADY),
    .ARADDR(s_axi_INPUT_ARADDR),
    .RVALID(s_axi_INPUT_RVALID),
    .RREADY(s_axi_INPUT_RREADY),
    .RDATA(s_axi_INPUT_RDATA),
    .RRESP(s_axi_INPUT_RRESP),
    .BVALID(s_axi_INPUT_BVALID),
    .BREADY(s_axi_INPUT_BREADY),
    .BRESP(s_axi_INPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem_block1_dense_address0(mem_block1_dense_address0),
    .mem_block1_dense_ce0(mem_block1_dense_ce0),
    .mem_block1_dense_we0(mem_block1_dense_we0),
    .mem_block1_dense_d0(mem_block1_dense_d0),
    .mem_block1_dense_q0(mem_block1_dense_q0)
);

desne_reluflatten_softmax_OUTPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT_DATA_WIDTH ))
desne_reluflatten_softmax_OUTPUT_s_axi_U(
    .AWVALID(s_axi_OUTPUT_AWVALID),
    .AWREADY(s_axi_OUTPUT_AWREADY),
    .AWADDR(s_axi_OUTPUT_AWADDR),
    .WVALID(s_axi_OUTPUT_WVALID),
    .WREADY(s_axi_OUTPUT_WREADY),
    .WDATA(s_axi_OUTPUT_WDATA),
    .WSTRB(s_axi_OUTPUT_WSTRB),
    .ARVALID(s_axi_OUTPUT_ARVALID),
    .ARREADY(s_axi_OUTPUT_ARREADY),
    .ARADDR(s_axi_OUTPUT_ARADDR),
    .RVALID(s_axi_OUTPUT_RVALID),
    .RREADY(s_axi_OUTPUT_RREADY),
    .RDATA(s_axi_OUTPUT_RDATA),
    .RRESP(s_axi_OUTPUT_RRESP),
    .BVALID(s_axi_OUTPUT_BVALID),
    .BREADY(s_axi_OUTPUT_BREADY),
    .BRESP(s_axi_OUTPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .class_address0(class_address0),
    .class_ce0(class_ce0),
    .class_we0(class_we0),
    .class_d0(counter_reg_582)
);

desne_reluflatten_softmax_OUTPUT1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT1_DATA_WIDTH ))
desne_reluflatten_softmax_OUTPUT1_s_axi_U(
    .AWVALID(s_axi_OUTPUT1_AWVALID),
    .AWREADY(s_axi_OUTPUT1_AWREADY),
    .AWADDR(s_axi_OUTPUT1_AWADDR),
    .WVALID(s_axi_OUTPUT1_WVALID),
    .WREADY(s_axi_OUTPUT1_WREADY),
    .WDATA(s_axi_OUTPUT1_WDATA),
    .WSTRB(s_axi_OUTPUT1_WSTRB),
    .ARVALID(s_axi_OUTPUT1_ARVALID),
    .ARREADY(s_axi_OUTPUT1_ARREADY),
    .ARADDR(s_axi_OUTPUT1_ARADDR),
    .RVALID(s_axi_OUTPUT1_RVALID),
    .RREADY(s_axi_OUTPUT1_RREADY),
    .RDATA(s_axi_OUTPUT1_RDATA),
    .RRESP(s_axi_OUTPUT1_RRESP),
    .BVALID(s_axi_OUTPUT1_BVALID),
    .BREADY(s_axi_OUTPUT1_BREADY),
    .BRESP(s_axi_OUTPUT1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .result_address0(result_address0),
    .result_ce0(result_ce0),
    .result_we0(result_we0),
    .result_d0(mem_block2_dense_q0)
);

desne_reluflatten_softmax_bias_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BIAS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BIAS_DATA_WIDTH ))
desne_reluflatten_softmax_bias_s_axi_U(
    .AWVALID(s_axi_bias_AWVALID),
    .AWREADY(s_axi_bias_AWREADY),
    .AWADDR(s_axi_bias_AWADDR),
    .WVALID(s_axi_bias_WVALID),
    .WREADY(s_axi_bias_WREADY),
    .WDATA(s_axi_bias_WDATA),
    .WSTRB(s_axi_bias_WSTRB),
    .ARVALID(s_axi_bias_ARVALID),
    .ARREADY(s_axi_bias_ARREADY),
    .ARADDR(s_axi_bias_ARADDR),
    .RVALID(s_axi_bias_RVALID),
    .RREADY(s_axi_bias_RREADY),
    .RDATA(s_axi_bias_RDATA),
    .RRESP(s_axi_bias_RRESP),
    .BVALID(s_axi_bias_BVALID),
    .BREADY(s_axi_bias_BREADY),
    .BRESP(s_axi_bias_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .bd1_address0(bd1_address0),
    .bd1_ce0(bd1_ce0),
    .bd1_q0(bd1_q0)
);

desne_reluflatten_softmax_bias2_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BIAS2_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BIAS2_DATA_WIDTH ))
desne_reluflatten_softmax_bias2_s_axi_U(
    .AWVALID(s_axi_bias2_AWVALID),
    .AWREADY(s_axi_bias2_AWREADY),
    .AWADDR(s_axi_bias2_AWADDR),
    .WVALID(s_axi_bias2_WVALID),
    .WREADY(s_axi_bias2_WREADY),
    .WDATA(s_axi_bias2_WDATA),
    .WSTRB(s_axi_bias2_WSTRB),
    .ARVALID(s_axi_bias2_ARVALID),
    .ARREADY(s_axi_bias2_ARREADY),
    .ARADDR(s_axi_bias2_ARADDR),
    .RVALID(s_axi_bias2_RVALID),
    .RREADY(s_axi_bias2_RREADY),
    .RDATA(s_axi_bias2_RDATA),
    .RRESP(s_axi_bias2_RRESP),
    .BVALID(s_axi_bias2_BVALID),
    .BREADY(s_axi_bias2_BREADY),
    .BRESP(s_axi_bias2_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .bd2_address0(bd2_address0),
    .bd2_ce0(bd2_ce0),
    .bd2_q0(bd2_q0)
);

desne_reluflatten_softmax_bias3_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BIAS3_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BIAS3_DATA_WIDTH ))
desne_reluflatten_softmax_bias3_s_axi_U(
    .AWVALID(s_axi_bias3_AWVALID),
    .AWREADY(s_axi_bias3_AWREADY),
    .AWADDR(s_axi_bias3_AWADDR),
    .WVALID(s_axi_bias3_WVALID),
    .WREADY(s_axi_bias3_WREADY),
    .WDATA(s_axi_bias3_WDATA),
    .WSTRB(s_axi_bias3_WSTRB),
    .ARVALID(s_axi_bias3_ARVALID),
    .ARREADY(s_axi_bias3_ARREADY),
    .ARADDR(s_axi_bias3_ARADDR),
    .RVALID(s_axi_bias3_RVALID),
    .RREADY(s_axi_bias3_RREADY),
    .RDATA(s_axi_bias3_RDATA),
    .RRESP(s_axi_bias3_RRESP),
    .BVALID(s_axi_bias3_BVALID),
    .BREADY(s_axi_bias3_BREADY),
    .BRESP(s_axi_bias3_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .bd3_address0(bd3_address0),
    .bd3_ce0(bd3_ce0),
    .bd3_q0(bd3_q0)
);

desne_reluflattenbkb #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
mem_block2_dense_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_block2_dense_address0),
    .ce0(mem_block2_dense_ce0),
    .we0(mem_block2_dense_we0),
    .d0(mem_block2_dense_d0),
    .q0(mem_block2_dense_q0)
);

desne_reluflattencud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
desne_reluflattencud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_594_p0),
    .din1(grp_fu_594_p1),
    .opcode(grp_fu_594_opcode),
    .ce(1'b1),
    .dout(grp_fu_594_p2)
);

desne_reluflattendEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
desne_reluflattendEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_684),
    .din1(sum3_reg_548),
    .ce(1'b1),
    .dout(grp_fu_600_p2)
);

desne_reluflatteneOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
desne_reluflatteneOg_U3(
    .din0(grp_fu_605_p0),
    .dout(grp_fu_605_p1)
);

desne_reluflattenfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
desne_reluflattenfYi_U4(
    .din0(grp_fu_608_p0),
    .dout(grp_fu_608_p1)
);

desne_reluflatteng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
desne_reluflatteng8j_U5(
    .din0(grp_fu_615_p0),
    .din1(grp_fu_615_p1),
    .opcode(grp_fu_615_opcode),
    .dout(grp_fu_615_p2)
);

desne_reluflattenhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
desne_reluflattenhbi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_654),
    .din1(grp_fu_621_p1),
    .ce(1'b1),
    .dout(grp_fu_621_p2)
);

desne_reluflattenibs #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
desne_reluflattenibs_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_625_p0),
    .din1(grp_fu_625_p1),
    .ce(1'b1),
    .dout(grp_fu_625_p2)
);

desne_reluflattenjbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
desne_reluflattenjbC_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_635_p0),
    .ce(1'b1),
    .dout(grp_fu_635_p1)
);

desne_reluflattenkbM #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
desne_reluflattenkbM_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(reg_654),
    .ce(1'b1),
    .dout(grp_fu_638_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state168))) begin
        counter_reg_582 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state188)) begin
        counter_reg_582 <= counter_1_reg_1646;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state168))) begin
        i_10_reg_571 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state188)) begin
        i_10_reg_571 <= i_22_reg_1631;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond14_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_365 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i_1_reg_365 <= i_12_reg_1368;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_768_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_2_reg_376 <= 15'd0;
    end else if (((exitcond11_fu_836_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        i_2_reg_376 <= i_13_fu_842_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        i_3_reg_387 <= 13'd0;
    end else if (((exitcond9_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
        i_3_reg_387 <= i_14_reg_1409;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond10_fu_857_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        i_4_reg_435 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        i_4_reg_435 <= i_15_reg_1445;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_923_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        i_5_reg_446 <= 13'd0;
    end else if (((exitcond7_fu_991_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        i_5_reg_446 <= i_16_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        i_6_reg_457 <= 10'd0;
    end else if (((exitcond5_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        i_6_reg_457 <= i_17_reg_1491;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_1012_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        i_7_reg_505 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        i_7_reg_505 <= i_18_reg_1527;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        i_8_reg_516 <= i_19_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        i_8_reg_516 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_1146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state132))) begin
        i_9_reg_537 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state167)) begin
        i_9_reg_537 <= i_20_reg_1590;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond13_fu_719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i_reg_317 <= i_11_reg_1332;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_317 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1252_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state136))) begin
        i_s_reg_560 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state186)) begin
        i_s_reg_560 <= i_21_reg_1613;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        j_1_reg_411 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        j_1_reg_411 <= j_4_reg_1422;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        j_2_reg_481 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        j_2_reg_481 <= j_5_reg_1504;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_341 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        j_reg_341 <= j_3_reg_1345;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        max_val1_reg_527 <= max_val_1_fu_1245_p3;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        max_val1_reg_527 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        phi_urem1_reg_399 <= 13'd0;
    end else if (((exitcond9_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
        phi_urem1_reg_399 <= idx_urem3_fu_903_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        phi_urem4_reg_469 <= 10'd0;
    end else if (((exitcond5_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        phi_urem4_reg_469 <= idx_urem6_fu_1058_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond13_fu_719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        phi_urem_reg_329 <= idx_urem_fu_748_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_reg_329 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        sum1_reg_422 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        sum1_reg_422 <= grp_fu_605_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        sum2_reg_492 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        sum2_reg_492 <= grp_fu_605_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_1146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state132))) begin
        sum3_reg_548 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state167)) begin
        sum3_reg_548 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_reg_352 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        sum_reg_352 <= grp_fu_605_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        bd1_load_reg_1383 <= bd1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        bd2_load_reg_1460 <= bd2_q0;
        mem_block1_dense_loa_1_reg_1465 <= mem_block1_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        bd3_load_reg_1547 <= bd3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state187))) begin
        counter_1_reg_1646 <= counter_1_fu_1316_p3;
        tmp_64_reg_1636[9 : 0] <= tmp_64_fu_1298_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_11_reg_1332 <= i_11_fu_708_p2;
        tmp_1_reg_1324 <= tmp_1_fu_698_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i_12_reg_1368 <= i_12_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i_14_reg_1409 <= i_14_fu_863_p2;
        tmp_23_reg_1401 <= tmp_23_fu_853_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        i_15_reg_1445 <= i_15_fu_929_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        i_17_reg_1491 <= i_17_fu_1018_p2;
        tmp_54_reg_1483 <= tmp_54_fu_1008_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        i_18_reg_1527 <= i_18_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_1146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state132))) begin
        i_19_reg_1565 <= i_19_fu_1157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        i_20_reg_1590 <= i_20_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        i_21_reg_1613 <= i_21_fu_1275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state187)) begin
        i_22_reg_1631 <= i_22_fu_1292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_3_reg_1345 <= j_3_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        j_4_reg_1422 <= j_4_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        j_5_reg_1504 <= j_5_fu_1035_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        max_val_2_reg_1570 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_923_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        mem_block1_dense_add_3_reg_1455[12 : 0] <= tmp_20_fu_935_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_768_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        mem_block2_dense_add_1_reg_1378 <= tmp_5_fu_780_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_1078_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state122))) begin
        mem_block2_dense_add_5_reg_1537[9 : 0] <= tmp_38_fu_1090_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1252_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state136))) begin
        mem_block2_dense_add_8_reg_1595[9 : 0] <= tmp_57_fu_1264_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state168))) begin
        mem_block2_dense_add_9_reg_1618[9 : 0] <= tmp_62_fu_1281_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_643 <= grp_fu_635_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_54_reg_1483 == 1'd1) & (1'b1 == ap_CS_fsm_state100)) | ((tmp_23_reg_1401 == 1'd1) & (1'b1 == ap_CS_fsm_state56)) | ((tmp_1_reg_1324 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_649 <= grp_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_654 <= grp_fu_608_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_54_reg_1483 == 1'd0) & (1'b1 == ap_CS_fsm_state108)) | ((tmp_23_reg_1401 == 1'd0) & (1'b1 == ap_CS_fsm_state65)) | ((tmp_1_reg_1324 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((tmp_54_reg_1483 == 1'd1) & (1'b1 == ap_CS_fsm_state108)) | ((tmp_23_reg_1401 == 1'd1) & (1'b1 == ap_CS_fsm_state65)) | ((tmp_1_reg_1324 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        reg_661 <= grp_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_54_reg_1483 == 1'd0) & (1'b1 == ap_CS_fsm_state114)) | ((tmp_23_reg_1401 == 1'd0) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_1_reg_1324 == 1'd0) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_666 <= grp_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_670 <= grp_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_675 <= grp_fu_605_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36))) begin
        reg_684 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_692 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        storemerge1_reg_1470 <= storemerge1_fu_983_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        storemerge2_reg_1552 <= storemerge2_fu_1138_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        storemerge_reg_1388 <= storemerge_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        sum1_1_in_v_reg_1437 <= sum1_1_in_v_fu_916_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        sum2_1_in_v_reg_1519 <= sum2_1_in_v_fu_1071_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sum_1_in_v_reg_1360 <= sum_1_in_v_fu_761_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        tmp_60_reg_1600 <= grp_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state185)) begin
        tmp_63_reg_1623 <= grp_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        tmp_69_reg_1577 <= grp_fu_615_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_1286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state187))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_1286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state187))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        bd1_ce0 = 1'b1;
    end else begin
        bd1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        bd2_ce0 = 1'b1;
    end else begin
        bd2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        bd3_ce0 = 1'b1;
    end else begin
        bd3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state187)) begin
        class_ce0 = 1'b1;
    end else begin
        class_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_1286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state187))) begin
        class_we0 = 1'b1;
    end else begin
        class_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        grp_fu_594_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state163))) begin
        grp_fu_594_opcode = 2'd0;
    end else begin
        grp_fu_594_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        grp_fu_594_p0 = sum3_reg_548;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_594_p0 = mem_block1_dense_loa_1_reg_1465;
    end else if (((1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state37))) begin
        grp_fu_594_p0 = reg_684;
    end else begin
        grp_fu_594_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        grp_fu_594_p1 = reg_675;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        grp_fu_594_p1 = max_val1_reg_527;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        grp_fu_594_p1 = bd3_load_reg_1547;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_594_p1 = bd2_load_reg_1460;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_594_p1 = bd1_load_reg_1383;
    end else begin
        grp_fu_594_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        grp_fu_605_p0 = tmp_60_reg_1600;
    end else if (((1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_605_p0 = reg_670;
    end else begin
        grp_fu_605_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_608_p0 = reg_692;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        grp_fu_608_p0 = sum2_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_608_p0 = sum1_reg_422;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_608_p0 = reg_684;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_608_p0 = sum_reg_352;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_608_p0 = mem_block1_dense_q0;
    end else begin
        grp_fu_608_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_615_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_615_opcode = 5'd4;
    end else begin
        grp_fu_615_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_615_p0 = max_val_2_reg_1570;
    end else if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_615_p0 = reg_692;
    end else begin
        grp_fu_615_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_615_p1 = max_val1_reg_527;
    end else if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_615_p1 = 32'd0;
    end else begin
        grp_fu_615_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_621_p1 = sum2_1_in_v_reg_1519;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_621_p1 = sum1_1_in_v_reg_1437;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_621_p1 = sum_1_in_v_reg_1360;
    end else begin
        grp_fu_621_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_625_p0 = reg_661;
    end else if ((((tmp_54_reg_1483 == 1'd0) & (1'b1 == ap_CS_fsm_state103)) | ((tmp_23_reg_1401 == 1'd0) & (1'b1 == ap_CS_fsm_state60)) | ((tmp_1_reg_1324 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((tmp_54_reg_1483 == 1'd1) & (1'b1 == ap_CS_fsm_state103)) | ((tmp_23_reg_1401 == 1'd1) & (1'b1 == ap_CS_fsm_state60)) | ((tmp_1_reg_1324 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_625_p0 = reg_654;
    end else if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_625_p0 = reg_643;
    end else begin
        grp_fu_625_p0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_54_reg_1483 == 1'd0) & (1'b1 == ap_CS_fsm_state103))) begin
        grp_fu_625_p1 = 64'd4572414629676717179;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_625_p1 = 64'd13795786666531492987;
    end else if (((tmp_23_reg_1401 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        grp_fu_625_p1 = 64'd4569063951553953530;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_625_p1 = 64'd13792435988408729338;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_625_p1 = reg_643;
    end else if ((((tmp_54_reg_1483 == 1'd1) & (1'b1 == ap_CS_fsm_state103)) | ((tmp_23_reg_1401 == 1'd1) & (1'b1 == ap_CS_fsm_state60)) | ((tmp_1_reg_1324 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_625_p1 = reg_649;
    end else if (((tmp_1_reg_1324 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_625_p1 = 64'd4571261708172110332;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_625_p1 = 64'd13794633745026886140;
    end else begin
        grp_fu_625_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_635_p0 = tmp_36_cast_fu_1024_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_635_p0 = tmp_20_cast_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_635_p0 = tmp_2_cast_fu_714_p1;
    end else begin
        grp_fu_635_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        mem_block1_dense_address0 = tmp_46_fu_1041_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        mem_block1_dense_address0 = mem_block1_dense_add_3_reg_1455;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        mem_block1_dense_address0 = tmp_20_fu_935_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        mem_block1_dense_address0 = tmp_27_fu_911_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        mem_block1_dense_address0 = tmp_14_fu_848_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_block1_dense_address0 = tmp_s_fu_731_p1;
    end else begin
        mem_block1_dense_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state87))) begin
        mem_block1_dense_ce0 = 1'b1;
    end else begin
        mem_block1_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        mem_block1_dense_d0 = storemerge1_reg_1470;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        mem_block1_dense_d0 = sum1_reg_422;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        mem_block1_dense_d0 = 32'd0;
    end else begin
        mem_block1_dense_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((exitcond9_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((exitcond11_fu_836_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44)))) begin
        mem_block1_dense_we0 = 1'b1;
    end else begin
        mem_block1_dense_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state187)) begin
        mem_block2_dense_address0 = tmp_64_fu_1298_p1;
    end else if ((1'b1 == ap_CS_fsm_state186)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_9_reg_1618;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        mem_block2_dense_address0 = tmp_62_fu_1281_p1;
    end else if ((1'b1 == ap_CS_fsm_state163)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_8_reg_1595;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        mem_block2_dense_address0 = tmp_57_fu_1264_p1;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        mem_block2_dense_address0 = tmp_48_fu_1152_p1;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_5_reg_1537;
    end else if (((exitcond4_fu_1078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
        mem_block2_dense_address0 = 64'd0;
    end else if (((exitcond4_fu_1078_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state122))) begin
        mem_block2_dense_address0 = tmp_38_fu_1090_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        mem_block2_dense_address0 = tmp_45_fu_1066_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        mem_block2_dense_address0 = tmp_26_fu_1003_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        mem_block2_dense_address0 = tmp_28_fu_886_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_1_reg_1378;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        mem_block2_dense_address0 = tmp_5_fu_780_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_block2_dense_address0 = tmp_8_fu_756_p1;
    end else begin
        mem_block2_dense_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state187) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state43) | ((exitcond4_fu_1078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122)) | ((exitcond4_fu_1078_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state122)))) begin
        mem_block2_dense_ce0 = 1'b1;
    end else begin
        mem_block2_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state186)) begin
        mem_block2_dense_d0 = tmp_63_reg_1623;
    end else if ((1'b1 == ap_CS_fsm_state163)) begin
        mem_block2_dense_d0 = reg_675;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        mem_block2_dense_d0 = storemerge2_reg_1552;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        mem_block2_dense_d0 = sum2_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        mem_block2_dense_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        mem_block2_dense_d0 = storemerge_reg_1388;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_block2_dense_d0 = sum_reg_352;
    end else begin
        mem_block2_dense_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state43) | ((exitcond5_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101)) | ((exitcond7_fu_991_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88)) | ((exitcond13_fu_719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        mem_block2_dense_we0 = 1'b1;
    end else begin
        mem_block2_dense_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state188)) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state188)) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond14_fu_702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond13_fu_719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state35 : begin
            if (((exitcond12_fu_768_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state44 : begin
            if (((exitcond11_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((exitcond10_fu_857_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((exitcond9_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state79 : begin
            if (((exitcond8_fu_923_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state88 : begin
            if (((exitcond7_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((exitcond6_fu_1012_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((exitcond5_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state122 : begin
            if (((exitcond4_fu_1078_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            if (((exitcond3_fu_1146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state132))) begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state136 : begin
            if (((exitcond2_fu_1252_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state136))) begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state168 : begin
            if (((exitcond1_fu_1269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state187;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state187 : begin
            if (((exitcond_fu_1286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state187))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state188;
            end
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state185 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state186 = ap_CS_fsm[32'd185];

assign ap_CS_fsm_state187 = ap_CS_fsm[32'd186];

assign ap_CS_fsm_state188 = ap_CS_fsm[32'd187];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bd1_address0 = tmp_5_fu_780_p1;

assign bd2_address0 = tmp_20_fu_935_p1;

assign bd3_address0 = tmp_38_fu_1090_p1;

assign class_address0 = tmp_64_fu_1298_p1;

assign counter_0_op_fu_1310_p2 = (counter_reg_582 + 32'd1);

assign counter_1_fu_1316_p3 = ((tmp_65_fu_1304_p2[0:0] === 1'b1) ? 32'd0 : counter_0_op_fu_1310_p2);

assign exitcond10_fu_857_p2 = ((i_3_reg_387 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond11_fu_836_p2 = ((i_2_reg_376 == 15'd25088) ? 1'b1 : 1'b0);

assign exitcond12_fu_768_p2 = ((i_1_reg_365 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond13_fu_719_p2 = ((j_reg_341 == 15'd25088) ? 1'b1 : 1'b0);

assign exitcond14_fu_702_p2 = ((i_reg_317 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond1_fu_1269_p2 = ((i_s_reg_560 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond2_fu_1252_p2 = ((i_9_reg_537 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond3_fu_1146_p2 = ((i_8_reg_516 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond4_fu_1078_p2 = ((i_7_reg_505 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond5_fu_1029_p2 = ((j_2_reg_481 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond6_fu_1012_p2 = ((i_6_reg_457 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond7_fu_991_p2 = ((i_5_reg_446 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond8_fu_923_p2 = ((i_4_reg_435 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond9_fu_874_p2 = ((j_1_reg_411 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_1286_p2 = ((i_10_reg_571 == 10'd1000) ? 1'b1 : 1'b0);

assign i_11_fu_708_p2 = (13'd1 + i_reg_317);

assign i_12_fu_774_p2 = (i_1_reg_365 + 13'd1);

assign i_13_fu_842_p2 = (i_2_reg_376 + 15'd1);

assign i_14_fu_863_p2 = (13'd1 + i_3_reg_387);

assign i_15_fu_929_p2 = (i_4_reg_435 + 13'd1);

assign i_16_fu_997_p2 = (i_5_reg_446 + 13'd1);

assign i_17_fu_1018_p2 = (10'd1 + i_6_reg_457);

assign i_18_fu_1084_p2 = (i_7_reg_505 + 10'd1);

assign i_19_fu_1157_p2 = (10'd1 + i_8_reg_516);

assign i_20_fu_1258_p2 = (i_9_reg_537 + 10'd1);

assign i_21_fu_1275_p2 = (i_s_reg_560 + 10'd1);

assign i_22_fu_1292_p2 = (i_10_reg_571 + 10'd1);

assign idx_urem3_fu_903_p3 = ((tmp_41_fu_897_p2[0:0] === 1'b1) ? next_urem2_fu_891_p2 : 13'd0);

assign idx_urem6_fu_1058_p3 = ((tmp_71_fu_1052_p2[0:0] === 1'b1) ? next_urem5_fu_1046_p2 : 10'd0);

assign idx_urem_fu_748_p3 = ((tmp_17_fu_742_p2[0:0] === 1'b1) ? next_urem_fu_736_p2 : 13'd0);

assign j_3_fu_725_p2 = (j_reg_341 + 15'd1);

assign j_4_fu_880_p2 = (j_1_reg_411 + 13'd1);

assign j_5_fu_1035_p2 = (j_2_reg_481 + 13'd1);

assign max_val1_to_int_fu_1180_p1 = max_val1_reg_527;

assign max_val_1_fu_1245_p3 = ((tmp_70_fu_1240_p2[0:0] === 1'b1) ? max_val_2_reg_1570 : max_val1_reg_527);

assign max_val_2_to_int_fu_1163_p1 = max_val_2_reg_1570;

assign next_urem2_fu_891_p2 = (phi_urem1_reg_399 + 13'd1);

assign next_urem5_fu_1046_p2 = (phi_urem4_reg_469 + 10'd1);

assign next_urem_fu_736_p2 = (phi_urem_reg_329 + 13'd1);

assign notlhs1_fu_959_p2 = ((tmp_22_fu_945_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs2_fu_1114_p2 = ((tmp_40_fu_1100_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs3_fu_1198_p2 = ((tmp_53_fu_1166_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_1216_p2 = ((tmp_55_fu_1184_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_804_p2 = ((tmp_fu_790_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_965_p2 = ((tmp_35_fu_955_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_1120_p2 = ((tmp_56_fu_1110_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_1204_p2 = ((tmp_72_fu_1176_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_1222_p2 = ((tmp_73_fu_1194_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_810_p2 = ((tmp_2_fu_800_p1 == 23'd0) ? 1'b1 : 1'b0);

assign result_address0 = tmp_64_reg_1636;

assign storemerge1_fu_983_p3 = ((tmp_30_fu_977_p2[0:0] === 1'b1) ? 32'd0 : reg_692);

assign storemerge2_fu_1138_p3 = ((tmp_44_fu_1132_p2[0:0] === 1'b1) ? 32'd0 : reg_692);

assign storemerge_fu_828_p3 = ((tmp_15_fu_822_p2[0:0] === 1'b1) ? 32'd0 : reg_692);

assign sum1_1_in_v_fu_916_p3 = ((tmp_23_reg_1401[0:0] === 1'b1) ? reg_661 : reg_666);

assign sum2_1_in_v_fu_1071_p3 = ((tmp_54_reg_1483[0:0] === 1'b1) ? reg_661 : reg_666);

assign sum_1_in_v_fu_761_p3 = ((tmp_1_reg_1324[0:0] === 1'b1) ? reg_661 : reg_666);

assign tmp_14_fu_848_p1 = i_2_reg_376;

assign tmp_15_fu_822_p2 = (tmp_7_fu_816_p2 & grp_fu_615_p2);

assign tmp_17_fu_742_p2 = ((next_urem_fu_736_p2 < 13'd7) ? 1'b1 : 1'b0);

assign tmp_1_fu_698_p1 = i_reg_317[0:0];

assign tmp_20_cast_fu_869_p1 = phi_urem1_reg_399;

assign tmp_20_fu_935_p1 = i_4_reg_435;

assign tmp_22_fu_945_p4 = {{tmp_24_to_int_fu_941_p1[30:23]}};

assign tmp_23_fu_853_p1 = i_3_reg_387[0:0];

assign tmp_24_fu_971_p2 = (notrhs1_fu_965_p2 | notlhs1_fu_959_p2);

assign tmp_24_to_int_fu_941_p1 = reg_692;

assign tmp_26_fu_1003_p1 = i_5_reg_446;

assign tmp_27_fu_911_p1 = i_3_reg_387;

assign tmp_28_fu_886_p1 = j_1_reg_411;

assign tmp_2_cast_fu_714_p1 = phi_urem_reg_329;

assign tmp_2_fu_800_p1 = tmp_6_to_int_fu_786_p1[22:0];

assign tmp_30_fu_977_p2 = (tmp_24_fu_971_p2 & grp_fu_615_p2);

assign tmp_35_fu_955_p1 = tmp_24_to_int_fu_941_p1[22:0];

assign tmp_36_cast_fu_1024_p1 = phi_urem4_reg_469;

assign tmp_38_fu_1090_p1 = i_7_reg_505;

assign tmp_40_fu_1100_p4 = {{tmp_43_to_int_fu_1096_p1[30:23]}};

assign tmp_41_fu_897_p2 = ((next_urem2_fu_891_p2 < 13'd7) ? 1'b1 : 1'b0);

assign tmp_42_fu_1126_p2 = (notrhs2_fu_1120_p2 | notlhs2_fu_1114_p2);

assign tmp_43_to_int_fu_1096_p1 = reg_692;

assign tmp_44_fu_1132_p2 = (tmp_42_fu_1126_p2 & grp_fu_615_p2);

assign tmp_45_fu_1066_p1 = i_6_reg_457;

assign tmp_46_fu_1041_p1 = j_2_reg_481;

assign tmp_48_fu_1152_p1 = i_8_reg_516;

assign tmp_53_fu_1166_p4 = {{max_val_2_to_int_fu_1163_p1[30:23]}};

assign tmp_54_fu_1008_p1 = i_6_reg_457[0:0];

assign tmp_55_fu_1184_p4 = {{max_val1_to_int_fu_1180_p1[30:23]}};

assign tmp_56_fu_1110_p1 = tmp_43_to_int_fu_1096_p1[22:0];

assign tmp_57_fu_1264_p1 = i_9_reg_537;

assign tmp_5_fu_780_p1 = i_1_reg_365;

assign tmp_62_fu_1281_p1 = i_s_reg_560;

assign tmp_64_fu_1298_p1 = i_10_reg_571;

assign tmp_65_fu_1304_p2 = ((counter_reg_582 == 32'd999) ? 1'b1 : 1'b0);

assign tmp_66_fu_1210_p2 = (notrhs3_fu_1204_p2 | notlhs3_fu_1198_p2);

assign tmp_67_fu_1228_p2 = (notrhs4_fu_1222_p2 | notlhs4_fu_1216_p2);

assign tmp_68_fu_1234_p2 = (tmp_67_fu_1228_p2 & tmp_66_fu_1210_p2);

assign tmp_6_to_int_fu_786_p1 = reg_692;

assign tmp_70_fu_1240_p2 = (tmp_69_reg_1577 & tmp_68_fu_1234_p2);

assign tmp_71_fu_1052_p2 = ((next_urem5_fu_1046_p2 < 10'd7) ? 1'b1 : 1'b0);

assign tmp_72_fu_1176_p1 = max_val_2_to_int_fu_1163_p1[22:0];

assign tmp_73_fu_1194_p1 = max_val1_to_int_fu_1180_p1[22:0];

assign tmp_7_fu_816_p2 = (notrhs_fu_810_p2 | notlhs_fu_804_p2);

assign tmp_8_fu_756_p1 = i_reg_317;

assign tmp_fu_790_p4 = {{tmp_6_to_int_fu_786_p1[30:23]}};

assign tmp_s_fu_731_p1 = j_reg_341;

always @ (posedge ap_clk) begin
    mem_block1_dense_add_3_reg_1455[14:13] <= 2'b00;
    mem_block2_dense_add_5_reg_1537[11:10] <= 2'b00;
    mem_block2_dense_add_8_reg_1595[11:10] <= 2'b00;
    mem_block2_dense_add_9_reg_1618[11:10] <= 2'b00;
    tmp_64_reg_1636[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //desne_reluflatten_softmax
