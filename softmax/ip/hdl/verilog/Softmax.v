// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Softmax,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.090000,HLS_SYN_LAT=10051,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=28,HLS_SYN_FF=3973,HLS_SYN_LUT=5937}" *)

module Softmax (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt,
        s_axi_INPUT_AWVALID,
        s_axi_INPUT_AWREADY,
        s_axi_INPUT_AWADDR,
        s_axi_INPUT_WVALID,
        s_axi_INPUT_WREADY,
        s_axi_INPUT_WDATA,
        s_axi_INPUT_WSTRB,
        s_axi_INPUT_ARVALID,
        s_axi_INPUT_ARREADY,
        s_axi_INPUT_ARADDR,
        s_axi_INPUT_RVALID,
        s_axi_INPUT_RREADY,
        s_axi_INPUT_RDATA,
        s_axi_INPUT_RRESP,
        s_axi_INPUT_BVALID,
        s_axi_INPUT_BREADY,
        s_axi_INPUT_BRESP,
        s_axi_OUTPUT_AWVALID,
        s_axi_OUTPUT_AWREADY,
        s_axi_OUTPUT_AWADDR,
        s_axi_OUTPUT_WVALID,
        s_axi_OUTPUT_WREADY,
        s_axi_OUTPUT_WDATA,
        s_axi_OUTPUT_WSTRB,
        s_axi_OUTPUT_ARVALID,
        s_axi_OUTPUT_ARREADY,
        s_axi_OUTPUT_ARADDR,
        s_axi_OUTPUT_RVALID,
        s_axi_OUTPUT_RREADY,
        s_axi_OUTPUT_RDATA,
        s_axi_OUTPUT_RRESP,
        s_axi_OUTPUT_BVALID,
        s_axi_OUTPUT_BREADY,
        s_axi_OUTPUT_BRESP,
        s_axi_parameter_AWVALID,
        s_axi_parameter_AWREADY,
        s_axi_parameter_AWADDR,
        s_axi_parameter_WVALID,
        s_axi_parameter_WREADY,
        s_axi_parameter_WDATA,
        s_axi_parameter_WSTRB,
        s_axi_parameter_ARVALID,
        s_axi_parameter_ARREADY,
        s_axi_parameter_ARADDR,
        s_axi_parameter_RVALID,
        s_axi_parameter_RREADY,
        s_axi_parameter_RDATA,
        s_axi_parameter_RRESP,
        s_axi_parameter_BVALID,
        s_axi_parameter_BREADY,
        s_axi_parameter_BRESP
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_pp0_stage0 = 16'd4;
parameter    ap_ST_fsm_state6 = 16'd8;
parameter    ap_ST_fsm_pp1_stage0 = 16'd16;
parameter    ap_ST_fsm_pp1_stage1 = 16'd32;
parameter    ap_ST_fsm_pp1_stage2 = 16'd64;
parameter    ap_ST_fsm_pp1_stage3 = 16'd128;
parameter    ap_ST_fsm_pp1_stage4 = 16'd256;
parameter    ap_ST_fsm_state40 = 16'd512;
parameter    ap_ST_fsm_pp2_stage0 = 16'd1024;
parameter    ap_ST_fsm_pp2_stage1 = 16'd2048;
parameter    ap_ST_fsm_state59 = 16'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 16'd8192;
parameter    ap_ST_fsm_pp3_stage1 = 16'd16384;
parameter    ap_ST_fsm_state63 = 16'd32768;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT_ADDR_WIDTH = 14;
parameter    C_S_AXI_PARAMETER_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAMETER_ADDR_WIDTH = 13;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_PARAMETER_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;
input   s_axi_INPUT_AWVALID;
output   s_axi_INPUT_AWREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_AWADDR;
input   s_axi_INPUT_WVALID;
output   s_axi_INPUT_WREADY;
input  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_WDATA;
input  [C_S_AXI_INPUT_WSTRB_WIDTH - 1:0] s_axi_INPUT_WSTRB;
input   s_axi_INPUT_ARVALID;
output   s_axi_INPUT_ARREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_ARADDR;
output   s_axi_INPUT_RVALID;
input   s_axi_INPUT_RREADY;
output  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_RDATA;
output  [1:0] s_axi_INPUT_RRESP;
output   s_axi_INPUT_BVALID;
input   s_axi_INPUT_BREADY;
output  [1:0] s_axi_INPUT_BRESP;
input   s_axi_OUTPUT_AWVALID;
output   s_axi_OUTPUT_AWREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_AWADDR;
input   s_axi_OUTPUT_WVALID;
output   s_axi_OUTPUT_WREADY;
input  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_WDATA;
input  [C_S_AXI_OUTPUT_WSTRB_WIDTH - 1:0] s_axi_OUTPUT_WSTRB;
input   s_axi_OUTPUT_ARVALID;
output   s_axi_OUTPUT_ARREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_ARADDR;
output   s_axi_OUTPUT_RVALID;
input   s_axi_OUTPUT_RREADY;
output  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_RDATA;
output  [1:0] s_axi_OUTPUT_RRESP;
output   s_axi_OUTPUT_BVALID;
input   s_axi_OUTPUT_BREADY;
output  [1:0] s_axi_OUTPUT_BRESP;
input   s_axi_parameter_AWVALID;
output   s_axi_parameter_AWREADY;
input  [C_S_AXI_PARAMETER_ADDR_WIDTH - 1:0] s_axi_parameter_AWADDR;
input   s_axi_parameter_WVALID;
output   s_axi_parameter_WREADY;
input  [C_S_AXI_PARAMETER_DATA_WIDTH - 1:0] s_axi_parameter_WDATA;
input  [C_S_AXI_PARAMETER_WSTRB_WIDTH - 1:0] s_axi_parameter_WSTRB;
input   s_axi_parameter_ARVALID;
output   s_axi_parameter_ARREADY;
input  [C_S_AXI_PARAMETER_ADDR_WIDTH - 1:0] s_axi_parameter_ARADDR;
output   s_axi_parameter_RVALID;
input   s_axi_parameter_RREADY;
output  [C_S_AXI_PARAMETER_DATA_WIDTH - 1:0] s_axi_parameter_RDATA;
output  [1:0] s_axi_parameter_RRESP;
output   s_axi_parameter_BVALID;
input   s_axi_parameter_BREADY;
output  [1:0] s_axi_parameter_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [9:0] mem_block2_dense_address0;
reg    mem_block2_dense_ce0;
reg    mem_block2_dense_we0;
reg   [31:0] mem_block2_dense_d0;
wire   [31:0] mem_block2_dense_q0;
wire   [9:0] class_address0;
reg    class_ce0;
reg    class_we0;
wire   [31:0] class_d0;
wire   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
reg   [9:0] i_reg_159;
reg   [31:0] max_val1_reg_170;
reg   [9:0] i_1_reg_180;
reg   [31:0] sum_reg_191;
reg   [9:0] i_2_reg_203;
reg   [9:0] i_3_reg_214;
reg   [31:0] reg_255;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state42_pp2_stage1_iter0;
wire    ap_block_state44_pp2_stage1_iter1;
wire    ap_block_state46_pp2_stage1_iter2;
wire    ap_block_state48_pp2_stage1_iter3;
wire    ap_block_state50_pp2_stage1_iter4;
wire    ap_block_state52_pp2_stage1_iter5;
wire    ap_block_state54_pp2_stage1_iter6;
wire    ap_block_state56_pp2_stage1_iter7;
wire    ap_block_state58_pp2_stage1_iter8;
wire    ap_block_pp2_stage1_11001;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_state13_pp1_stage1_iter1;
wire    ap_block_state18_pp1_stage1_iter2;
wire    ap_block_state23_pp1_stage1_iter3;
wire    ap_block_state28_pp1_stage1_iter4;
wire    ap_block_state33_pp1_stage1_iter5;
wire    ap_block_state38_pp1_stage1_iter6;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] exitcond2_reg_500;
reg    ap_enable_reg_pp2_iter0;
reg   [0:0] exitcond1_reg_540;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state61_pp3_stage1_iter0;
wire    ap_block_pp3_stage1_11001;
reg   [0:0] exitcond_reg_554;
wire   [0:0] exitcond3_fu_264_p2;
reg   [0:0] exitcond3_reg_474;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond3_reg_474;
wire   [9:0] i_4_fu_275_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] max_val_2_reg_488;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] max_val_1_fu_364_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] exitcond2_fu_371_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state17_pp1_stage0_iter2;
wire    ap_block_state22_pp1_stage0_iter3;
wire    ap_block_state27_pp1_stage0_iter4;
wire    ap_block_state32_pp1_stage0_iter5;
wire    ap_block_state37_pp1_stage0_iter6;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond2_reg_500;
reg   [0:0] ap_reg_pp1_iter2_exitcond2_reg_500;
reg   [0:0] ap_reg_pp1_iter3_exitcond2_reg_500;
reg   [0:0] ap_reg_pp1_iter4_exitcond2_reg_500;
reg   [0:0] ap_reg_pp1_iter5_exitcond2_reg_500;
reg   [0:0] ap_reg_pp1_iter6_exitcond2_reg_500;
wire   [9:0] i_5_fu_377_p2;
reg   [9:0] i_5_reg_504;
reg   [9:0] mem_block2_dense_add_2_reg_509;
reg   [9:0] ap_reg_pp1_iter1_mem_block2_dense_add_2_reg_509;
reg   [9:0] ap_reg_pp1_iter2_mem_block2_dense_add_2_reg_509;
reg   [9:0] ap_reg_pp1_iter3_mem_block2_dense_add_2_reg_509;
reg   [9:0] ap_reg_pp1_iter4_mem_block2_dense_add_2_reg_509;
reg   [9:0] ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509;
wire   [31:0] grp_fu_226_p2;
reg   [31:0] tmp_4_reg_514;
reg    ap_enable_reg_pp1_iter1;
wire   [63:0] tmp_5_fu_241_p1;
reg   [63:0] tmp_5_reg_519;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state9_pp1_stage2_iter0;
wire    ap_block_state14_pp1_stage2_iter1;
wire    ap_block_state19_pp1_stage2_iter2;
wire    ap_block_state24_pp1_stage2_iter3;
wire    ap_block_state29_pp1_stage2_iter4;
wire    ap_block_state34_pp1_stage2_iter5;
wire    ap_block_state39_pp1_stage2_iter6;
wire    ap_block_pp1_stage2_11001;
wire   [63:0] grp_fu_250_p2;
reg   [63:0] tmp_6_reg_524;
wire   [31:0] tmp_7_fu_238_p1;
reg   [31:0] tmp_7_reg_529;
reg    ap_enable_reg_pp1_iter6;
wire   [0:0] exitcond1_fu_388_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state41_pp2_stage0_iter0;
wire    ap_block_state43_pp2_stage0_iter1;
wire    ap_block_state45_pp2_stage0_iter2;
wire    ap_block_state47_pp2_stage0_iter3;
wire    ap_block_state49_pp2_stage0_iter4;
wire    ap_block_state51_pp2_stage0_iter5;
wire    ap_block_state53_pp2_stage0_iter6;
wire    ap_block_state55_pp2_stage0_iter7;
wire    ap_block_state57_pp2_stage0_iter8;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] ap_reg_pp2_iter1_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter2_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter3_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter4_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter5_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter6_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter7_exitcond1_reg_540;
reg   [0:0] ap_reg_pp2_iter8_exitcond1_reg_540;
wire   [9:0] i_6_fu_394_p2;
reg   [9:0] i_6_reg_544;
reg   [9:0] mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter6_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter7_mem_block2_dense_add_3_reg_549;
reg   [9:0] ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549;
wire   [0:0] exitcond_fu_405_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state60_pp3_stage0_iter0;
wire    ap_block_state62_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [9:0] counter_fu_411_p2;
reg   [9:0] counter_reg_558;
wire   [63:0] tmp_8_fu_417_p1;
reg   [63:0] tmp_8_reg_563;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
wire    ap_block_state11_pp1_stage4_iter0;
wire    ap_block_state16_pp1_stage4_iter1;
wire    ap_block_state21_pp1_stage4_iter2;
wire    ap_block_state26_pp1_stage4_iter3;
wire    ap_block_state31_pp1_stage4_iter4;
wire    ap_block_state36_pp1_stage4_iter5;
wire    ap_block_pp1_stage4_subdone;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage2_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
wire    ap_CS_fsm_state40;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state41;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
wire    ap_CS_fsm_state59;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state60;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage1_subdone;
reg   [9:0] ap_phi_mux_i_1_phi_fu_184_p4;
wire    ap_block_pp1_stage0;
reg   [9:0] ap_phi_mux_i_2_phi_fu_207_p4;
wire    ap_block_pp2_stage0;
reg   [9:0] ap_phi_mux_i_3_phi_fu_218_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] tmp_fu_270_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_3_fu_383_p1;
wire   [63:0] tmp_s_fu_400_p1;
wire   [0:0] tmp_25_fu_463_p2;
wire    ap_block_pp1_stage2;
wire   [31:0] grp_fu_232_p2;
wire    ap_block_pp2_stage1;
reg   [31:0] grp_fu_226_p0;
reg   [31:0] grp_fu_226_p1;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_block_pp1_stage1;
reg   [31:0] grp_fu_244_p0;
reg   [31:0] grp_fu_244_p1;
wire   [31:0] max_val_2_to_int_fu_281_p1;
wire   [31:0] max_val1_to_int_fu_298_p1;
wire   [7:0] tmp_9_fu_284_p4;
wire   [22:0] tmp_10_fu_294_p1;
wire   [0:0] notrhs_fu_322_p2;
wire   [0:0] notlhs_fu_316_p2;
wire   [7:0] tmp_14_fu_302_p4;
wire   [22:0] tmp_15_fu_312_p1;
wire   [0:0] notrhs6_fu_340_p2;
wire   [0:0] notlhs5_fu_334_p2;
wire   [0:0] tmp_16_fu_328_p2;
wire   [0:0] tmp_17_fu_346_p2;
wire   [0:0] tmp_18_fu_352_p2;
wire   [0:0] grp_fu_244_p2;
wire   [0:0] tmp_20_fu_358_p2;
wire   [31:0] mem_block2_dense_loa_3_fu_427_p1;
wire   [7:0] tmp_21_fu_431_p4;
wire   [22:0] tmp_22_fu_441_p1;
wire   [0:0] notrhs8_fu_451_p2;
wire   [0:0] notlhs7_fu_445_p2;
wire   [0:0] tmp_23_fu_457_p2;
reg   [1:0] grp_fu_226_opcode;
wire    ap_block_state10_pp1_stage3_iter0;
wire    ap_block_state15_pp1_stage3_iter1;
wire    ap_block_state20_pp1_stage3_iter2;
wire    ap_block_state25_pp1_stage3_iter3;
wire    ap_block_state30_pp1_stage3_iter4;
wire    ap_block_state35_pp1_stage3_iter5;
wire    ap_block_pp1_stage3_00001;
wire    ap_block_pp1_stage2_00001;
reg   [4:0] grp_fu_244_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp3_stage0_00001;
wire    ap_CS_fsm_state63;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp1_stage3_11001;
wire    ap_block_pp1_stage4_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

Softmax_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
Softmax_CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Softmax_INPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUT_DATA_WIDTH ))
Softmax_INPUT_s_axi_U(
    .AWVALID(s_axi_INPUT_AWVALID),
    .AWREADY(s_axi_INPUT_AWREADY),
    .AWADDR(s_axi_INPUT_AWADDR),
    .WVALID(s_axi_INPUT_WVALID),
    .WREADY(s_axi_INPUT_WREADY),
    .WDATA(s_axi_INPUT_WDATA),
    .WSTRB(s_axi_INPUT_WSTRB),
    .ARVALID(s_axi_INPUT_ARVALID),
    .ARREADY(s_axi_INPUT_ARREADY),
    .ARADDR(s_axi_INPUT_ARADDR),
    .RVALID(s_axi_INPUT_RVALID),
    .RREADY(s_axi_INPUT_RREADY),
    .RDATA(s_axi_INPUT_RDATA),
    .RRESP(s_axi_INPUT_RRESP),
    .BVALID(s_axi_INPUT_BVALID),
    .BREADY(s_axi_INPUT_BREADY),
    .BRESP(s_axi_INPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem_block2_dense_address0(mem_block2_dense_address0),
    .mem_block2_dense_ce0(mem_block2_dense_ce0),
    .mem_block2_dense_we0(mem_block2_dense_we0),
    .mem_block2_dense_d0(mem_block2_dense_d0),
    .mem_block2_dense_q0(mem_block2_dense_q0)
);

Softmax_OUTPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT_DATA_WIDTH ))
Softmax_OUTPUT_s_axi_U(
    .AWVALID(s_axi_OUTPUT_AWVALID),
    .AWREADY(s_axi_OUTPUT_AWREADY),
    .AWADDR(s_axi_OUTPUT_AWADDR),
    .WVALID(s_axi_OUTPUT_WVALID),
    .WREADY(s_axi_OUTPUT_WREADY),
    .WDATA(s_axi_OUTPUT_WDATA),
    .WSTRB(s_axi_OUTPUT_WSTRB),
    .ARVALID(s_axi_OUTPUT_ARVALID),
    .ARREADY(s_axi_OUTPUT_ARREADY),
    .ARADDR(s_axi_OUTPUT_ARADDR),
    .RVALID(s_axi_OUTPUT_RVALID),
    .RREADY(s_axi_OUTPUT_RREADY),
    .RDATA(s_axi_OUTPUT_RDATA),
    .RRESP(s_axi_OUTPUT_RRESP),
    .BVALID(s_axi_OUTPUT_BVALID),
    .BREADY(s_axi_OUTPUT_BREADY),
    .BRESP(s_axi_OUTPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .class_address0(class_address0),
    .class_ce0(class_ce0),
    .class_we0(class_we0),
    .class_d0(class_d0),
    .result_address0(result_address0),
    .result_ce0(result_ce0),
    .result_we0(result_we0),
    .result_d0(reg_255)
);

Softmax_parameter_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAMETER_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAMETER_DATA_WIDTH ))
Softmax_parameter_s_axi_U(
    .AWVALID(s_axi_parameter_AWVALID),
    .AWREADY(s_axi_parameter_AWREADY),
    .AWADDR(s_axi_parameter_AWADDR),
    .WVALID(s_axi_parameter_WVALID),
    .WREADY(s_axi_parameter_WREADY),
    .WDATA(s_axi_parameter_WDATA),
    .WSTRB(s_axi_parameter_WSTRB),
    .ARVALID(s_axi_parameter_ARVALID),
    .ARREADY(s_axi_parameter_ARREADY),
    .ARADDR(s_axi_parameter_ARADDR),
    .RVALID(s_axi_parameter_RVALID),
    .RREADY(s_axi_parameter_RREADY),
    .RDATA(s_axi_parameter_RDATA),
    .RRESP(s_axi_parameter_RRESP),
    .BVALID(s_axi_parameter_BVALID),
    .BREADY(s_axi_parameter_BREADY),
    .BRESP(s_axi_parameter_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1)
);

Softmax_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Softmax_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_226_p0),
    .din1(grp_fu_226_p1),
    .opcode(grp_fu_226_opcode),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

Softmax_fdiv_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Softmax_fdiv_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_255),
    .din1(sum_reg_191),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

Softmax_fptrunc_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
Softmax_fptrunc_6dEe_U3(
    .din0(tmp_6_reg_524),
    .dout(tmp_7_fu_238_p1)
);

Softmax_fpext_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Softmax_fpext_32neOg_U4(
    .din0(tmp_4_reg_514),
    .dout(tmp_5_fu_241_p1)
);

Softmax_fcmp_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Softmax_fcmp_32nsfYi_U5(
    .din0(grp_fu_244_p0),
    .din1(grp_fu_244_p1),
    .opcode(grp_fu_244_opcode),
    .dout(grp_fu_244_p2)
);

Softmax_dexp_64nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Softmax_dexp_64nsg8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_5_reg_519),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)))) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state41) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state41)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state41);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp2_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state60) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state60) & (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state60);
        end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_180 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond2_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_180 <= i_5_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_2_reg_203 <= 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond1_reg_540 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_203 <= i_6_reg_544;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_3_reg_214 <= 10'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_reg_554 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_3_reg_214 <= counter_reg_558;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_159 <= i_4_fu_275_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_159 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond3_reg_474 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_val1_reg_170 <= max_val_1_fu_364_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val1_reg_170 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_reg_191 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage2_11001) & (ap_reg_pp1_iter6_exitcond2_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        sum_reg_191 <= grp_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond3_reg_474 <= exitcond3_reg_474;
        exitcond3_reg_474 <= exitcond3_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond2_reg_500 <= exitcond2_reg_500;
        ap_reg_pp1_iter1_mem_block2_dense_add_2_reg_509 <= mem_block2_dense_add_2_reg_509;
        ap_reg_pp1_iter2_exitcond2_reg_500 <= ap_reg_pp1_iter1_exitcond2_reg_500;
        ap_reg_pp1_iter2_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter1_mem_block2_dense_add_2_reg_509;
        ap_reg_pp1_iter3_exitcond2_reg_500 <= ap_reg_pp1_iter2_exitcond2_reg_500;
        ap_reg_pp1_iter3_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter2_mem_block2_dense_add_2_reg_509;
        ap_reg_pp1_iter4_exitcond2_reg_500 <= ap_reg_pp1_iter3_exitcond2_reg_500;
        ap_reg_pp1_iter4_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter3_mem_block2_dense_add_2_reg_509;
        ap_reg_pp1_iter5_exitcond2_reg_500 <= ap_reg_pp1_iter4_exitcond2_reg_500;
        ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter4_mem_block2_dense_add_2_reg_509;
        ap_reg_pp1_iter6_exitcond2_reg_500 <= ap_reg_pp1_iter5_exitcond2_reg_500;
        exitcond2_reg_500 <= exitcond2_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_reg_pp2_iter1_exitcond1_reg_540 <= exitcond1_reg_540;
        ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_549 <= mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter2_exitcond1_reg_540 <= ap_reg_pp2_iter1_exitcond1_reg_540;
        ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter3_exitcond1_reg_540 <= ap_reg_pp2_iter2_exitcond1_reg_540;
        ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter4_exitcond1_reg_540 <= ap_reg_pp2_iter3_exitcond1_reg_540;
        ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter5_exitcond1_reg_540 <= ap_reg_pp2_iter4_exitcond1_reg_540;
        ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter6_exitcond1_reg_540 <= ap_reg_pp2_iter5_exitcond1_reg_540;
        ap_reg_pp2_iter6_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter7_exitcond1_reg_540 <= ap_reg_pp2_iter6_exitcond1_reg_540;
        ap_reg_pp2_iter7_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter6_mem_block2_dense_add_3_reg_549;
        ap_reg_pp2_iter8_exitcond1_reg_540 <= ap_reg_pp2_iter7_exitcond1_reg_540;
        ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter7_mem_block2_dense_add_3_reg_549;
        exitcond1_reg_540 <= exitcond1_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        counter_reg_558 <= counter_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_reg_554 <= exitcond_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_5_reg_504 <= i_5_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_6_reg_544 <= i_6_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_474 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_val_2_reg_488 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond2_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mem_block2_dense_add_2_reg_509 <= tmp_3_fu_383_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond1_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mem_block2_dense_add_3_reg_549 <= tmp_s_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp3_stage1_11001) & (exitcond_reg_554 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((exitcond2_reg_500 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((exitcond1_reg_540 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        reg_255 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp1_iter1_exitcond2_reg_500 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_4_reg_514 <= grp_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (ap_reg_pp1_iter1_exitcond2_reg_500 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        tmp_5_reg_519 <= tmp_5_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter4_exitcond2_reg_500 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_6_reg_524 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp1_iter5_exitcond2_reg_500 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_7_reg_529 <= tmp_7_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_8_reg_563[9 : 0] <= tmp_8_fu_417_p1[9 : 0];
    end
end

always @ (*) begin
    if ((exitcond3_fu_264_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_371_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_388_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state41 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state41 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_405_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_184_p4 = i_5_reg_504;
    end else begin
        ap_phi_mux_i_1_phi_fu_184_p4 = i_1_reg_180;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond1_reg_540 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_2_phi_fu_207_p4 = i_6_reg_544;
    end else begin
        ap_phi_mux_i_2_phi_fu_207_p4 = i_2_reg_203;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (exitcond_reg_554 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_i_3_phi_fu_218_p4 = counter_reg_558;
    end else begin
        ap_phi_mux_i_3_phi_fu_218_p4 = i_3_reg_214;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        class_ce0 = 1'b1;
    end else begin
        class_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (tmp_25_fu_463_p2 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        class_we0 = 1'b1;
    end else begin
        class_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2_00001) & (exitcond2_reg_500 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_226_opcode = 2'd1;
    end else if (((1'b0 == ap_block_pp1_stage3_00001) & (ap_reg_pp1_iter5_exitcond2_reg_500 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        grp_fu_226_opcode = 2'd0;
    end else begin
        grp_fu_226_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        grp_fu_226_p0 = sum_reg_191;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_226_p0 = reg_255;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        grp_fu_226_p1 = tmp_7_reg_529;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_226_p1 = max_val1_reg_170;
    end else begin
        grp_fu_226_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_00001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_fu_244_opcode = 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_00001) & (ap_reg_pp0_iter1_exitcond3_reg_474 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_244_opcode = 5'd2;
    end else begin
        grp_fu_244_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_fu_244_p0 = reg_255;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_244_p0 = max_val_2_reg_488;
    end else begin
        grp_fu_244_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_fu_244_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_244_p1 = max_val1_reg_170;
    end else begin
        grp_fu_244_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_8_fu_417_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        mem_block2_dense_address0 = ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_s_fu_400_p1;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        mem_block2_dense_address0 = ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_3_fu_383_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mem_block2_dense_address0 = tmp_fu_270_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mem_block2_dense_address0 = 64'd0;
    end else begin
        mem_block2_dense_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        mem_block2_dense_ce0 = 1'b1;
    end else begin
        mem_block2_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        mem_block2_dense_d0 = grp_fu_232_p2;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        mem_block2_dense_d0 = tmp_7_reg_529;
    end else begin
        mem_block2_dense_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage2_11001) & (ap_reg_pp1_iter5_exitcond2_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((ap_reg_pp2_iter8_exitcond1_reg_540 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        mem_block2_dense_we0 = 1'b1;
    end else begin
        mem_block2_dense_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (tmp_25_fu_463_p2 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_264_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_264_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond2_fu_371_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond2_fu_371_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((~((ap_enable_reg_pp1_iter5 == 1'b0) & (1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) & (1'b0 == ap_block_pp1_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else if (((ap_enable_reg_pp1_iter5 == 1'b0) & (1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond1_fu_388_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond1_fu_388_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_fu_405_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_fu_405_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd15];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign class_address0 = tmp_8_reg_563;

assign class_d0 = i_3_reg_214;

assign counter_fu_411_p2 = (ap_phi_mux_i_3_phi_fu_218_p4 + 10'd1);

assign exitcond1_fu_388_p2 = ((ap_phi_mux_i_2_phi_fu_207_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond2_fu_371_p2 = ((ap_phi_mux_i_1_phi_fu_184_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond3_fu_264_p2 = ((i_reg_159 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond_fu_405_p2 = ((ap_phi_mux_i_3_phi_fu_218_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign i_4_fu_275_p2 = (10'd1 + i_reg_159);

assign i_5_fu_377_p2 = (ap_phi_mux_i_1_phi_fu_184_p4 + 10'd1);

assign i_6_fu_394_p2 = (ap_phi_mux_i_2_phi_fu_207_p4 + 10'd1);

assign max_val1_to_int_fu_298_p1 = max_val1_reg_170;

assign max_val_1_fu_364_p3 = ((tmp_20_fu_358_p2[0:0] === 1'b1) ? max_val_2_reg_488 : max_val1_reg_170);

assign max_val_2_to_int_fu_281_p1 = max_val_2_reg_488;

assign mem_block2_dense_loa_3_fu_427_p1 = reg_255;

assign notlhs5_fu_334_p2 = ((tmp_14_fu_302_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_445_p2 = ((tmp_21_fu_431_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_316_p2 = ((tmp_9_fu_284_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs6_fu_340_p2 = ((tmp_15_fu_312_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_451_p2 = ((tmp_22_fu_441_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_322_p2 = ((tmp_10_fu_294_p1 == 23'd0) ? 1'b1 : 1'b0);

assign result_address0 = tmp_8_reg_563;

assign tmp_10_fu_294_p1 = max_val_2_to_int_fu_281_p1[22:0];

assign tmp_14_fu_302_p4 = {{max_val1_to_int_fu_298_p1[30:23]}};

assign tmp_15_fu_312_p1 = max_val1_to_int_fu_298_p1[22:0];

assign tmp_16_fu_328_p2 = (notrhs_fu_322_p2 | notlhs_fu_316_p2);

assign tmp_17_fu_346_p2 = (notrhs6_fu_340_p2 | notlhs5_fu_334_p2);

assign tmp_18_fu_352_p2 = (tmp_17_fu_346_p2 & tmp_16_fu_328_p2);

assign tmp_20_fu_358_p2 = (tmp_18_fu_352_p2 & grp_fu_244_p2);

assign tmp_21_fu_431_p4 = {{mem_block2_dense_loa_3_fu_427_p1[30:23]}};

assign tmp_22_fu_441_p1 = mem_block2_dense_loa_3_fu_427_p1[22:0];

assign tmp_23_fu_457_p2 = (notrhs8_fu_451_p2 | notlhs7_fu_445_p2);

assign tmp_25_fu_463_p2 = (tmp_23_fu_457_p2 & grp_fu_244_p2);

assign tmp_3_fu_383_p1 = ap_phi_mux_i_1_phi_fu_184_p4;

assign tmp_8_fu_417_p1 = ap_phi_mux_i_3_phi_fu_218_p4;

assign tmp_9_fu_284_p4 = {{max_val_2_to_int_fu_281_p1[30:23]}};

assign tmp_fu_270_p1 = i_reg_159;

assign tmp_s_fu_400_p1 = ap_phi_mux_i_2_phi_fu_207_p4;

always @ (posedge ap_clk) begin
    tmp_8_reg_563[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //Softmax
