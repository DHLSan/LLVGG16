-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Softmax is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_INPUT_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_INPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_PARAMETER_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_PARAMETER_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_INPUT_AWVALID : IN STD_LOGIC;
    s_axi_INPUT_AWREADY : OUT STD_LOGIC;
    s_axi_INPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_WVALID : IN STD_LOGIC;
    s_axi_INPUT_WREADY : OUT STD_LOGIC;
    s_axi_INPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_INPUT_ARVALID : IN STD_LOGIC;
    s_axi_INPUT_ARREADY : OUT STD_LOGIC;
    s_axi_INPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_RVALID : OUT STD_LOGIC;
    s_axi_INPUT_RREADY : IN STD_LOGIC;
    s_axi_INPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INPUT_BVALID : OUT STD_LOGIC;
    s_axi_INPUT_BREADY : IN STD_LOGIC;
    s_axi_INPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_parameter_AWVALID : IN STD_LOGIC;
    s_axi_parameter_AWREADY : OUT STD_LOGIC;
    s_axi_parameter_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_ADDR_WIDTH-1 downto 0);
    s_axi_parameter_WVALID : IN STD_LOGIC;
    s_axi_parameter_WREADY : OUT STD_LOGIC;
    s_axi_parameter_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_DATA_WIDTH-1 downto 0);
    s_axi_parameter_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_DATA_WIDTH/8-1 downto 0);
    s_axi_parameter_ARVALID : IN STD_LOGIC;
    s_axi_parameter_ARREADY : OUT STD_LOGIC;
    s_axi_parameter_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_ADDR_WIDTH-1 downto 0);
    s_axi_parameter_RVALID : OUT STD_LOGIC;
    s_axi_parameter_RREADY : IN STD_LOGIC;
    s_axi_parameter_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_DATA_WIDTH-1 downto 0);
    s_axi_parameter_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_parameter_BVALID : OUT STD_LOGIC;
    s_axi_parameter_BREADY : IN STD_LOGIC;
    s_axi_parameter_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Softmax is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Softmax,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.090000,HLS_SYN_LAT=10051,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=28,HLS_SYN_FF=3973,HLS_SYN_LUT=5937}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mem_block2_dense_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_block2_dense_ce0 : STD_LOGIC;
    signal mem_block2_dense_we0 : STD_LOGIC;
    signal mem_block2_dense_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_block2_dense_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal class_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal class_ce0 : STD_LOGIC;
    signal class_we0 : STD_LOGIC;
    signal class_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal i_reg_159 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val1_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_180 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_203 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_214 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state42_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state44_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state46_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state48_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state50_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state52_pp2_stage1_iter5 : BOOLEAN;
    signal ap_block_state54_pp2_stage1_iter6 : BOOLEAN;
    signal ap_block_state56_pp2_stage1_iter7 : BOOLEAN;
    signal ap_block_state58_pp2_stage1_iter8 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state23_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_state28_pp1_stage1_iter4 : BOOLEAN;
    signal ap_block_state33_pp1_stage1_iter5 : BOOLEAN;
    signal ap_block_state38_pp1_stage1_iter6 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state61_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal exitcond_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond3_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal max_val_2_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal max_val_1_fu_364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond2_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter4_exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter5_exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter6_exitcond2_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_377_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_504 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_block2_dense_add_2_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp1_iter1_mem_block2_dense_add_2_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp1_iter2_mem_block2_dense_add_2_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp1_iter3_mem_block2_dense_add_2_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp1_iter4_mem_block2_dense_add_2_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tmp_5_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_519 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state9_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state19_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_state24_pp1_stage2_iter3 : BOOLEAN;
    signal ap_block_state29_pp1_stage2_iter4 : BOOLEAN;
    signal ap_block_state34_pp1_stage2_iter5 : BOOLEAN;
    signal ap_block_state39_pp1_stage2_iter6 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_524 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal exitcond1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state41_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state47_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state49_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_reg_pp2_iter1_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter4_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter5_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter6_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter7_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter8_exitcond1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_reg_544 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter6_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter7_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state60_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state62_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal counter_fu_411_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal counter_reg_558 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_state11_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage4_iter2 : BOOLEAN;
    signal ap_block_state26_pp1_stage4_iter3 : BOOLEAN;
    signal ap_block_state31_pp1_stage4_iter4 : BOOLEAN;
    signal ap_block_state36_pp1_stage4_iter5 : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state41 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state60 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_184_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_207_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_3_phi_fu_218_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_3_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_2_to_int_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val1_to_int_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_294_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_312_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_block2_dense_loa_3_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_431_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_441_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_226_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state10_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_state25_pp1_stage3_iter3 : BOOLEAN;
    signal ap_block_state30_pp1_stage3_iter4 : BOOLEAN;
    signal ap_block_state35_pp1_stage3_iter5 : BOOLEAN;
    signal ap_block_pp1_stage3_00001 : BOOLEAN;
    signal ap_block_pp1_stage2_00001 : BOOLEAN;
    signal grp_fu_244_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component Softmax_faddfsub_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_fdiv_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_fptrunc_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_fpext_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Softmax_fcmp_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Softmax_dexp_64nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Softmax_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Softmax_INPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mem_block2_dense_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        mem_block2_dense_ce0 : IN STD_LOGIC;
        mem_block2_dense_we0 : IN STD_LOGIC;
        mem_block2_dense_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_block2_dense_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_OUTPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        class_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        class_ce0 : IN STD_LOGIC;
        class_we0 : IN STD_LOGIC;
        class_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        result_ce0 : IN STD_LOGIC;
        result_we0 : IN STD_LOGIC;
        result_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_parameter_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC );
    end component;



begin
    Softmax_CONTROL_s_axi_U : component Softmax_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Softmax_INPUT_s_axi_U : component Softmax_INPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INPUT_AWVALID,
        AWREADY => s_axi_INPUT_AWREADY,
        AWADDR => s_axi_INPUT_AWADDR,
        WVALID => s_axi_INPUT_WVALID,
        WREADY => s_axi_INPUT_WREADY,
        WDATA => s_axi_INPUT_WDATA,
        WSTRB => s_axi_INPUT_WSTRB,
        ARVALID => s_axi_INPUT_ARVALID,
        ARREADY => s_axi_INPUT_ARREADY,
        ARADDR => s_axi_INPUT_ARADDR,
        RVALID => s_axi_INPUT_RVALID,
        RREADY => s_axi_INPUT_RREADY,
        RDATA => s_axi_INPUT_RDATA,
        RRESP => s_axi_INPUT_RRESP,
        BVALID => s_axi_INPUT_BVALID,
        BREADY => s_axi_INPUT_BREADY,
        BRESP => s_axi_INPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mem_block2_dense_address0 => mem_block2_dense_address0,
        mem_block2_dense_ce0 => mem_block2_dense_ce0,
        mem_block2_dense_we0 => mem_block2_dense_we0,
        mem_block2_dense_d0 => mem_block2_dense_d0,
        mem_block2_dense_q0 => mem_block2_dense_q0);

    Softmax_OUTPUT_s_axi_U : component Softmax_OUTPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT_AWVALID,
        AWREADY => s_axi_OUTPUT_AWREADY,
        AWADDR => s_axi_OUTPUT_AWADDR,
        WVALID => s_axi_OUTPUT_WVALID,
        WREADY => s_axi_OUTPUT_WREADY,
        WDATA => s_axi_OUTPUT_WDATA,
        WSTRB => s_axi_OUTPUT_WSTRB,
        ARVALID => s_axi_OUTPUT_ARVALID,
        ARREADY => s_axi_OUTPUT_ARREADY,
        ARADDR => s_axi_OUTPUT_ARADDR,
        RVALID => s_axi_OUTPUT_RVALID,
        RREADY => s_axi_OUTPUT_RREADY,
        RDATA => s_axi_OUTPUT_RDATA,
        RRESP => s_axi_OUTPUT_RRESP,
        BVALID => s_axi_OUTPUT_BVALID,
        BREADY => s_axi_OUTPUT_BREADY,
        BRESP => s_axi_OUTPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        class_address0 => class_address0,
        class_ce0 => class_ce0,
        class_we0 => class_we0,
        class_d0 => class_d0,
        result_address0 => result_address0,
        result_ce0 => result_ce0,
        result_we0 => result_we0,
        result_d0 => reg_255);

    Softmax_parameter_s_axi_U : component Softmax_parameter_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PARAMETER_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PARAMETER_DATA_WIDTH)
    port map (
        AWVALID => s_axi_parameter_AWVALID,
        AWREADY => s_axi_parameter_AWREADY,
        AWADDR => s_axi_parameter_AWADDR,
        WVALID => s_axi_parameter_WVALID,
        WREADY => s_axi_parameter_WREADY,
        WDATA => s_axi_parameter_WDATA,
        WSTRB => s_axi_parameter_WSTRB,
        ARVALID => s_axi_parameter_ARVALID,
        ARREADY => s_axi_parameter_ARREADY,
        ARADDR => s_axi_parameter_ARADDR,
        RVALID => s_axi_parameter_RVALID,
        RREADY => s_axi_parameter_RREADY,
        RDATA => s_axi_parameter_RDATA,
        RRESP => s_axi_parameter_RRESP,
        BVALID => s_axi_parameter_BVALID,
        BREADY => s_axi_parameter_BREADY,
        BRESP => s_axi_parameter_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1);

    Softmax_faddfsub_bkb_U1 : component Softmax_faddfsub_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        opcode => grp_fu_226_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    Softmax_fdiv_32nscud_U2 : component Softmax_fdiv_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_255,
        din1 => sum_reg_191,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    Softmax_fptrunc_6dEe_U3 : component Softmax_fptrunc_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_6_reg_524,
        dout => tmp_7_fu_238_p1);

    Softmax_fpext_32neOg_U4 : component Softmax_fpext_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_4_reg_514,
        dout => tmp_5_fu_241_p1);

    Softmax_fcmp_32nsfYi_U5 : component Softmax_fcmp_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_244_p0,
        din1 => grp_fu_244_p1,
        opcode => grp_fu_244_opcode,
        dout => grp_fu_244_p2);

    Softmax_dexp_64nsg8j_U6 : component Softmax_dexp_64nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_5_reg_519,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state41) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state41)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state41);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state60) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state60) and (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state60);
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_180 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_500 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_180 <= i_5_reg_504;
            end if; 
        end if;
    end process;

    i_2_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_2_reg_203 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond1_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_203 <= i_6_reg_544;
            end if; 
        end if;
    end process;

    i_3_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                i_3_reg_214 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_3_reg_214 <= counter_reg_558;
            end if; 
        end if;
    end process;

    i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_fu_264_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_159 <= i_4_fu_275_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_159 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    max_val1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond3_reg_474 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                max_val1_reg_170 <= max_val_1_fu_364_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                max_val1_reg_170 <= mem_block2_dense_q0;
            end if; 
        end if;
    end process;

    sum_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_reg_191 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_reg_pp1_iter6_exitcond2_reg_500 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                sum_reg_191 <= grp_fu_226_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond3_reg_474 <= exitcond3_reg_474;
                exitcond3_reg_474 <= exitcond3_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_exitcond2_reg_500 <= exitcond2_reg_500;
                ap_reg_pp1_iter1_mem_block2_dense_add_2_reg_509 <= mem_block2_dense_add_2_reg_509;
                ap_reg_pp1_iter2_exitcond2_reg_500 <= ap_reg_pp1_iter1_exitcond2_reg_500;
                ap_reg_pp1_iter2_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter1_mem_block2_dense_add_2_reg_509;
                ap_reg_pp1_iter3_exitcond2_reg_500 <= ap_reg_pp1_iter2_exitcond2_reg_500;
                ap_reg_pp1_iter3_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter2_mem_block2_dense_add_2_reg_509;
                ap_reg_pp1_iter4_exitcond2_reg_500 <= ap_reg_pp1_iter3_exitcond2_reg_500;
                ap_reg_pp1_iter4_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter3_mem_block2_dense_add_2_reg_509;
                ap_reg_pp1_iter5_exitcond2_reg_500 <= ap_reg_pp1_iter4_exitcond2_reg_500;
                ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509 <= ap_reg_pp1_iter4_mem_block2_dense_add_2_reg_509;
                ap_reg_pp1_iter6_exitcond2_reg_500 <= ap_reg_pp1_iter5_exitcond2_reg_500;
                exitcond2_reg_500 <= exitcond2_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                ap_reg_pp2_iter1_exitcond1_reg_540 <= exitcond1_reg_540;
                ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_549 <= mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter2_exitcond1_reg_540 <= ap_reg_pp2_iter1_exitcond1_reg_540;
                ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter3_exitcond1_reg_540 <= ap_reg_pp2_iter2_exitcond1_reg_540;
                ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter4_exitcond1_reg_540 <= ap_reg_pp2_iter3_exitcond1_reg_540;
                ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter5_exitcond1_reg_540 <= ap_reg_pp2_iter4_exitcond1_reg_540;
                ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter6_exitcond1_reg_540 <= ap_reg_pp2_iter5_exitcond1_reg_540;
                ap_reg_pp2_iter6_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter7_exitcond1_reg_540 <= ap_reg_pp2_iter6_exitcond1_reg_540;
                ap_reg_pp2_iter7_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter6_mem_block2_dense_add_3_reg_549;
                ap_reg_pp2_iter8_exitcond1_reg_540 <= ap_reg_pp2_iter7_exitcond1_reg_540;
                ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549 <= ap_reg_pp2_iter7_mem_block2_dense_add_3_reg_549;
                exitcond1_reg_540 <= exitcond1_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                counter_reg_558 <= counter_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond_reg_554 <= exitcond_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_5_reg_504 <= i_5_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                i_6_reg_544 <= i_6_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_reg_474 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                max_val_2_reg_488 <= mem_block2_dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                mem_block2_dense_add_2_reg_509 <= tmp_3_fu_383_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond1_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                mem_block2_dense_add_3_reg_549 <= tmp_s_fu_400_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (exitcond_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((exitcond1_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then
                reg_255 <= mem_block2_dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter1_exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tmp_4_reg_514 <= grp_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_reg_pp1_iter1_exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                tmp_5_reg_519 <= tmp_5_fu_241_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_reg_pp1_iter4_exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_6_reg_524 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter5_exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tmp_7_reg_529 <= tmp_7_fu_238_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    tmp_8_reg_563(9 downto 0) <= tmp_8_fu_417_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_8_reg_563(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, exitcond3_fu_264_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond2_fu_371_p2, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter6, exitcond1_fu_388_p2, exitcond_fu_405_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage2_subdone, ap_enable_reg_pp1_iter5, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_block_pp3_stage0_subdone, ap_block_pp3_stage1_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond3_fu_264_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond3_fu_264_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond2_fu_371_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond2_fu_371_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((not(((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                elsif (((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond1_fu_388_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond1_fu_388_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond_fu_405_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond_fu_405_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state40 <= ap_CS_fsm(9);
    ap_CS_fsm_state59 <= ap_CS_fsm(12);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state63 <= ap_CS_fsm(15);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond3_fu_264_p2)
    begin
        if ((exitcond3_fu_264_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond2_fu_371_p2)
    begin
        if ((exitcond2_fu_371_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state41_assign_proc : process(exitcond1_fu_388_p2)
    begin
        if ((exitcond1_fu_388_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state41 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state60_assign_proc : process(exitcond_fu_405_p2)
    begin
        if ((exitcond_fu_405_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state60 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state60 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8)
    begin
        if (((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_184_p4_assign_proc : process(i_1_reg_180, exitcond2_reg_500, ap_CS_fsm_pp1_stage0, i_5_reg_504, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_500 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_184_p4 <= i_5_reg_504;
        else 
            ap_phi_mux_i_1_phi_fu_184_p4 <= i_1_reg_180;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_207_p4_assign_proc : process(i_2_reg_203, exitcond1_reg_540, ap_CS_fsm_pp2_stage0, i_6_reg_544, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond1_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_2_phi_fu_207_p4 <= i_6_reg_544;
        else 
            ap_phi_mux_i_2_phi_fu_207_p4 <= i_2_reg_203;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_218_p4_assign_proc : process(i_3_reg_214, exitcond_reg_554, ap_CS_fsm_pp3_stage0, counter_reg_558, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_i_3_phi_fu_218_p4 <= counter_reg_558;
        else 
            ap_phi_mux_i_3_phi_fu_218_p4 <= i_3_reg_214;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    class_address0 <= tmp_8_reg_563(10 - 1 downto 0);

    class_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            class_ce0 <= ap_const_logic_1;
        else 
            class_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    class_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_214),32));

    class_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, tmp_25_fu_463_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (tmp_25_fu_463_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            class_we0 <= ap_const_logic_1;
        else 
            class_we0 <= ap_const_logic_0;
        end if; 
    end process;

    counter_fu_411_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_218_p4) + unsigned(ap_const_lv10_1));
    exitcond1_fu_388_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_207_p4 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_371_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_184_p4 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_264_p2 <= "1" when (i_reg_159 = ap_const_lv10_3E8) else "0";
    exitcond_fu_405_p2 <= "1" when (ap_phi_mux_i_3_phi_fu_218_p4 = ap_const_lv10_3E8) else "0";

    grp_fu_226_opcode_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond2_reg_500, ap_reg_pp1_iter5_exitcond2_reg_500, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter5, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_00001, ap_block_pp1_stage2_00001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2_00001) and (exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_226_opcode <= ap_const_lv2_1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3_00001) and (ap_reg_pp1_iter5_exitcond2_reg_500 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            grp_fu_226_opcode <= ap_const_lv2_0;
        else 
            grp_fu_226_opcode <= "XX";
        end if; 
    end process;


    grp_fu_226_p0_assign_proc : process(sum_reg_191, reg_255, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter5, ap_block_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            grp_fu_226_p0 <= sum_reg_191;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_226_p0 <= reg_255;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p1_assign_proc : process(max_val1_reg_170, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, tmp_7_reg_529, ap_enable_reg_pp1_iter5, ap_block_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            grp_fu_226_p1 <= tmp_7_reg_529;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_226_p1 <= max_val1_reg_170;
        else 
            grp_fu_226_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_opcode_assign_proc : process(ap_reg_pp0_iter1_exitcond3_reg_474, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_00001, ap_block_pp3_stage0_00001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_00001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_244_opcode <= ap_const_lv5_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_reg_pp0_iter1_exitcond3_reg_474 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_244_opcode <= ap_const_lv5_2;
        else 
            grp_fu_244_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_244_p0_assign_proc : process(reg_255, max_val_2_reg_488, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_244_p0 <= reg_255;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_244_p0 <= max_val_2_reg_488;
        else 
            grp_fu_244_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_p1_assign_proc : process(max_val1_reg_170, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_244_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_244_p1 <= max_val1_reg_170;
        else 
            grp_fu_244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_reg_159));
    i_5_fu_377_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_184_p4) + unsigned(ap_const_lv10_1));
    i_6_fu_394_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_207_p4) + unsigned(ap_const_lv10_1));
    max_val1_to_int_fu_298_p1 <= max_val1_reg_170;
    max_val_1_fu_364_p3 <= 
        max_val_2_reg_488 when (tmp_20_fu_358_p2(0) = '1') else 
        max_val1_reg_170;
    max_val_2_to_int_fu_281_p1 <= max_val_2_reg_488;

    mem_block2_dense_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549, ap_CS_fsm_pp3_stage0, tmp_8_fu_417_p1, ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter8, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, tmp_fu_270_p1, ap_block_pp0_stage0, tmp_3_fu_383_p1, tmp_s_fu_400_p1, ap_block_pp1_stage2, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            mem_block2_dense_address0 <= tmp_8_fu_417_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            mem_block2_dense_address0 <= ap_reg_pp2_iter8_mem_block2_dense_add_3_reg_549;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            mem_block2_dense_address0 <= tmp_s_fu_400_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            mem_block2_dense_address0 <= ap_reg_pp1_iter5_mem_block2_dense_add_2_reg_509;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            mem_block2_dense_address0 <= tmp_3_fu_383_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mem_block2_dense_address0 <= tmp_fu_270_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mem_block2_dense_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            mem_block2_dense_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mem_block2_dense_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            mem_block2_dense_ce0 <= ap_const_logic_1;
        else 
            mem_block2_dense_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_block2_dense_d0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp1_stage2, tmp_7_reg_529, ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter8, ap_block_pp1_stage2, grp_fu_232_p2, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            mem_block2_dense_d0 <= grp_fu_232_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            mem_block2_dense_d0 <= tmp_7_reg_529;
        else 
            mem_block2_dense_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_block2_dense_loa_3_fu_427_p1 <= reg_255;

    mem_block2_dense_we0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_reg_pp1_iter5_exitcond2_reg_500, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_reg_pp2_iter8_exitcond1_reg_540, ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_reg_pp1_iter5_exitcond2_reg_500 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_reg_pp2_iter8_exitcond1_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            mem_block2_dense_we0 <= ap_const_logic_1;
        else 
            mem_block2_dense_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs5_fu_334_p2 <= "0" when (tmp_14_fu_302_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_445_p2 <= "0" when (tmp_21_fu_431_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_316_p2 <= "0" when (tmp_9_fu_284_p4 = ap_const_lv8_FF) else "1";
    notrhs6_fu_340_p2 <= "1" when (tmp_15_fu_312_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_451_p2 <= "1" when (tmp_22_fu_441_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_322_p2 <= "1" when (tmp_10_fu_294_p1 = ap_const_lv23_0) else "0";
    result_address0 <= tmp_8_reg_563(10 - 1 downto 0);

    result_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, tmp_25_fu_463_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (tmp_25_fu_463_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_294_p1 <= max_val_2_to_int_fu_281_p1(23 - 1 downto 0);
    tmp_14_fu_302_p4 <= max_val1_to_int_fu_298_p1(30 downto 23);
    tmp_15_fu_312_p1 <= max_val1_to_int_fu_298_p1(23 - 1 downto 0);
    tmp_16_fu_328_p2 <= (notrhs_fu_322_p2 or notlhs_fu_316_p2);
    tmp_17_fu_346_p2 <= (notrhs6_fu_340_p2 or notlhs5_fu_334_p2);
    tmp_18_fu_352_p2 <= (tmp_17_fu_346_p2 and tmp_16_fu_328_p2);
    tmp_20_fu_358_p2 <= (tmp_18_fu_352_p2 and grp_fu_244_p2);
    tmp_21_fu_431_p4 <= mem_block2_dense_loa_3_fu_427_p1(30 downto 23);
    tmp_22_fu_441_p1 <= mem_block2_dense_loa_3_fu_427_p1(23 - 1 downto 0);
    tmp_23_fu_457_p2 <= (notrhs8_fu_451_p2 or notlhs7_fu_445_p2);
    tmp_25_fu_463_p2 <= (tmp_23_fu_457_p2 and grp_fu_244_p2);
    tmp_3_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_184_p4),64));
    tmp_8_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_3_phi_fu_218_p4),64));
    tmp_9_fu_284_p4 <= max_val_2_to_int_fu_281_p1(30 downto 23);
    tmp_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_159),64));
    tmp_s_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_207_p4),64));
end behav;
