// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="VGG16,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.641000,HLS_SYN_LAT=65002,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=28,HLS_SYN_FF=3909,HLS_SYN_LUT=6153}" *)

module VGG16 (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt,
        s_axi_INPUT_AWVALID,
        s_axi_INPUT_AWREADY,
        s_axi_INPUT_AWADDR,
        s_axi_INPUT_WVALID,
        s_axi_INPUT_WREADY,
        s_axi_INPUT_WDATA,
        s_axi_INPUT_WSTRB,
        s_axi_INPUT_ARVALID,
        s_axi_INPUT_ARREADY,
        s_axi_INPUT_ARADDR,
        s_axi_INPUT_RVALID,
        s_axi_INPUT_RREADY,
        s_axi_INPUT_RDATA,
        s_axi_INPUT_RRESP,
        s_axi_INPUT_BVALID,
        s_axi_INPUT_BREADY,
        s_axi_INPUT_BRESP,
        s_axi_OUTPUT_AWVALID,
        s_axi_OUTPUT_AWREADY,
        s_axi_OUTPUT_AWADDR,
        s_axi_OUTPUT_WVALID,
        s_axi_OUTPUT_WREADY,
        s_axi_OUTPUT_WDATA,
        s_axi_OUTPUT_WSTRB,
        s_axi_OUTPUT_ARVALID,
        s_axi_OUTPUT_ARREADY,
        s_axi_OUTPUT_ARADDR,
        s_axi_OUTPUT_RVALID,
        s_axi_OUTPUT_RREADY,
        s_axi_OUTPUT_RDATA,
        s_axi_OUTPUT_RRESP,
        s_axi_OUTPUT_BVALID,
        s_axi_OUTPUT_BREADY,
        s_axi_OUTPUT_BRESP,
        s_axi_OUTPUT1_AWVALID,
        s_axi_OUTPUT1_AWREADY,
        s_axi_OUTPUT1_AWADDR,
        s_axi_OUTPUT1_WVALID,
        s_axi_OUTPUT1_WREADY,
        s_axi_OUTPUT1_WDATA,
        s_axi_OUTPUT1_WSTRB,
        s_axi_OUTPUT1_ARVALID,
        s_axi_OUTPUT1_ARREADY,
        s_axi_OUTPUT1_ARADDR,
        s_axi_OUTPUT1_RVALID,
        s_axi_OUTPUT1_RREADY,
        s_axi_OUTPUT1_RDATA,
        s_axi_OUTPUT1_RRESP,
        s_axi_OUTPUT1_BVALID,
        s_axi_OUTPUT1_BREADY,
        s_axi_OUTPUT1_BRESP,
        s_axi_parameter_AWVALID,
        s_axi_parameter_AWREADY,
        s_axi_parameter_AWADDR,
        s_axi_parameter_WVALID,
        s_axi_parameter_WREADY,
        s_axi_parameter_WDATA,
        s_axi_parameter_WSTRB,
        s_axi_parameter_ARVALID,
        s_axi_parameter_ARREADY,
        s_axi_parameter_ARADDR,
        s_axi_parameter_RVALID,
        s_axi_parameter_RREADY,
        s_axi_parameter_RDATA,
        s_axi_parameter_RRESP,
        s_axi_parameter_BVALID,
        s_axi_parameter_BREADY,
        s_axi_parameter_BRESP
);

parameter    ap_ST_fsm_state1 = 67'd1;
parameter    ap_ST_fsm_state2 = 67'd2;
parameter    ap_ST_fsm_state3 = 67'd4;
parameter    ap_ST_fsm_state4 = 67'd8;
parameter    ap_ST_fsm_state5 = 67'd16;
parameter    ap_ST_fsm_state6 = 67'd32;
parameter    ap_ST_fsm_state7 = 67'd64;
parameter    ap_ST_fsm_state8 = 67'd128;
parameter    ap_ST_fsm_state9 = 67'd256;
parameter    ap_ST_fsm_state10 = 67'd512;
parameter    ap_ST_fsm_state11 = 67'd1024;
parameter    ap_ST_fsm_state12 = 67'd2048;
parameter    ap_ST_fsm_state13 = 67'd4096;
parameter    ap_ST_fsm_state14 = 67'd8192;
parameter    ap_ST_fsm_state15 = 67'd16384;
parameter    ap_ST_fsm_state16 = 67'd32768;
parameter    ap_ST_fsm_state17 = 67'd65536;
parameter    ap_ST_fsm_state18 = 67'd131072;
parameter    ap_ST_fsm_state19 = 67'd262144;
parameter    ap_ST_fsm_state20 = 67'd524288;
parameter    ap_ST_fsm_state21 = 67'd1048576;
parameter    ap_ST_fsm_state22 = 67'd2097152;
parameter    ap_ST_fsm_state23 = 67'd4194304;
parameter    ap_ST_fsm_state24 = 67'd8388608;
parameter    ap_ST_fsm_state25 = 67'd16777216;
parameter    ap_ST_fsm_state26 = 67'd33554432;
parameter    ap_ST_fsm_state27 = 67'd67108864;
parameter    ap_ST_fsm_state28 = 67'd134217728;
parameter    ap_ST_fsm_state29 = 67'd268435456;
parameter    ap_ST_fsm_state30 = 67'd536870912;
parameter    ap_ST_fsm_state31 = 67'd1073741824;
parameter    ap_ST_fsm_state32 = 67'd2147483648;
parameter    ap_ST_fsm_state33 = 67'd4294967296;
parameter    ap_ST_fsm_state34 = 67'd8589934592;
parameter    ap_ST_fsm_state35 = 67'd17179869184;
parameter    ap_ST_fsm_state36 = 67'd34359738368;
parameter    ap_ST_fsm_state37 = 67'd68719476736;
parameter    ap_ST_fsm_state38 = 67'd137438953472;
parameter    ap_ST_fsm_state39 = 67'd274877906944;
parameter    ap_ST_fsm_state40 = 67'd549755813888;
parameter    ap_ST_fsm_state41 = 67'd1099511627776;
parameter    ap_ST_fsm_state42 = 67'd2199023255552;
parameter    ap_ST_fsm_state43 = 67'd4398046511104;
parameter    ap_ST_fsm_state44 = 67'd8796093022208;
parameter    ap_ST_fsm_state45 = 67'd17592186044416;
parameter    ap_ST_fsm_state46 = 67'd35184372088832;
parameter    ap_ST_fsm_state47 = 67'd70368744177664;
parameter    ap_ST_fsm_state48 = 67'd140737488355328;
parameter    ap_ST_fsm_state49 = 67'd281474976710656;
parameter    ap_ST_fsm_state50 = 67'd562949953421312;
parameter    ap_ST_fsm_state51 = 67'd1125899906842624;
parameter    ap_ST_fsm_state52 = 67'd2251799813685248;
parameter    ap_ST_fsm_state53 = 67'd4503599627370496;
parameter    ap_ST_fsm_state54 = 67'd9007199254740992;
parameter    ap_ST_fsm_state55 = 67'd18014398509481984;
parameter    ap_ST_fsm_state56 = 67'd36028797018963968;
parameter    ap_ST_fsm_state57 = 67'd72057594037927936;
parameter    ap_ST_fsm_state58 = 67'd144115188075855872;
parameter    ap_ST_fsm_state59 = 67'd288230376151711744;
parameter    ap_ST_fsm_state60 = 67'd576460752303423488;
parameter    ap_ST_fsm_state61 = 67'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 67'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 67'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 67'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 67'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 67'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 67'd73786976294838206464;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT1_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT1_ADDR_WIDTH = 13;
parameter    C_S_AXI_PARAMETER_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAMETER_ADDR_WIDTH = 13;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT1_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_PARAMETER_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;
input   s_axi_INPUT_AWVALID;
output   s_axi_INPUT_AWREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_AWADDR;
input   s_axi_INPUT_WVALID;
output   s_axi_INPUT_WREADY;
input  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_WDATA;
input  [C_S_AXI_INPUT_WSTRB_WIDTH - 1:0] s_axi_INPUT_WSTRB;
input   s_axi_INPUT_ARVALID;
output   s_axi_INPUT_ARREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_ARADDR;
output   s_axi_INPUT_RVALID;
input   s_axi_INPUT_RREADY;
output  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_RDATA;
output  [1:0] s_axi_INPUT_RRESP;
output   s_axi_INPUT_BVALID;
input   s_axi_INPUT_BREADY;
output  [1:0] s_axi_INPUT_BRESP;
input   s_axi_OUTPUT_AWVALID;
output   s_axi_OUTPUT_AWREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_AWADDR;
input   s_axi_OUTPUT_WVALID;
output   s_axi_OUTPUT_WREADY;
input  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_WDATA;
input  [C_S_AXI_OUTPUT_WSTRB_WIDTH - 1:0] s_axi_OUTPUT_WSTRB;
input   s_axi_OUTPUT_ARVALID;
output   s_axi_OUTPUT_ARREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_ARADDR;
output   s_axi_OUTPUT_RVALID;
input   s_axi_OUTPUT_RREADY;
output  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_RDATA;
output  [1:0] s_axi_OUTPUT_RRESP;
output   s_axi_OUTPUT_BVALID;
input   s_axi_OUTPUT_BREADY;
output  [1:0] s_axi_OUTPUT_BRESP;
input   s_axi_OUTPUT1_AWVALID;
output   s_axi_OUTPUT1_AWREADY;
input  [C_S_AXI_OUTPUT1_ADDR_WIDTH - 1:0] s_axi_OUTPUT1_AWADDR;
input   s_axi_OUTPUT1_WVALID;
output   s_axi_OUTPUT1_WREADY;
input  [C_S_AXI_OUTPUT1_DATA_WIDTH - 1:0] s_axi_OUTPUT1_WDATA;
input  [C_S_AXI_OUTPUT1_WSTRB_WIDTH - 1:0] s_axi_OUTPUT1_WSTRB;
input   s_axi_OUTPUT1_ARVALID;
output   s_axi_OUTPUT1_ARREADY;
input  [C_S_AXI_OUTPUT1_ADDR_WIDTH - 1:0] s_axi_OUTPUT1_ARADDR;
output   s_axi_OUTPUT1_RVALID;
input   s_axi_OUTPUT1_RREADY;
output  [C_S_AXI_OUTPUT1_DATA_WIDTH - 1:0] s_axi_OUTPUT1_RDATA;
output  [1:0] s_axi_OUTPUT1_RRESP;
output   s_axi_OUTPUT1_BVALID;
input   s_axi_OUTPUT1_BREADY;
output  [1:0] s_axi_OUTPUT1_BRESP;
input   s_axi_parameter_AWVALID;
output   s_axi_parameter_AWREADY;
input  [C_S_AXI_PARAMETER_ADDR_WIDTH - 1:0] s_axi_parameter_AWADDR;
input   s_axi_parameter_WVALID;
output   s_axi_parameter_WREADY;
input  [C_S_AXI_PARAMETER_DATA_WIDTH - 1:0] s_axi_parameter_WDATA;
input  [C_S_AXI_PARAMETER_WSTRB_WIDTH - 1:0] s_axi_parameter_WSTRB;
input   s_axi_parameter_ARVALID;
output   s_axi_parameter_ARREADY;
input  [C_S_AXI_PARAMETER_ADDR_WIDTH - 1:0] s_axi_parameter_ARADDR;
output   s_axi_parameter_RVALID;
input   s_axi_parameter_RREADY;
output  [C_S_AXI_PARAMETER_DATA_WIDTH - 1:0] s_axi_parameter_RDATA;
output  [1:0] s_axi_parameter_RRESP;
output   s_axi_parameter_BVALID;
input   s_axi_parameter_BREADY;
output  [1:0] s_axi_parameter_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [66:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [9:0] mem_block2_dense_address0;
reg    mem_block2_dense_ce0;
reg    mem_block2_dense_we0;
reg   [31:0] mem_block2_dense_d0;
wire   [31:0] mem_block2_dense_q0;
wire   [9:0] bd3_address0;
reg    bd3_ce0;
wire   [31:0] bd3_q0;
wire   [9:0] class_address0;
reg    class_ce0;
reg    class_we0;
wire   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
reg   [31:0] reg_286;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_256_p2;
reg   [31:0] reg_295;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state22;
wire   [9:0] i_5_fu_307_p2;
reg   [9:0] i_5_reg_596;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond4_fu_301_p2;
reg   [9:0] mem_block2_dense_add_1_reg_606;
reg   [31:0] bd3_load_reg_611;
wire   [31:0] storemerge_fu_361_p3;
reg   [31:0] storemerge_reg_616;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond3_fu_369_p2;
wire   [9:0] i_6_fu_380_p2;
reg   [9:0] i_6_reg_629;
reg   [31:0] max_val_2_reg_634;
wire    ap_CS_fsm_state13;
wire   [0:0] grp_fu_275_p2;
reg   [0:0] tmp_23_reg_641;
wire    ap_CS_fsm_state14;
wire   [31:0] max_val_1_fu_468_p3;
wire    ap_CS_fsm_state15;
wire   [9:0] i_7_fu_481_p2;
reg   [9:0] i_7_reg_654;
wire    ap_CS_fsm_state16;
reg   [9:0] mem_block2_dense_add_3_reg_659;
wire   [0:0] exitcond2_fu_475_p2;
wire   [63:0] tmp_9_fu_272_p1;
reg   [63:0] tmp_9_reg_664;
wire    ap_CS_fsm_state23;
wire   [63:0] grp_fu_281_p2;
reg   [63:0] tmp_s_reg_669;
wire    ap_CS_fsm_state41;
wire   [31:0] tmp_3_fu_269_p1;
reg   [31:0] tmp_3_reg_674;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
wire   [9:0] i_8_fu_498_p2;
reg   [9:0] i_8_reg_688;
wire    ap_CS_fsm_state48;
reg   [9:0] mem_block2_dense_add_4_reg_693;
wire   [0:0] exitcond1_fu_492_p2;
wire   [9:0] i_9_fu_515_p2;
reg   [9:0] i_9_reg_701;
wire    ap_CS_fsm_state65;
wire   [63:0] tmp_11_fu_521_p1;
reg   [63:0] tmp_11_reg_706;
wire   [0:0] exitcond_fu_509_p2;
wire   [31:0] counter_1_fu_580_p3;
wire    ap_CS_fsm_state67;
reg   [9:0] i_reg_166;
wire    ap_CS_fsm_state10;
reg   [9:0] i_1_reg_177;
reg   [31:0] max_val1_reg_188;
reg   [9:0] i_2_reg_198;
reg   [31:0] sum_reg_209;
reg   [9:0] i_3_reg_221;
wire    ap_CS_fsm_state64;
reg   [9:0] i_4_reg_232;
reg   [31:0] counter_reg_243;
wire   [63:0] tmp_fu_313_p1;
wire   [63:0] tmp_4_fu_375_p1;
wire   [63:0] tmp_7_fu_487_p1;
wire   [63:0] tmp_6_fu_504_p1;
wire   [0:0] tmp_29_fu_562_p2;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] grp_fu_256_p0;
reg   [31:0] grp_fu_256_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_275_p0;
reg   [31:0] grp_fu_275_p1;
wire    ap_CS_fsm_state24;
wire   [31:0] tmp_1_to_int_fu_319_p1;
wire   [7:0] tmp_2_fu_323_p4;
wire   [22:0] tmp_5_fu_333_p1;
wire   [0:0] notrhs_fu_343_p2;
wire   [0:0] notlhs_fu_337_p2;
wire   [0:0] tmp_12_fu_349_p2;
wire   [0:0] tmp_15_fu_355_p2;
wire   [31:0] max_val_2_to_int_fu_386_p1;
wire   [31:0] max_val1_to_int_fu_403_p1;
wire   [7:0] tmp_16_fu_389_p4;
wire   [22:0] tmp_17_fu_399_p1;
wire   [0:0] notrhs8_fu_427_p2;
wire   [0:0] notlhs7_fu_421_p2;
wire   [7:0] tmp_18_fu_407_p4;
wire   [22:0] tmp_19_fu_417_p1;
wire   [0:0] notrhs1_fu_445_p2;
wire   [0:0] notlhs9_fu_439_p2;
wire   [0:0] tmp_20_fu_433_p2;
wire   [0:0] tmp_21_fu_451_p2;
wire   [0:0] tmp_22_fu_457_p2;
wire   [0:0] tmp_24_fu_463_p2;
wire   [31:0] mem_block2_dense_loa_4_fu_526_p1;
wire   [7:0] tmp_25_fu_530_p4;
wire   [22:0] tmp_26_fu_540_p1;
wire   [0:0] notrhs2_fu_550_p2;
wire   [0:0] notlhs1_fu_544_p2;
wire   [0:0] tmp_27_fu_556_p2;
wire   [0:0] tmp_13_fu_568_p2;
wire   [31:0] counter_0_op_fu_574_p2;
reg   [1:0] grp_fu_256_opcode;
reg   [4:0] grp_fu_275_opcode;
reg   [66:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 67'd1;
end

VGG16_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
VGG16_CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

VGG16_INPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUT_DATA_WIDTH ))
VGG16_INPUT_s_axi_U(
    .AWVALID(s_axi_INPUT_AWVALID),
    .AWREADY(s_axi_INPUT_AWREADY),
    .AWADDR(s_axi_INPUT_AWADDR),
    .WVALID(s_axi_INPUT_WVALID),
    .WREADY(s_axi_INPUT_WREADY),
    .WDATA(s_axi_INPUT_WDATA),
    .WSTRB(s_axi_INPUT_WSTRB),
    .ARVALID(s_axi_INPUT_ARVALID),
    .ARREADY(s_axi_INPUT_ARREADY),
    .ARADDR(s_axi_INPUT_ARADDR),
    .RVALID(s_axi_INPUT_RVALID),
    .RREADY(s_axi_INPUT_RREADY),
    .RDATA(s_axi_INPUT_RDATA),
    .RRESP(s_axi_INPUT_RRESP),
    .BVALID(s_axi_INPUT_BVALID),
    .BREADY(s_axi_INPUT_BREADY),
    .BRESP(s_axi_INPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem_block2_dense_address0(mem_block2_dense_address0),
    .mem_block2_dense_ce0(mem_block2_dense_ce0),
    .mem_block2_dense_we0(mem_block2_dense_we0),
    .mem_block2_dense_d0(mem_block2_dense_d0),
    .mem_block2_dense_q0(mem_block2_dense_q0)
);

VGG16_OUTPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT_DATA_WIDTH ))
VGG16_OUTPUT_s_axi_U(
    .AWVALID(s_axi_OUTPUT_AWVALID),
    .AWREADY(s_axi_OUTPUT_AWREADY),
    .AWADDR(s_axi_OUTPUT_AWADDR),
    .WVALID(s_axi_OUTPUT_WVALID),
    .WREADY(s_axi_OUTPUT_WREADY),
    .WDATA(s_axi_OUTPUT_WDATA),
    .WSTRB(s_axi_OUTPUT_WSTRB),
    .ARVALID(s_axi_OUTPUT_ARVALID),
    .ARREADY(s_axi_OUTPUT_ARREADY),
    .ARADDR(s_axi_OUTPUT_ARADDR),
    .RVALID(s_axi_OUTPUT_RVALID),
    .RREADY(s_axi_OUTPUT_RREADY),
    .RDATA(s_axi_OUTPUT_RDATA),
    .RRESP(s_axi_OUTPUT_RRESP),
    .BVALID(s_axi_OUTPUT_BVALID),
    .BREADY(s_axi_OUTPUT_BREADY),
    .BRESP(s_axi_OUTPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .class_address0(class_address0),
    .class_ce0(class_ce0),
    .class_we0(class_we0),
    .class_d0(counter_reg_243)
);

VGG16_OUTPUT1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT1_DATA_WIDTH ))
VGG16_OUTPUT1_s_axi_U(
    .AWVALID(s_axi_OUTPUT1_AWVALID),
    .AWREADY(s_axi_OUTPUT1_AWREADY),
    .AWADDR(s_axi_OUTPUT1_AWADDR),
    .WVALID(s_axi_OUTPUT1_WVALID),
    .WREADY(s_axi_OUTPUT1_WREADY),
    .WDATA(s_axi_OUTPUT1_WDATA),
    .WSTRB(s_axi_OUTPUT1_WSTRB),
    .ARVALID(s_axi_OUTPUT1_ARVALID),
    .ARREADY(s_axi_OUTPUT1_ARREADY),
    .ARADDR(s_axi_OUTPUT1_ARADDR),
    .RVALID(s_axi_OUTPUT1_RVALID),
    .RREADY(s_axi_OUTPUT1_RREADY),
    .RDATA(s_axi_OUTPUT1_RDATA),
    .RRESP(s_axi_OUTPUT1_RRESP),
    .BVALID(s_axi_OUTPUT1_BVALID),
    .BREADY(s_axi_OUTPUT1_BREADY),
    .BRESP(s_axi_OUTPUT1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .result_address0(result_address0),
    .result_ce0(result_ce0),
    .result_we0(result_we0),
    .result_d0(reg_286)
);

VGG16_parameter_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAMETER_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAMETER_DATA_WIDTH ))
VGG16_parameter_s_axi_U(
    .AWVALID(s_axi_parameter_AWVALID),
    .AWREADY(s_axi_parameter_AWREADY),
    .AWADDR(s_axi_parameter_AWADDR),
    .WVALID(s_axi_parameter_WVALID),
    .WREADY(s_axi_parameter_WREADY),
    .WDATA(s_axi_parameter_WDATA),
    .WSTRB(s_axi_parameter_WSTRB),
    .ARVALID(s_axi_parameter_ARVALID),
    .ARREADY(s_axi_parameter_ARREADY),
    .ARADDR(s_axi_parameter_ARADDR),
    .RVALID(s_axi_parameter_RVALID),
    .RREADY(s_axi_parameter_RREADY),
    .RDATA(s_axi_parameter_RDATA),
    .RRESP(s_axi_parameter_RRESP),
    .BVALID(s_axi_parameter_BVALID),
    .BREADY(s_axi_parameter_BREADY),
    .BRESP(s_axi_parameter_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .bd3_address0(bd3_address0),
    .bd3_ce0(bd3_ce0),
    .bd3_q0(bd3_q0)
);

VGG16_faddfsub_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
VGG16_faddfsub_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_256_p0),
    .din1(grp_fu_256_p1),
    .opcode(grp_fu_256_opcode),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

VGG16_fdiv_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
VGG16_fdiv_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mem_block2_dense_q0),
    .din1(sum_reg_209),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

VGG16_fptrunc_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
VGG16_fptrunc_64ndEe_U3(
    .din0(tmp_s_reg_669),
    .dout(tmp_3_fu_269_p1)
);

VGG16_fpext_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
VGG16_fpext_32ns_eOg_U4(
    .din0(reg_295),
    .dout(tmp_9_fu_272_p1)
);

VGG16_fcmp_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
VGG16_fcmp_32ns_3fYi_U5(
    .din0(grp_fu_275_p0),
    .din1(grp_fu_275_p1),
    .opcode(grp_fu_275_opcode),
    .dout(grp_fu_275_p2)
);

VGG16_dexp_64ns_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
VGG16_dexp_64ns_6g8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_9_reg_664),
    .ce(1'b1),
    .dout(grp_fu_281_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        counter_reg_243 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        counter_reg_243 <= counter_1_fu_580_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_177 <= i_6_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_177 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_2_reg_198 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        i_2_reg_198 <= i_7_reg_654;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_3_reg_221 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        i_3_reg_221 <= i_8_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        i_4_reg_232 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        i_4_reg_232 <= i_9_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_166 <= i_5_reg_596;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_166 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        max_val1_reg_188 <= max_val_1_fu_468_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        max_val1_reg_188 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        sum_reg_209 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        sum_reg_209 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bd3_load_reg_611 <= bd3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_5_reg_596 <= i_5_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_6_reg_629 <= i_6_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_7_reg_654 <= i_7_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_8_reg_688 <= i_8_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        i_9_reg_701 <= i_9_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        max_val_2_reg_634 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_block2_dense_add_1_reg_606 <= tmp_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        mem_block2_dense_add_3_reg_659 <= tmp_7_fu_487_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        mem_block2_dense_add_4_reg_693 <= tmp_6_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_286 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_295 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        storemerge_reg_616 <= storemerge_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
        tmp_11_reg_706[9 : 0] <= tmp_11_fu_521_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_23_reg_641 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_3_reg_674 <= tmp_3_fu_269_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_9_reg_664 <= tmp_9_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_s_reg_669 <= grp_fu_281_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bd3_ce0 = 1'b1;
    end else begin
        bd3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        class_ce0 = 1'b1;
    end else begin
        class_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_29_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        class_we0 = 1'b1;
    end else begin
        class_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_256_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_fu_256_opcode = 2'd0;
    end else begin
        grp_fu_256_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_256_p0 = sum_reg_209;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_256_p0 = reg_286;
    end else begin
        grp_fu_256_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_256_p1 = tmp_3_reg_674;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_256_p1 = max_val1_reg_188;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_256_p1 = bd3_load_reg_611;
    end else begin
        grp_fu_256_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_275_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_275_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_275_opcode = 5'd4;
    end else begin
        grp_fu_275_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_275_p0 = reg_286;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_275_p0 = max_val_2_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_275_p0 = reg_295;
    end else begin
        grp_fu_275_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_275_p1 = max_val1_reg_188;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_275_p1 = 32'd0;
    end else begin
        grp_fu_275_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        mem_block2_dense_address0 = tmp_11_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_4_reg_693;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        mem_block2_dense_address0 = tmp_6_fu_504_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_3_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mem_block2_dense_address0 = tmp_7_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_block2_dense_address0 = tmp_4_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_block2_dense_address0 = mem_block2_dense_add_1_reg_606;
    end else if (((exitcond4_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_block2_dense_address0 = 64'd0;
    end else if (((exitcond4_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_block2_dense_address0 = tmp_fu_313_p1;
    end else begin
        mem_block2_dense_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | ((exitcond4_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond4_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        mem_block2_dense_ce0 = 1'b1;
    end else begin
        mem_block2_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        mem_block2_dense_d0 = grp_fu_262_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        mem_block2_dense_d0 = tmp_3_reg_674;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_block2_dense_d0 = storemerge_reg_616;
    end else begin
        mem_block2_dense_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state10))) begin
        mem_block2_dense_we0 = 1'b1;
    end else begin
        mem_block2_dense_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_29_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((exitcond3_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state16 : begin
            if (((exitcond2_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state48 : begin
            if (((exitcond1_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state65 : begin
            if (((exitcond_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bd3_address0 = tmp_fu_313_p1;

assign class_address0 = tmp_11_reg_706;

assign counter_0_op_fu_574_p2 = (counter_reg_243 + 32'd1);

assign counter_1_fu_580_p3 = ((tmp_13_fu_568_p2[0:0] === 1'b1) ? 32'd0 : counter_0_op_fu_574_p2);

assign exitcond1_fu_492_p2 = ((i_3_reg_221 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond2_fu_475_p2 = ((i_2_reg_198 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond3_fu_369_p2 = ((i_1_reg_177 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond4_fu_301_p2 = ((i_reg_166 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond_fu_509_p2 = ((i_4_reg_232 == 10'd1000) ? 1'b1 : 1'b0);

assign i_5_fu_307_p2 = (i_reg_166 + 10'd1);

assign i_6_fu_380_p2 = (10'd1 + i_1_reg_177);

assign i_7_fu_481_p2 = (i_2_reg_198 + 10'd1);

assign i_8_fu_498_p2 = (i_3_reg_221 + 10'd1);

assign i_9_fu_515_p2 = (i_4_reg_232 + 10'd1);

assign max_val1_to_int_fu_403_p1 = max_val1_reg_188;

assign max_val_1_fu_468_p3 = ((tmp_24_fu_463_p2[0:0] === 1'b1) ? max_val_2_reg_634 : max_val1_reg_188);

assign max_val_2_to_int_fu_386_p1 = max_val_2_reg_634;

assign mem_block2_dense_loa_4_fu_526_p1 = reg_286;

assign notlhs1_fu_544_p2 = ((tmp_25_fu_530_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_421_p2 = ((tmp_16_fu_389_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs9_fu_439_p2 = ((tmp_18_fu_407_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_337_p2 = ((tmp_2_fu_323_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_445_p2 = ((tmp_19_fu_417_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_550_p2 = ((tmp_26_fu_540_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_427_p2 = ((tmp_17_fu_399_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_343_p2 = ((tmp_5_fu_333_p1 == 23'd0) ? 1'b1 : 1'b0);

assign result_address0 = tmp_11_reg_706;

assign storemerge_fu_361_p3 = ((tmp_15_fu_355_p2[0:0] === 1'b1) ? 32'd0 : reg_295);

assign tmp_11_fu_521_p1 = i_4_reg_232;

assign tmp_12_fu_349_p2 = (notrhs_fu_343_p2 | notlhs_fu_337_p2);

assign tmp_13_fu_568_p2 = ((counter_reg_243 == 32'd999) ? 1'b1 : 1'b0);

assign tmp_15_fu_355_p2 = (tmp_12_fu_349_p2 & grp_fu_275_p2);

assign tmp_16_fu_389_p4 = {{max_val_2_to_int_fu_386_p1[30:23]}};

assign tmp_17_fu_399_p1 = max_val_2_to_int_fu_386_p1[22:0];

assign tmp_18_fu_407_p4 = {{max_val1_to_int_fu_403_p1[30:23]}};

assign tmp_19_fu_417_p1 = max_val1_to_int_fu_403_p1[22:0];

assign tmp_1_to_int_fu_319_p1 = reg_295;

assign tmp_20_fu_433_p2 = (notrhs8_fu_427_p2 | notlhs7_fu_421_p2);

assign tmp_21_fu_451_p2 = (notrhs1_fu_445_p2 | notlhs9_fu_439_p2);

assign tmp_22_fu_457_p2 = (tmp_21_fu_451_p2 & tmp_20_fu_433_p2);

assign tmp_24_fu_463_p2 = (tmp_23_reg_641 & tmp_22_fu_457_p2);

assign tmp_25_fu_530_p4 = {{mem_block2_dense_loa_4_fu_526_p1[30:23]}};

assign tmp_26_fu_540_p1 = mem_block2_dense_loa_4_fu_526_p1[22:0];

assign tmp_27_fu_556_p2 = (notrhs2_fu_550_p2 | notlhs1_fu_544_p2);

assign tmp_29_fu_562_p2 = (tmp_27_fu_556_p2 & grp_fu_275_p2);

assign tmp_2_fu_323_p4 = {{tmp_1_to_int_fu_319_p1[30:23]}};

assign tmp_4_fu_375_p1 = i_1_reg_177;

assign tmp_5_fu_333_p1 = tmp_1_to_int_fu_319_p1[22:0];

assign tmp_6_fu_504_p1 = i_3_reg_221;

assign tmp_7_fu_487_p1 = i_2_reg_198;

assign tmp_fu_313_p1 = i_reg_166;

always @ (posedge ap_clk) begin
    tmp_11_reg_706[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //VGG16
