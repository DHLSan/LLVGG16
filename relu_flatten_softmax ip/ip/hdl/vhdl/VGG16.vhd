-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity VGG16 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_INPUT_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_INPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT1_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_OUTPUT1_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_PARAMETER_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_PARAMETER_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_INPUT_AWVALID : IN STD_LOGIC;
    s_axi_INPUT_AWREADY : OUT STD_LOGIC;
    s_axi_INPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_WVALID : IN STD_LOGIC;
    s_axi_INPUT_WREADY : OUT STD_LOGIC;
    s_axi_INPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_INPUT_ARVALID : IN STD_LOGIC;
    s_axi_INPUT_ARREADY : OUT STD_LOGIC;
    s_axi_INPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_RVALID : OUT STD_LOGIC;
    s_axi_INPUT_RREADY : IN STD_LOGIC;
    s_axi_INPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INPUT_BVALID : OUT STD_LOGIC;
    s_axi_INPUT_BREADY : IN STD_LOGIC;
    s_axi_INPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT1_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT1_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT1_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT1_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT1_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT1_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT1_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT1_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT1_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT1_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_parameter_AWVALID : IN STD_LOGIC;
    s_axi_parameter_AWREADY : OUT STD_LOGIC;
    s_axi_parameter_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_ADDR_WIDTH-1 downto 0);
    s_axi_parameter_WVALID : IN STD_LOGIC;
    s_axi_parameter_WREADY : OUT STD_LOGIC;
    s_axi_parameter_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_DATA_WIDTH-1 downto 0);
    s_axi_parameter_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_DATA_WIDTH/8-1 downto 0);
    s_axi_parameter_ARVALID : IN STD_LOGIC;
    s_axi_parameter_ARREADY : OUT STD_LOGIC;
    s_axi_parameter_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_ADDR_WIDTH-1 downto 0);
    s_axi_parameter_RVALID : OUT STD_LOGIC;
    s_axi_parameter_RREADY : IN STD_LOGIC;
    s_axi_parameter_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PARAMETER_DATA_WIDTH-1 downto 0);
    s_axi_parameter_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_parameter_BVALID : OUT STD_LOGIC;
    s_axi_parameter_BREADY : IN STD_LOGIC;
    s_axi_parameter_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of VGG16 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "VGG16,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.641000,HLS_SYN_LAT=65002,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=28,HLS_SYN_FF=3909,HLS_SYN_LUT=6153}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (66 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (66 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (66 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (66 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (66 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (66 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (66 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (66 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (66 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (66 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mem_block2_dense_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_block2_dense_ce0 : STD_LOGIC;
    signal mem_block2_dense_we0 : STD_LOGIC;
    signal mem_block2_dense_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_block2_dense_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal bd3_ce0 : STD_LOGIC;
    signal bd3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal class_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal class_ce0 : STD_LOGIC;
    signal class_we0 : STD_LOGIC;
    signal result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_5_fu_307_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond4_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_block2_dense_add_1_reg_606 : STD_LOGIC_VECTOR (9 downto 0);
    signal bd3_load_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_reg_629 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val_2_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal max_val_1_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_7_fu_481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_654 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal mem_block2_dense_add_3_reg_659 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_664 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_669 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_3_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal i_8_fu_498_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_reg_688 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal mem_block2_dense_add_4_reg_693 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_9_reg_701 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_11_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_1_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal i_reg_166 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_reg_177 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val1_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_198 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_221 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal i_4_reg_232 : STD_LOGIC_VECTOR (9 downto 0);
    signal counter_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_1_to_int_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_333_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_2_to_int_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val1_to_int_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_399_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_407_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_417_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_block2_dense_loa_4_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_530_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_540_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_0_op_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_275_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (66 downto 0);

    component VGG16_faddfsub_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VGG16_fdiv_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VGG16_fptrunc_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VGG16_fpext_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component VGG16_fcmp_32ns_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component VGG16_dexp_64ns_6g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component VGG16_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component VGG16_INPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mem_block2_dense_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        mem_block2_dense_ce0 : IN STD_LOGIC;
        mem_block2_dense_we0 : IN STD_LOGIC;
        mem_block2_dense_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_block2_dense_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VGG16_OUTPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        class_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        class_ce0 : IN STD_LOGIC;
        class_we0 : IN STD_LOGIC;
        class_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VGG16_OUTPUT1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        result_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        result_ce0 : IN STD_LOGIC;
        result_we0 : IN STD_LOGIC;
        result_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VGG16_parameter_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        bd3_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        bd3_ce0 : IN STD_LOGIC;
        bd3_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    VGG16_CONTROL_s_axi_U : component VGG16_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    VGG16_INPUT_s_axi_U : component VGG16_INPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INPUT_AWVALID,
        AWREADY => s_axi_INPUT_AWREADY,
        AWADDR => s_axi_INPUT_AWADDR,
        WVALID => s_axi_INPUT_WVALID,
        WREADY => s_axi_INPUT_WREADY,
        WDATA => s_axi_INPUT_WDATA,
        WSTRB => s_axi_INPUT_WSTRB,
        ARVALID => s_axi_INPUT_ARVALID,
        ARREADY => s_axi_INPUT_ARREADY,
        ARADDR => s_axi_INPUT_ARADDR,
        RVALID => s_axi_INPUT_RVALID,
        RREADY => s_axi_INPUT_RREADY,
        RDATA => s_axi_INPUT_RDATA,
        RRESP => s_axi_INPUT_RRESP,
        BVALID => s_axi_INPUT_BVALID,
        BREADY => s_axi_INPUT_BREADY,
        BRESP => s_axi_INPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mem_block2_dense_address0 => mem_block2_dense_address0,
        mem_block2_dense_ce0 => mem_block2_dense_ce0,
        mem_block2_dense_we0 => mem_block2_dense_we0,
        mem_block2_dense_d0 => mem_block2_dense_d0,
        mem_block2_dense_q0 => mem_block2_dense_q0);

    VGG16_OUTPUT_s_axi_U : component VGG16_OUTPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT_AWVALID,
        AWREADY => s_axi_OUTPUT_AWREADY,
        AWADDR => s_axi_OUTPUT_AWADDR,
        WVALID => s_axi_OUTPUT_WVALID,
        WREADY => s_axi_OUTPUT_WREADY,
        WDATA => s_axi_OUTPUT_WDATA,
        WSTRB => s_axi_OUTPUT_WSTRB,
        ARVALID => s_axi_OUTPUT_ARVALID,
        ARREADY => s_axi_OUTPUT_ARREADY,
        ARADDR => s_axi_OUTPUT_ARADDR,
        RVALID => s_axi_OUTPUT_RVALID,
        RREADY => s_axi_OUTPUT_RREADY,
        RDATA => s_axi_OUTPUT_RDATA,
        RRESP => s_axi_OUTPUT_RRESP,
        BVALID => s_axi_OUTPUT_BVALID,
        BREADY => s_axi_OUTPUT_BREADY,
        BRESP => s_axi_OUTPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        class_address0 => class_address0,
        class_ce0 => class_ce0,
        class_we0 => class_we0,
        class_d0 => counter_reg_243);

    VGG16_OUTPUT1_s_axi_U : component VGG16_OUTPUT1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT1_AWVALID,
        AWREADY => s_axi_OUTPUT1_AWREADY,
        AWADDR => s_axi_OUTPUT1_AWADDR,
        WVALID => s_axi_OUTPUT1_WVALID,
        WREADY => s_axi_OUTPUT1_WREADY,
        WDATA => s_axi_OUTPUT1_WDATA,
        WSTRB => s_axi_OUTPUT1_WSTRB,
        ARVALID => s_axi_OUTPUT1_ARVALID,
        ARREADY => s_axi_OUTPUT1_ARREADY,
        ARADDR => s_axi_OUTPUT1_ARADDR,
        RVALID => s_axi_OUTPUT1_RVALID,
        RREADY => s_axi_OUTPUT1_RREADY,
        RDATA => s_axi_OUTPUT1_RDATA,
        RRESP => s_axi_OUTPUT1_RRESP,
        BVALID => s_axi_OUTPUT1_BVALID,
        BREADY => s_axi_OUTPUT1_BREADY,
        BRESP => s_axi_OUTPUT1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        result_address0 => result_address0,
        result_ce0 => result_ce0,
        result_we0 => result_we0,
        result_d0 => reg_286);

    VGG16_parameter_s_axi_U : component VGG16_parameter_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PARAMETER_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PARAMETER_DATA_WIDTH)
    port map (
        AWVALID => s_axi_parameter_AWVALID,
        AWREADY => s_axi_parameter_AWREADY,
        AWADDR => s_axi_parameter_AWADDR,
        WVALID => s_axi_parameter_WVALID,
        WREADY => s_axi_parameter_WREADY,
        WDATA => s_axi_parameter_WDATA,
        WSTRB => s_axi_parameter_WSTRB,
        ARVALID => s_axi_parameter_ARVALID,
        ARREADY => s_axi_parameter_ARREADY,
        ARADDR => s_axi_parameter_ARADDR,
        RVALID => s_axi_parameter_RVALID,
        RREADY => s_axi_parameter_RREADY,
        RDATA => s_axi_parameter_RDATA,
        RRESP => s_axi_parameter_RRESP,
        BVALID => s_axi_parameter_BVALID,
        BREADY => s_axi_parameter_BREADY,
        BRESP => s_axi_parameter_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        bd3_address0 => bd3_address0,
        bd3_ce0 => bd3_ce0,
        bd3_q0 => bd3_q0);

    VGG16_faddfsub_32bkb_U1 : component VGG16_faddfsub_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_256_p0,
        din1 => grp_fu_256_p1,
        opcode => grp_fu_256_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    VGG16_fdiv_32ns_3cud_U2 : component VGG16_fdiv_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mem_block2_dense_q0,
        din1 => sum_reg_209,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    VGG16_fptrunc_64ndEe_U3 : component VGG16_fptrunc_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_reg_669,
        dout => tmp_3_fu_269_p1);

    VGG16_fpext_32ns_eOg_U4 : component VGG16_fpext_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_295,
        dout => tmp_9_fu_272_p1);

    VGG16_fcmp_32ns_3fYi_U5 : component VGG16_fcmp_32ns_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        opcode => grp_fu_275_opcode,
        dout => grp_fu_275_p2);

    VGG16_dexp_64ns_6g8j_U6 : component VGG16_dexp_64ns_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_9_reg_664,
        ce => ap_const_logic_1,
        dout => grp_fu_281_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                counter_reg_243 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                counter_reg_243 <= counter_1_fu_580_p3;
            end if; 
        end if;
    end process;

    i_1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_177 <= i_6_reg_629;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_177 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    i_2_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_2_reg_198 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                i_2_reg_198 <= i_7_reg_654;
            end if; 
        end if;
    end process;

    i_3_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_3_reg_221 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_3_reg_221 <= i_8_reg_688;
            end if; 
        end if;
    end process;

    i_4_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_4_reg_232 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                i_4_reg_232 <= i_9_reg_701;
            end if; 
        end if;
    end process;

    i_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_166 <= i_5_reg_596;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_166 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    max_val1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                max_val1_reg_188 <= max_val_1_fu_468_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                max_val1_reg_188 <= mem_block2_dense_q0;
            end if; 
        end if;
    end process;

    sum_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sum_reg_209 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sum_reg_209 <= grp_fu_256_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bd3_load_reg_611 <= bd3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_5_reg_596 <= i_5_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i_6_reg_629 <= i_6_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_7_reg_654 <= i_7_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                i_8_reg_688 <= i_8_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                i_9_reg_701 <= i_9_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                max_val_2_reg_634 <= mem_block2_dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mem_block2_dense_add_1_reg_606 <= tmp_fu_313_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                mem_block2_dense_add_3_reg_659 <= tmp_7_fu_487_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_492_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                mem_block2_dense_add_4_reg_693 <= tmp_6_fu_504_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_286 <= mem_block2_dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_295 <= grp_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                storemerge_reg_616 <= storemerge_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    tmp_11_reg_706(9 downto 0) <= tmp_11_fu_521_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_23_reg_641 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_3_reg_674 <= tmp_3_fu_269_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_9_reg_664 <= tmp_9_fu_272_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                tmp_s_reg_669 <= grp_fu_281_p2;
            end if;
        end if;
    end process;
    tmp_11_reg_706(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_301_p2, ap_CS_fsm_state12, exitcond3_fu_369_p2, ap_CS_fsm_state16, exitcond2_fu_475_p2, ap_CS_fsm_state48, exitcond1_fu_492_p2, ap_CS_fsm_state65, exitcond_fu_509_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((exitcond3_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                if (((exitcond2_fu_475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state48 => 
                if (((exitcond1_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state65 => 
                if (((exitcond_fu_509_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state65, exitcond_fu_509_p2)
    begin
        if (((exitcond_fu_509_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state65, exitcond_fu_509_p2)
    begin
        if (((exitcond_fu_509_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bd3_address0 <= tmp_fu_313_p1(10 - 1 downto 0);

    bd3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bd3_ce0 <= ap_const_logic_1;
        else 
            bd3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    class_address0 <= tmp_11_reg_706(10 - 1 downto 0);

    class_ce0_assign_proc : process(ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            class_ce0 <= ap_const_logic_1;
        else 
            class_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    class_we0_assign_proc : process(ap_CS_fsm_state67, tmp_29_fu_562_p2)
    begin
        if (((tmp_29_fu_562_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            class_we0 <= ap_const_logic_1;
        else 
            class_we0 <= ap_const_logic_0;
        end if; 
    end process;

    counter_0_op_fu_574_p2 <= std_logic_vector(unsigned(counter_reg_243) + unsigned(ap_const_lv32_1));
    counter_1_fu_580_p3 <= 
        ap_const_lv32_0 when (tmp_13_fu_568_p2(0) = '1') else 
        counter_0_op_fu_574_p2;
    exitcond1_fu_492_p2 <= "1" when (i_3_reg_221 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_475_p2 <= "1" when (i_2_reg_198 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_369_p2 <= "1" when (i_1_reg_177 = ap_const_lv10_3E8) else "0";
    exitcond4_fu_301_p2 <= "1" when (i_reg_166 = ap_const_lv10_3E8) else "0";
    exitcond_fu_509_p2 <= "1" when (i_4_reg_232 = ap_const_lv10_3E8) else "0";

    grp_fu_256_opcode_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state4, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_256_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_256_opcode <= ap_const_lv2_0;
        else 
            grp_fu_256_opcode <= "XX";
        end if; 
    end process;


    grp_fu_256_p0_assign_proc : process(reg_286, sum_reg_209, ap_CS_fsm_state43, ap_CS_fsm_state4, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_256_p0 <= sum_reg_209;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_256_p0 <= reg_286;
        else 
            grp_fu_256_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_256_p1_assign_proc : process(bd3_load_reg_611, tmp_3_reg_674, max_val1_reg_188, ap_CS_fsm_state43, ap_CS_fsm_state4, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_256_p1 <= tmp_3_reg_674;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_256_p1 <= max_val1_reg_188;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_256_p1 <= bd3_load_reg_611;
        else 
            grp_fu_256_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_275_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_275_opcode <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_275_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_275_opcode <= ap_const_lv5_4;
        else 
            grp_fu_275_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_275_p0_assign_proc : process(reg_286, reg_295, ap_CS_fsm_state9, max_val_2_reg_634, ap_CS_fsm_state14, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_275_p0 <= reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_275_p0 <= max_val_2_reg_634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_275_p0 <= reg_295;
        else 
            grp_fu_275_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_275_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state67, max_val1_reg_188)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_275_p1 <= max_val1_reg_188;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_275_p1 <= ap_const_lv32_0;
        else 
            grp_fu_275_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_5_fu_307_p2 <= std_logic_vector(unsigned(i_reg_166) + unsigned(ap_const_lv10_1));
    i_6_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_1_reg_177));
    i_7_fu_481_p2 <= std_logic_vector(unsigned(i_2_reg_198) + unsigned(ap_const_lv10_1));
    i_8_fu_498_p2 <= std_logic_vector(unsigned(i_3_reg_221) + unsigned(ap_const_lv10_1));
    i_9_fu_515_p2 <= std_logic_vector(unsigned(i_4_reg_232) + unsigned(ap_const_lv10_1));
    max_val1_to_int_fu_403_p1 <= max_val1_reg_188;
    max_val_1_fu_468_p3 <= 
        max_val_2_reg_634 when (tmp_24_fu_463_p2(0) = '1') else 
        max_val1_reg_188;
    max_val_2_to_int_fu_386_p1 <= max_val_2_reg_634;

    mem_block2_dense_address0_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_301_p2, mem_block2_dense_add_1_reg_606, ap_CS_fsm_state12, ap_CS_fsm_state16, mem_block2_dense_add_3_reg_659, ap_CS_fsm_state48, mem_block2_dense_add_4_reg_693, ap_CS_fsm_state65, tmp_11_fu_521_p1, ap_CS_fsm_state10, ap_CS_fsm_state64, tmp_fu_313_p1, tmp_4_fu_375_p1, tmp_7_fu_487_p1, tmp_6_fu_504_p1, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mem_block2_dense_address0 <= tmp_11_fu_521_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            mem_block2_dense_address0 <= mem_block2_dense_add_4_reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            mem_block2_dense_address0 <= tmp_6_fu_504_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            mem_block2_dense_address0 <= mem_block2_dense_add_3_reg_659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mem_block2_dense_address0 <= tmp_7_fu_487_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_block2_dense_address0 <= tmp_4_fu_375_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_block2_dense_address0 <= mem_block2_dense_add_1_reg_606;
        elsif (((exitcond4_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_block2_dense_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((exitcond4_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_block2_dense_address0 <= tmp_fu_313_p1(10 - 1 downto 0);
        else 
            mem_block2_dense_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mem_block2_dense_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_301_p2, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state48, ap_CS_fsm_state65, ap_CS_fsm_state10, ap_CS_fsm_state64, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond4_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond4_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            mem_block2_dense_ce0 <= ap_const_logic_1;
        else 
            mem_block2_dense_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_block2_dense_d0_assign_proc : process(storemerge_reg_616, tmp_3_reg_674, ap_CS_fsm_state10, ap_CS_fsm_state64, ap_CS_fsm_state43, grp_fu_262_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            mem_block2_dense_d0 <= grp_fu_262_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            mem_block2_dense_d0 <= tmp_3_reg_674;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_block2_dense_d0 <= storemerge_reg_616;
        else 
            mem_block2_dense_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_block2_dense_loa_4_fu_526_p1 <= reg_286;

    mem_block2_dense_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state64, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            mem_block2_dense_we0 <= ap_const_logic_1;
        else 
            mem_block2_dense_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_544_p2 <= "0" when (tmp_25_fu_530_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_421_p2 <= "0" when (tmp_16_fu_389_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_439_p2 <= "0" when (tmp_18_fu_407_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_337_p2 <= "0" when (tmp_2_fu_323_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_445_p2 <= "1" when (tmp_19_fu_417_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_550_p2 <= "1" when (tmp_26_fu_540_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_427_p2 <= "1" when (tmp_17_fu_399_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_343_p2 <= "1" when (tmp_5_fu_333_p1 = ap_const_lv23_0) else "0";
    result_address0 <= tmp_11_reg_706(10 - 1 downto 0);

    result_ce0_assign_proc : process(ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state67, tmp_29_fu_562_p2)
    begin
        if (((tmp_29_fu_562_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_361_p3 <= 
        ap_const_lv32_0 when (tmp_15_fu_355_p2(0) = '1') else 
        reg_295;
    tmp_11_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_232),64));
    tmp_12_fu_349_p2 <= (notrhs_fu_343_p2 or notlhs_fu_337_p2);
    tmp_13_fu_568_p2 <= "1" when (counter_reg_243 = ap_const_lv32_3E7) else "0";
    tmp_15_fu_355_p2 <= (tmp_12_fu_349_p2 and grp_fu_275_p2);
    tmp_16_fu_389_p4 <= max_val_2_to_int_fu_386_p1(30 downto 23);
    tmp_17_fu_399_p1 <= max_val_2_to_int_fu_386_p1(23 - 1 downto 0);
    tmp_18_fu_407_p4 <= max_val1_to_int_fu_403_p1(30 downto 23);
    tmp_19_fu_417_p1 <= max_val1_to_int_fu_403_p1(23 - 1 downto 0);
    tmp_1_to_int_fu_319_p1 <= reg_295;
    tmp_20_fu_433_p2 <= (notrhs8_fu_427_p2 or notlhs7_fu_421_p2);
    tmp_21_fu_451_p2 <= (notrhs1_fu_445_p2 or notlhs9_fu_439_p2);
    tmp_22_fu_457_p2 <= (tmp_21_fu_451_p2 and tmp_20_fu_433_p2);
    tmp_24_fu_463_p2 <= (tmp_23_reg_641 and tmp_22_fu_457_p2);
    tmp_25_fu_530_p4 <= mem_block2_dense_loa_4_fu_526_p1(30 downto 23);
    tmp_26_fu_540_p1 <= mem_block2_dense_loa_4_fu_526_p1(23 - 1 downto 0);
    tmp_27_fu_556_p2 <= (notrhs2_fu_550_p2 or notlhs1_fu_544_p2);
    tmp_29_fu_562_p2 <= (tmp_27_fu_556_p2 and grp_fu_275_p2);
    tmp_2_fu_323_p4 <= tmp_1_to_int_fu_319_p1(30 downto 23);
    tmp_4_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_177),64));
    tmp_5_fu_333_p1 <= tmp_1_to_int_fu_319_p1(23 - 1 downto 0);
    tmp_6_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_221),64));
    tmp_7_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_198),64));
    tmp_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_166),64));
end behav;
