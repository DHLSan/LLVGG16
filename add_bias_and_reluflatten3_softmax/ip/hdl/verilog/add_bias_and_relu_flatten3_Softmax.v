// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add_bias_and_relu_flatten3_Softmax,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.090000,HLS_SYN_LAT=12060,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=28,HLS_SYN_FF=4204,HLS_SYN_LUT=6202}" *)

module add_bias_and_relu_flatten3_Softmax (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt,
        s_axi_INPUT_AWVALID,
        s_axi_INPUT_AWREADY,
        s_axi_INPUT_AWADDR,
        s_axi_INPUT_WVALID,
        s_axi_INPUT_WREADY,
        s_axi_INPUT_WDATA,
        s_axi_INPUT_WSTRB,
        s_axi_INPUT_ARVALID,
        s_axi_INPUT_ARREADY,
        s_axi_INPUT_ARADDR,
        s_axi_INPUT_RVALID,
        s_axi_INPUT_RREADY,
        s_axi_INPUT_RDATA,
        s_axi_INPUT_RRESP,
        s_axi_INPUT_BVALID,
        s_axi_INPUT_BREADY,
        s_axi_INPUT_BRESP,
        s_axi_OUTPUT_AWVALID,
        s_axi_OUTPUT_AWREADY,
        s_axi_OUTPUT_AWADDR,
        s_axi_OUTPUT_WVALID,
        s_axi_OUTPUT_WREADY,
        s_axi_OUTPUT_WDATA,
        s_axi_OUTPUT_WSTRB,
        s_axi_OUTPUT_ARVALID,
        s_axi_OUTPUT_ARREADY,
        s_axi_OUTPUT_ARADDR,
        s_axi_OUTPUT_RVALID,
        s_axi_OUTPUT_RREADY,
        s_axi_OUTPUT_RDATA,
        s_axi_OUTPUT_RRESP,
        s_axi_OUTPUT_BVALID,
        s_axi_OUTPUT_BREADY,
        s_axi_OUTPUT_BRESP,
        s_axi_parameter_AWVALID,
        s_axi_parameter_AWREADY,
        s_axi_parameter_AWADDR,
        s_axi_parameter_WVALID,
        s_axi_parameter_WREADY,
        s_axi_parameter_WDATA,
        s_axi_parameter_WSTRB,
        s_axi_parameter_ARVALID,
        s_axi_parameter_ARREADY,
        s_axi_parameter_ARADDR,
        s_axi_parameter_RVALID,
        s_axi_parameter_RREADY,
        s_axi_parameter_RDATA,
        s_axi_parameter_RRESP,
        s_axi_parameter_BVALID,
        s_axi_parameter_BREADY,
        s_axi_parameter_BRESP
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_pp0_stage0 = 19'd2;
parameter    ap_ST_fsm_pp0_stage1 = 19'd4;
parameter    ap_ST_fsm_state12 = 19'd8;
parameter    ap_ST_fsm_state13 = 19'd16;
parameter    ap_ST_fsm_pp1_stage0 = 19'd32;
parameter    ap_ST_fsm_state17 = 19'd64;
parameter    ap_ST_fsm_pp2_stage0 = 19'd128;
parameter    ap_ST_fsm_pp2_stage1 = 19'd256;
parameter    ap_ST_fsm_pp2_stage2 = 19'd512;
parameter    ap_ST_fsm_pp2_stage3 = 19'd1024;
parameter    ap_ST_fsm_pp2_stage4 = 19'd2048;
parameter    ap_ST_fsm_state51 = 19'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 19'd8192;
parameter    ap_ST_fsm_pp3_stage1 = 19'd16384;
parameter    ap_ST_fsm_state70 = 19'd32768;
parameter    ap_ST_fsm_pp4_stage0 = 19'd65536;
parameter    ap_ST_fsm_pp4_stage1 = 19'd131072;
parameter    ap_ST_fsm_state74 = 19'd262144;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT_ADDR_WIDTH = 14;
parameter    C_S_AXI_PARAMETER_DATA_WIDTH = 32;
parameter    C_S_AXI_PARAMETER_ADDR_WIDTH = 13;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_PARAMETER_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;
input   s_axi_INPUT_AWVALID;
output   s_axi_INPUT_AWREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_AWADDR;
input   s_axi_INPUT_WVALID;
output   s_axi_INPUT_WREADY;
input  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_WDATA;
input  [C_S_AXI_INPUT_WSTRB_WIDTH - 1:0] s_axi_INPUT_WSTRB;
input   s_axi_INPUT_ARVALID;
output   s_axi_INPUT_ARREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_ARADDR;
output   s_axi_INPUT_RVALID;
input   s_axi_INPUT_RREADY;
output  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_RDATA;
output  [1:0] s_axi_INPUT_RRESP;
output   s_axi_INPUT_BVALID;
input   s_axi_INPUT_BREADY;
output  [1:0] s_axi_INPUT_BRESP;
input   s_axi_OUTPUT_AWVALID;
output   s_axi_OUTPUT_AWREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_AWADDR;
input   s_axi_OUTPUT_WVALID;
output   s_axi_OUTPUT_WREADY;
input  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_WDATA;
input  [C_S_AXI_OUTPUT_WSTRB_WIDTH - 1:0] s_axi_OUTPUT_WSTRB;
input   s_axi_OUTPUT_ARVALID;
output   s_axi_OUTPUT_ARREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_ARADDR;
output   s_axi_OUTPUT_RVALID;
input   s_axi_OUTPUT_RREADY;
output  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_RDATA;
output  [1:0] s_axi_OUTPUT_RRESP;
output   s_axi_OUTPUT_BVALID;
input   s_axi_OUTPUT_BREADY;
output  [1:0] s_axi_OUTPUT_BRESP;
input   s_axi_parameter_AWVALID;
output   s_axi_parameter_AWREADY;
input  [C_S_AXI_PARAMETER_ADDR_WIDTH - 1:0] s_axi_parameter_AWADDR;
input   s_axi_parameter_WVALID;
output   s_axi_parameter_WREADY;
input  [C_S_AXI_PARAMETER_DATA_WIDTH - 1:0] s_axi_parameter_WDATA;
input  [C_S_AXI_PARAMETER_WSTRB_WIDTH - 1:0] s_axi_parameter_WSTRB;
input   s_axi_parameter_ARVALID;
output   s_axi_parameter_ARREADY;
input  [C_S_AXI_PARAMETER_ADDR_WIDTH - 1:0] s_axi_parameter_ARADDR;
output   s_axi_parameter_RVALID;
input   s_axi_parameter_RREADY;
output  [C_S_AXI_PARAMETER_DATA_WIDTH - 1:0] s_axi_parameter_RDATA;
output  [1:0] s_axi_parameter_RRESP;
output   s_axi_parameter_BVALID;
input   s_axi_parameter_BREADY;
output  [1:0] s_axi_parameter_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [9:0] mem_block2_dense_address0;
reg    mem_block2_dense_ce0;
reg    mem_block2_dense_we0;
reg   [31:0] mem_block2_dense_d0;
wire   [31:0] mem_block2_dense_q0;
wire   [9:0] bd3_address0;
reg    bd3_ce0;
wire   [31:0] bd3_q0;
wire   [9:0] class_address0;
reg    class_ce0;
reg    class_we0;
wire   [31:0] class_d0;
wire   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
reg   [9:0] i_reg_180;
reg   [9:0] i_1_reg_191;
reg   [31:0] max_val1_reg_202;
reg   [9:0] i_2_reg_212;
reg   [31:0] sum_reg_223;
reg   [9:0] i_3_reg_235;
reg   [9:0] i_4_reg_246;
reg   [31:0] reg_287;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond4_reg_580;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state53_pp3_stage1_iter0;
wire    ap_block_state55_pp3_stage1_iter1;
wire    ap_block_state57_pp3_stage1_iter2;
wire    ap_block_state59_pp3_stage1_iter3;
wire    ap_block_state61_pp3_stage1_iter4;
wire    ap_block_state63_pp3_stage1_iter5;
wire    ap_block_state65_pp3_stage1_iter6;
wire    ap_block_state67_pp3_stage1_iter7;
wire    ap_block_state69_pp3_stage1_iter8;
wire    ap_block_pp3_stage1_11001;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state19_pp2_stage1_iter0;
wire    ap_block_state24_pp2_stage1_iter1;
wire    ap_block_state29_pp2_stage1_iter2;
wire    ap_block_state34_pp2_stage1_iter3;
wire    ap_block_state39_pp2_stage1_iter4;
wire    ap_block_state44_pp2_stage1_iter5;
wire    ap_block_state49_pp2_stage1_iter6;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] exitcond2_reg_635;
reg    ap_enable_reg_pp3_iter0;
reg   [0:0] exitcond1_reg_670;
wire    ap_CS_fsm_pp4_stage1;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state72_pp4_stage1_iter0;
wire    ap_block_pp4_stage1_11001;
reg   [0:0] exitcond_reg_684;
wire   [31:0] grp_fu_258_p2;
reg   [31:0] reg_296;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter2_exitcond4_reg_580;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] ap_reg_pp2_iter1_exitcond2_reg_635;
wire   [0:0] exitcond4_fu_302_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond4_reg_580;
reg   [0:0] ap_reg_pp0_iter3_exitcond4_reg_580;
reg   [0:0] ap_reg_pp0_iter4_exitcond4_reg_580;
wire   [9:0] i_5_fu_308_p2;
reg   [9:0] i_5_reg_584;
reg   [9:0] mem_block2_dense_add_1_reg_594;
reg   [9:0] ap_reg_pp0_iter1_mem_block2_dense_add_1_reg_594;
reg   [9:0] ap_reg_pp0_iter2_mem_block2_dense_add_1_reg_594;
reg   [9:0] ap_reg_pp0_iter3_mem_block2_dense_add_1_reg_594;
reg   [9:0] ap_reg_pp0_iter4_mem_block2_dense_add_1_reg_594;
reg   [31:0] bd3_load_reg_599;
wire   [31:0] storemerge_fu_362_p3;
reg   [31:0] storemerge_reg_604;
wire   [0:0] exitcond3_fu_370_p2;
reg   [0:0] exitcond3_reg_609;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_state16_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond3_reg_609;
wire   [9:0] i_6_fu_381_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] max_val_2_reg_623;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] max_val_1_fu_470_p3;
reg    ap_enable_reg_pp1_iter2;
wire   [0:0] exitcond2_fu_477_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state18_pp2_stage0_iter0;
wire    ap_block_state23_pp2_stage0_iter1;
wire    ap_block_state28_pp2_stage0_iter2;
wire    ap_block_state33_pp2_stage0_iter3;
wire    ap_block_state38_pp2_stage0_iter4;
wire    ap_block_state43_pp2_stage0_iter5;
wire    ap_block_state48_pp2_stage0_iter6;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] ap_reg_pp2_iter2_exitcond2_reg_635;
reg   [0:0] ap_reg_pp2_iter3_exitcond2_reg_635;
reg   [0:0] ap_reg_pp2_iter4_exitcond2_reg_635;
reg   [0:0] ap_reg_pp2_iter5_exitcond2_reg_635;
reg   [0:0] ap_reg_pp2_iter6_exitcond2_reg_635;
wire   [9:0] i_7_fu_483_p2;
reg   [9:0] i_7_reg_639;
reg   [9:0] mem_block2_dense_add_3_reg_644;
reg   [9:0] ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_644;
reg   [9:0] ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_644;
reg   [9:0] ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_644;
reg   [9:0] ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_644;
reg   [9:0] ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_644;
wire   [63:0] tmp_9_fu_273_p1;
reg   [63:0] tmp_9_reg_649;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_state20_pp2_stage2_iter0;
wire    ap_block_state25_pp2_stage2_iter1;
wire    ap_block_state30_pp2_stage2_iter2;
wire    ap_block_state35_pp2_stage2_iter3;
wire    ap_block_state40_pp2_stage2_iter4;
wire    ap_block_state45_pp2_stage2_iter5;
wire    ap_block_state50_pp2_stage2_iter6;
wire    ap_block_pp2_stage2_11001;
wire   [63:0] grp_fu_282_p2;
reg   [63:0] tmp_s_reg_654;
wire   [31:0] tmp_3_fu_270_p1;
reg   [31:0] tmp_3_reg_659;
reg    ap_enable_reg_pp2_iter6;
wire   [0:0] exitcond1_fu_494_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state52_pp3_stage0_iter0;
wire    ap_block_state54_pp3_stage0_iter1;
wire    ap_block_state56_pp3_stage0_iter2;
wire    ap_block_state58_pp3_stage0_iter3;
wire    ap_block_state60_pp3_stage0_iter4;
wire    ap_block_state62_pp3_stage0_iter5;
wire    ap_block_state64_pp3_stage0_iter6;
wire    ap_block_state66_pp3_stage0_iter7;
wire    ap_block_state68_pp3_stage0_iter8;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] ap_reg_pp3_iter1_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter2_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter3_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter4_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter5_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter6_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter7_exitcond1_reg_670;
reg   [0:0] ap_reg_pp3_iter8_exitcond1_reg_670;
wire   [9:0] i_8_fu_500_p2;
reg   [9:0] i_8_reg_674;
reg   [9:0] mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter1_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter2_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter3_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter4_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter5_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter6_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter7_mem_block2_dense_add_4_reg_679;
reg   [9:0] ap_reg_pp3_iter8_mem_block2_dense_add_4_reg_679;
wire   [0:0] exitcond_fu_511_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state71_pp4_stage0_iter0;
wire    ap_block_state73_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [9:0] counter_fu_517_p2;
reg   [9:0] counter_reg_688;
wire   [63:0] tmp_11_fu_523_p1;
reg   [63:0] tmp_11_reg_693;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
wire    ap_CS_fsm_state17;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state18;
wire    ap_block_state22_pp2_stage4_iter0;
wire    ap_block_state27_pp2_stage4_iter1;
wire    ap_block_state32_pp2_stage4_iter2;
wire    ap_block_state37_pp2_stage4_iter3;
wire    ap_block_state42_pp2_stage4_iter4;
wire    ap_block_state47_pp2_stage4_iter5;
wire    ap_block_pp2_stage4_subdone;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_pp2_stage2_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
wire    ap_CS_fsm_state51;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state52;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage1_subdone;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
wire    ap_CS_fsm_state70;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state71;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage1_subdone;
reg   [9:0] ap_phi_mux_i_phi_fu_184_p4;
wire    ap_block_pp0_stage0;
reg   [9:0] ap_phi_mux_i_2_phi_fu_216_p4;
wire    ap_block_pp2_stage0;
reg   [9:0] ap_phi_mux_i_3_phi_fu_239_p4;
wire    ap_block_pp3_stage0;
reg   [9:0] ap_phi_mux_i_4_phi_fu_250_p4;
wire    ap_block_pp4_stage0;
wire   [63:0] tmp_fu_314_p1;
wire   [63:0] tmp_4_fu_376_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_7_fu_489_p1;
wire   [63:0] tmp_6_fu_506_p1;
wire   [0:0] tmp_33_fu_569_p2;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state12;
wire    ap_block_pp2_stage2;
wire   [31:0] grp_fu_264_p2;
wire    ap_block_pp3_stage1;
reg   [31:0] grp_fu_258_p0;
reg   [31:0] grp_fu_258_p1;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
wire    ap_block_pp2_stage1;
reg   [31:0] grp_fu_276_p0;
reg   [31:0] grp_fu_276_p1;
wire   [31:0] tmp_1_to_int_fu_320_p1;
wire   [7:0] tmp_5_fu_324_p4;
wire   [22:0] tmp_12_fu_334_p1;
wire   [0:0] notrhs_fu_344_p2;
wire   [0:0] notlhs_fu_338_p2;
wire   [0:0] tmp_13_fu_350_p2;
wire   [0:0] grp_fu_276_p2;
wire   [0:0] tmp_19_fu_356_p2;
wire   [31:0] max_val_2_to_int_fu_387_p1;
wire   [31:0] max_val1_to_int_fu_404_p1;
wire   [7:0] tmp_20_fu_390_p4;
wire   [22:0] tmp_21_fu_400_p1;
wire   [0:0] notrhs8_fu_428_p2;
wire   [0:0] notlhs7_fu_422_p2;
wire   [7:0] tmp_22_fu_408_p4;
wire   [22:0] tmp_23_fu_418_p1;
wire   [0:0] notrhs1_fu_446_p2;
wire   [0:0] notlhs9_fu_440_p2;
wire   [0:0] tmp_24_fu_434_p2;
wire   [0:0] tmp_25_fu_452_p2;
wire   [0:0] tmp_26_fu_458_p2;
wire   [0:0] tmp_28_fu_464_p2;
wire   [31:0] mem_block2_dense_loa_4_fu_533_p1;
wire   [7:0] tmp_29_fu_537_p4;
wire   [22:0] tmp_30_fu_547_p1;
wire   [0:0] notrhs2_fu_557_p2;
wire   [0:0] notlhs1_fu_551_p2;
wire   [0:0] tmp_31_fu_563_p2;
reg   [1:0] grp_fu_258_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_state21_pp2_stage3_iter0;
wire    ap_block_state26_pp2_stage3_iter1;
wire    ap_block_state31_pp2_stage3_iter2;
wire    ap_block_state36_pp2_stage3_iter3;
wire    ap_block_state41_pp2_stage3_iter4;
wire    ap_block_state46_pp2_stage3_iter5;
wire    ap_block_pp2_stage3_00001;
wire    ap_block_pp2_stage2_00001;
reg   [4:0] grp_fu_276_opcode;
wire    ap_block_pp1_stage0_00001;
wire    ap_block_pp4_stage0_00001;
wire    ap_CS_fsm_state74;
reg   [18:0] ap_NS_fsm;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp2_stage3_11001;
wire    ap_block_pp2_stage4_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
end

add_bias_and_relu_flatten3_Softmax_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
add_bias_and_relu_flatten3_Softmax_CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

add_bias_and_relu_flatten3_Softmax_INPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUT_DATA_WIDTH ))
add_bias_and_relu_flatten3_Softmax_INPUT_s_axi_U(
    .AWVALID(s_axi_INPUT_AWVALID),
    .AWREADY(s_axi_INPUT_AWREADY),
    .AWADDR(s_axi_INPUT_AWADDR),
    .WVALID(s_axi_INPUT_WVALID),
    .WREADY(s_axi_INPUT_WREADY),
    .WDATA(s_axi_INPUT_WDATA),
    .WSTRB(s_axi_INPUT_WSTRB),
    .ARVALID(s_axi_INPUT_ARVALID),
    .ARREADY(s_axi_INPUT_ARREADY),
    .ARADDR(s_axi_INPUT_ARADDR),
    .RVALID(s_axi_INPUT_RVALID),
    .RREADY(s_axi_INPUT_RREADY),
    .RDATA(s_axi_INPUT_RDATA),
    .RRESP(s_axi_INPUT_RRESP),
    .BVALID(s_axi_INPUT_BVALID),
    .BREADY(s_axi_INPUT_BREADY),
    .BRESP(s_axi_INPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem_block2_dense_address0(mem_block2_dense_address0),
    .mem_block2_dense_ce0(mem_block2_dense_ce0),
    .mem_block2_dense_we0(mem_block2_dense_we0),
    .mem_block2_dense_d0(mem_block2_dense_d0),
    .mem_block2_dense_q0(mem_block2_dense_q0)
);

add_bias_and_relu_flatten3_Softmax_OUTPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT_DATA_WIDTH ))
add_bias_and_relu_flatten3_Softmax_OUTPUT_s_axi_U(
    .AWVALID(s_axi_OUTPUT_AWVALID),
    .AWREADY(s_axi_OUTPUT_AWREADY),
    .AWADDR(s_axi_OUTPUT_AWADDR),
    .WVALID(s_axi_OUTPUT_WVALID),
    .WREADY(s_axi_OUTPUT_WREADY),
    .WDATA(s_axi_OUTPUT_WDATA),
    .WSTRB(s_axi_OUTPUT_WSTRB),
    .ARVALID(s_axi_OUTPUT_ARVALID),
    .ARREADY(s_axi_OUTPUT_ARREADY),
    .ARADDR(s_axi_OUTPUT_ARADDR),
    .RVALID(s_axi_OUTPUT_RVALID),
    .RREADY(s_axi_OUTPUT_RREADY),
    .RDATA(s_axi_OUTPUT_RDATA),
    .RRESP(s_axi_OUTPUT_RRESP),
    .BVALID(s_axi_OUTPUT_BVALID),
    .BREADY(s_axi_OUTPUT_BREADY),
    .BRESP(s_axi_OUTPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .class_address0(class_address0),
    .class_ce0(class_ce0),
    .class_we0(class_we0),
    .class_d0(class_d0),
    .result_address0(result_address0),
    .result_ce0(result_ce0),
    .result_we0(result_we0),
    .result_d0(reg_287)
);

add_bias_and_relu_flatten3_Softmax_parameter_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PARAMETER_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PARAMETER_DATA_WIDTH ))
add_bias_and_relu_flatten3_Softmax_parameter_s_axi_U(
    .AWVALID(s_axi_parameter_AWVALID),
    .AWREADY(s_axi_parameter_AWREADY),
    .AWADDR(s_axi_parameter_AWADDR),
    .WVALID(s_axi_parameter_WVALID),
    .WREADY(s_axi_parameter_WREADY),
    .WDATA(s_axi_parameter_WDATA),
    .WSTRB(s_axi_parameter_WSTRB),
    .ARVALID(s_axi_parameter_ARVALID),
    .ARREADY(s_axi_parameter_ARREADY),
    .ARADDR(s_axi_parameter_ARADDR),
    .RVALID(s_axi_parameter_RVALID),
    .RREADY(s_axi_parameter_RREADY),
    .RDATA(s_axi_parameter_RDATA),
    .RRESP(s_axi_parameter_RRESP),
    .BVALID(s_axi_parameter_BVALID),
    .BREADY(s_axi_parameter_BREADY),
    .BRESP(s_axi_parameter_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .bd3_address0(bd3_address0),
    .bd3_ce0(bd3_ce0),
    .bd3_q0(bd3_q0)
);

add_bias_and_relubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_bias_and_relubkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_258_p0),
    .din1(grp_fu_258_p1),
    .opcode(grp_fu_258_opcode),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

add_bias_and_relucud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_bias_and_relucud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_287),
    .din1(sum_reg_223),
    .ce(1'b1),
    .dout(grp_fu_264_p2)
);

add_bias_and_reludEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
add_bias_and_reludEe_U3(
    .din0(tmp_s_reg_654),
    .dout(tmp_3_fu_270_p1)
);

add_bias_and_relueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
add_bias_and_relueOg_U4(
    .din0(reg_296),
    .dout(tmp_9_fu_273_p1)
);

add_bias_and_relufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
add_bias_and_relufYi_U5(
    .din0(grp_fu_276_p0),
    .din1(grp_fu_276_p1),
    .opcode(grp_fu_276_opcode),
    .dout(grp_fu_276_p2)
);

add_bias_and_relug8j #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
add_bias_and_relug8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_9_reg_649),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state14)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state18)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp2_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state52) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state51)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state52)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state52);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end else if ((1'b1 == ap_CS_fsm_state51)) begin
            ap_enable_reg_pp3_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state71) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state71) & (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state71);
        end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1)))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond3_fu_370_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_191 <= i_6_fu_381_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_1_reg_191 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_2_reg_212 <= 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_2_reg_212 <= i_7_reg_639;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_3_reg_235 <= 10'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond1_reg_670 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_3_reg_235 <= i_8_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_4_reg_246 <= 10'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond_reg_684 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_4_reg_246 <= counter_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_580 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_180 <= i_5_reg_584;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_180 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond3_reg_609 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        max_val1_reg_202 <= max_val_1_fu_470_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        max_val1_reg_202 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_reg_223 <= 32'd0;
    end else if (((1'b0 == ap_block_pp2_stage2_11001) & (ap_reg_pp2_iter6_exitcond2_reg_635 == 1'd0) & (ap_enable_reg_pp2_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        sum_reg_223 <= grp_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond4_reg_580 <= exitcond4_reg_580;
        ap_reg_pp0_iter1_mem_block2_dense_add_1_reg_594 <= mem_block2_dense_add_1_reg_594;
        ap_reg_pp0_iter2_exitcond4_reg_580 <= ap_reg_pp0_iter1_exitcond4_reg_580;
        ap_reg_pp0_iter2_mem_block2_dense_add_1_reg_594 <= ap_reg_pp0_iter1_mem_block2_dense_add_1_reg_594;
        ap_reg_pp0_iter3_exitcond4_reg_580 <= ap_reg_pp0_iter2_exitcond4_reg_580;
        ap_reg_pp0_iter3_mem_block2_dense_add_1_reg_594 <= ap_reg_pp0_iter2_mem_block2_dense_add_1_reg_594;
        ap_reg_pp0_iter4_exitcond4_reg_580 <= ap_reg_pp0_iter3_exitcond4_reg_580;
        ap_reg_pp0_iter4_mem_block2_dense_add_1_reg_594 <= ap_reg_pp0_iter3_mem_block2_dense_add_1_reg_594;
        exitcond4_reg_580 <= exitcond4_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond3_reg_609 <= exitcond3_reg_609;
        exitcond3_reg_609 <= exitcond3_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_reg_pp2_iter1_exitcond2_reg_635 <= exitcond2_reg_635;
        ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_644 <= mem_block2_dense_add_3_reg_644;
        ap_reg_pp2_iter2_exitcond2_reg_635 <= ap_reg_pp2_iter1_exitcond2_reg_635;
        ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_644 <= ap_reg_pp2_iter1_mem_block2_dense_add_3_reg_644;
        ap_reg_pp2_iter3_exitcond2_reg_635 <= ap_reg_pp2_iter2_exitcond2_reg_635;
        ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_644 <= ap_reg_pp2_iter2_mem_block2_dense_add_3_reg_644;
        ap_reg_pp2_iter4_exitcond2_reg_635 <= ap_reg_pp2_iter3_exitcond2_reg_635;
        ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_644 <= ap_reg_pp2_iter3_mem_block2_dense_add_3_reg_644;
        ap_reg_pp2_iter5_exitcond2_reg_635 <= ap_reg_pp2_iter4_exitcond2_reg_635;
        ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_644 <= ap_reg_pp2_iter4_mem_block2_dense_add_3_reg_644;
        ap_reg_pp2_iter6_exitcond2_reg_635 <= ap_reg_pp2_iter5_exitcond2_reg_635;
        exitcond2_reg_635 <= exitcond2_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_reg_pp3_iter1_exitcond1_reg_670 <= exitcond1_reg_670;
        ap_reg_pp3_iter1_mem_block2_dense_add_4_reg_679 <= mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter2_exitcond1_reg_670 <= ap_reg_pp3_iter1_exitcond1_reg_670;
        ap_reg_pp3_iter2_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter1_mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter3_exitcond1_reg_670 <= ap_reg_pp3_iter2_exitcond1_reg_670;
        ap_reg_pp3_iter3_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter2_mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter4_exitcond1_reg_670 <= ap_reg_pp3_iter3_exitcond1_reg_670;
        ap_reg_pp3_iter4_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter3_mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter5_exitcond1_reg_670 <= ap_reg_pp3_iter4_exitcond1_reg_670;
        ap_reg_pp3_iter5_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter4_mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter6_exitcond1_reg_670 <= ap_reg_pp3_iter5_exitcond1_reg_670;
        ap_reg_pp3_iter6_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter5_mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter7_exitcond1_reg_670 <= ap_reg_pp3_iter6_exitcond1_reg_670;
        ap_reg_pp3_iter7_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter6_mem_block2_dense_add_4_reg_679;
        ap_reg_pp3_iter8_exitcond1_reg_670 <= ap_reg_pp3_iter7_exitcond1_reg_670;
        ap_reg_pp3_iter8_mem_block2_dense_add_4_reg_679 <= ap_reg_pp3_iter7_mem_block2_dense_add_4_reg_679;
        exitcond1_reg_670 <= exitcond1_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bd3_load_reg_599 <= bd3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        counter_reg_688 <= counter_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        exitcond_reg_684 <= exitcond_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_5_reg_584 <= i_5_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_7_reg_639 <= i_7_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        i_8_reg_674 <= i_8_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond3_reg_609 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        max_val_2_reg_623 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mem_block2_dense_add_1_reg_594 <= tmp_fu_314_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond2_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mem_block2_dense_add_3_reg_644 <= tmp_7_fu_489_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond1_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        mem_block2_dense_add_4_reg_679 <= tmp_6_fu_506_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp4_stage1_11001) & (exitcond_reg_684 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (exitcond2_reg_635 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (exitcond1_reg_670 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((exitcond4_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_287 <= mem_block2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_exitcond4_reg_580 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_reg_pp2_iter1_exitcond2_reg_635 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        reg_296 <= grp_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_exitcond4_reg_580 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        storemerge_reg_604 <= storemerge_fu_362_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        tmp_11_reg_693[9 : 0] <= tmp_11_fu_523_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_reg_pp2_iter5_exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        tmp_3_reg_659 <= tmp_3_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage2_11001) & (ap_reg_pp2_iter1_exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        tmp_9_reg_649 <= tmp_9_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter4_exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_s_reg_654 <= grp_fu_282_p2;
    end
end

always @ (*) begin
    if ((exitcond4_fu_302_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_370_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_477_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_494_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state52 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state52 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_511_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state71 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state71 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i_2_phi_fu_216_p4 = i_7_reg_639;
    end else begin
        ap_phi_mux_i_2_phi_fu_216_p4 = i_2_reg_212;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (exitcond1_reg_670 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_i_3_phi_fu_239_p4 = i_8_reg_674;
    end else begin
        ap_phi_mux_i_3_phi_fu_239_p4 = i_3_reg_235;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (exitcond_reg_684 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_phi_mux_i_4_phi_fu_250_p4 = counter_reg_688;
    end else begin
        ap_phi_mux_i_4_phi_fu_250_p4 = i_4_reg_246;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond4_reg_580 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_184_p4 = i_5_reg_584;
    end else begin
        ap_phi_mux_i_phi_fu_184_p4 = i_reg_180;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        bd3_ce0 = 1'b1;
    end else begin
        bd3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        class_ce0 = 1'b1;
    end else begin
        class_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (tmp_33_fu_569_p2 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        class_we0 = 1'b1;
    end else begin
        class_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage2_00001) & (exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        grp_fu_258_opcode = 2'd1;
    end else if ((((1'b0 == ap_block_pp2_stage3_00001) & (ap_reg_pp2_iter5_exitcond2_reg_635 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_00001) & (exitcond4_reg_580 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_258_opcode = 2'd0;
    end else begin
        grp_fu_258_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter5 == 1'b1))) begin
        grp_fu_258_p0 = sum_reg_223;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        grp_fu_258_p0 = reg_287;
    end else begin
        grp_fu_258_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter5 == 1'b1))) begin
        grp_fu_258_p1 = tmp_3_reg_659;
    end else if (((1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        grp_fu_258_p1 = max_val1_reg_202;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_258_p1 = bd3_load_reg_599;
    end else begin
        grp_fu_258_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_00001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        grp_fu_276_opcode = 5'd1;
    end else if (((1'b0 == ap_block_pp1_stage0_00001) & (ap_reg_pp1_iter1_exitcond3_reg_609 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_276_opcode = 5'd2;
    end else if (((1'b0 == ap_block_pp0_stage0_00001) & (ap_reg_pp0_iter3_exitcond4_reg_580 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_276_opcode = 5'd4;
    end else begin
        grp_fu_276_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        grp_fu_276_p0 = reg_287;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_276_p0 = max_val_2_reg_623;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_276_p0 = reg_296;
    end else begin
        grp_fu_276_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_276_p1 = max_val1_reg_202;
    end else if ((((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_276_p1 = 32'd0;
    end else begin
        grp_fu_276_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_11_fu_523_p1;
    end else if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        mem_block2_dense_address0 = ap_reg_pp3_iter8_mem_block2_dense_add_4_reg_679;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_6_fu_506_p1;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        mem_block2_dense_address0 = ap_reg_pp2_iter5_mem_block2_dense_add_3_reg_644;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_7_fu_489_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mem_block2_dense_address0 = tmp_4_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_block2_dense_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mem_block2_dense_address0 = ap_reg_pp0_iter4_mem_block2_dense_add_1_reg_594;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mem_block2_dense_address0 = tmp_fu_314_p1;
    end else begin
        mem_block2_dense_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        mem_block2_dense_ce0 = 1'b1;
    end else begin
        mem_block2_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        mem_block2_dense_d0 = grp_fu_264_p2;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        mem_block2_dense_d0 = tmp_3_reg_659;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mem_block2_dense_d0 = storemerge_reg_604;
    end else begin
        mem_block2_dense_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage2_11001) & (ap_reg_pp2_iter5_exitcond2_reg_635 == 1'd0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_reg_pp3_iter8_exitcond1_reg_670 == 1'd0) & (ap_enable_reg_pp3_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_reg_pp0_iter4_exitcond4_reg_580 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        mem_block2_dense_we0 = 1'b1;
    end else begin
        mem_block2_dense_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (tmp_33_fu_569_p2 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond4_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond4_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond3_fu_370_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond3_fu_370_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond2_fu_477_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond2_fu_477_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((~((ap_enable_reg_pp2_iter5 == 1'b0) & (1'b0 == ap_block_pp2_stage2_subdone) & (ap_enable_reg_pp2_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else if (((ap_enable_reg_pp2_iter5 == 1'b0) & (1'b0 == ap_block_pp2_stage2_subdone) & (ap_enable_reg_pp2_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond1_fu_494_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond1_fu_494_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((ap_enable_reg_pp3_iter7 == 1'b0) & (1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter7 == 1'b0) & (1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (exitcond_fu_511_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (exitcond_fu_511_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd18];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp3_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp3_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp3_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp3_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bd3_address0 = tmp_fu_314_p1;

assign class_address0 = tmp_11_reg_693;

assign class_d0 = i_4_reg_246;

assign counter_fu_517_p2 = (ap_phi_mux_i_4_phi_fu_250_p4 + 10'd1);

assign exitcond1_fu_494_p2 = ((ap_phi_mux_i_3_phi_fu_239_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond2_fu_477_p2 = ((ap_phi_mux_i_2_phi_fu_216_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond3_fu_370_p2 = ((i_1_reg_191 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond4_fu_302_p2 = ((ap_phi_mux_i_phi_fu_184_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond_fu_511_p2 = ((ap_phi_mux_i_4_phi_fu_250_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign i_5_fu_308_p2 = (ap_phi_mux_i_phi_fu_184_p4 + 10'd1);

assign i_6_fu_381_p2 = (10'd1 + i_1_reg_191);

assign i_7_fu_483_p2 = (ap_phi_mux_i_2_phi_fu_216_p4 + 10'd1);

assign i_8_fu_500_p2 = (ap_phi_mux_i_3_phi_fu_239_p4 + 10'd1);

assign max_val1_to_int_fu_404_p1 = max_val1_reg_202;

assign max_val_1_fu_470_p3 = ((tmp_28_fu_464_p2[0:0] === 1'b1) ? max_val_2_reg_623 : max_val1_reg_202);

assign max_val_2_to_int_fu_387_p1 = max_val_2_reg_623;

assign mem_block2_dense_loa_4_fu_533_p1 = reg_287;

assign notlhs1_fu_551_p2 = ((tmp_29_fu_537_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_422_p2 = ((tmp_20_fu_390_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs9_fu_440_p2 = ((tmp_22_fu_408_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_338_p2 = ((tmp_5_fu_324_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_446_p2 = ((tmp_23_fu_418_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_557_p2 = ((tmp_30_fu_547_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_428_p2 = ((tmp_21_fu_400_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_344_p2 = ((tmp_12_fu_334_p1 == 23'd0) ? 1'b1 : 1'b0);

assign result_address0 = tmp_11_reg_693;

assign storemerge_fu_362_p3 = ((tmp_19_fu_356_p2[0:0] === 1'b1) ? 32'd0 : reg_296);

assign tmp_11_fu_523_p1 = ap_phi_mux_i_4_phi_fu_250_p4;

assign tmp_12_fu_334_p1 = tmp_1_to_int_fu_320_p1[22:0];

assign tmp_13_fu_350_p2 = (notrhs_fu_344_p2 | notlhs_fu_338_p2);

assign tmp_19_fu_356_p2 = (tmp_13_fu_350_p2 & grp_fu_276_p2);

assign tmp_1_to_int_fu_320_p1 = reg_296;

assign tmp_20_fu_390_p4 = {{max_val_2_to_int_fu_387_p1[30:23]}};

assign tmp_21_fu_400_p1 = max_val_2_to_int_fu_387_p1[22:0];

assign tmp_22_fu_408_p4 = {{max_val1_to_int_fu_404_p1[30:23]}};

assign tmp_23_fu_418_p1 = max_val1_to_int_fu_404_p1[22:0];

assign tmp_24_fu_434_p2 = (notrhs8_fu_428_p2 | notlhs7_fu_422_p2);

assign tmp_25_fu_452_p2 = (notrhs1_fu_446_p2 | notlhs9_fu_440_p2);

assign tmp_26_fu_458_p2 = (tmp_25_fu_452_p2 & tmp_24_fu_434_p2);

assign tmp_28_fu_464_p2 = (tmp_26_fu_458_p2 & grp_fu_276_p2);

assign tmp_29_fu_537_p4 = {{mem_block2_dense_loa_4_fu_533_p1[30:23]}};

assign tmp_30_fu_547_p1 = mem_block2_dense_loa_4_fu_533_p1[22:0];

assign tmp_31_fu_563_p2 = (notrhs2_fu_557_p2 | notlhs1_fu_551_p2);

assign tmp_33_fu_569_p2 = (tmp_31_fu_563_p2 & grp_fu_276_p2);

assign tmp_4_fu_376_p1 = i_1_reg_191;

assign tmp_5_fu_324_p4 = {{tmp_1_to_int_fu_320_p1[30:23]}};

assign tmp_6_fu_506_p1 = ap_phi_mux_i_3_phi_fu_239_p4;

assign tmp_7_fu_489_p1 = ap_phi_mux_i_2_phi_fu_216_p4;

assign tmp_fu_314_p1 = ap_phi_mux_i_phi_fu_184_p4;

always @ (posedge ap_clk) begin
    tmp_11_reg_693[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //add_bias_and_relu_flatten3_Softmax
