// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XADD_BIAS_AND_RELU_FLATTEN3_SOFTMAX_H
#define XADD_BIAS_AND_RELU_FLATTEN3_SOFTMAX_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xadd_bias_and_relu_flatten3_softmax_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
    u32 Input_BaseAddress;
    u32 Output_BaseAddress;
    u32 Parameter_BaseAddress;
} XAdd_bias_and_relu_flatten3_softmax_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 Input_BaseAddress;
    u32 Output_BaseAddress;
    u32 Parameter_BaseAddress;
    u32 IsReady;
} XAdd_bias_and_relu_flatten3_softmax;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XAdd_bias_and_relu_flatten3_softmax_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XAdd_bias_and_relu_flatten3_softmax_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XAdd_bias_and_relu_flatten3_softmax_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XAdd_bias_and_relu_flatten3_softmax_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XAdd_bias_and_relu_flatten3_softmax_Initialize(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, u16 DeviceId);
XAdd_bias_and_relu_flatten3_softmax_Config* XAdd_bias_and_relu_flatten3_softmax_LookupConfig(u16 DeviceId);
int XAdd_bias_and_relu_flatten3_softmax_CfgInitialize(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, XAdd_bias_and_relu_flatten3_softmax_Config *ConfigPtr);
#else
int XAdd_bias_and_relu_flatten3_softmax_Initialize(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, const char* InstanceName);
int XAdd_bias_and_relu_flatten3_softmax_Release(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
#endif

void XAdd_bias_and_relu_flatten3_softmax_Start(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_IsDone(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_IsIdle(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_IsReady(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
void XAdd_bias_and_relu_flatten3_softmax_EnableAutoRestart(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
void XAdd_bias_and_relu_flatten3_softmax_DisableAutoRestart(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);

u32 XAdd_bias_and_relu_flatten3_softmax_Get_mem_block2_dense_BaseAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_mem_block2_dense_HighAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_mem_block2_dense_TotalBytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_mem_block2_dense_BitWidth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_mem_block2_dense_Depth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_mem_block2_dense_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_mem_block2_dense_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_mem_block2_dense_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_mem_block2_dense_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_class_BaseAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_class_HighAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_class_TotalBytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_class_BitWidth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_class_Depth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_class_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_class_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_class_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_class_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_result_BaseAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_result_HighAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_result_TotalBytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_result_BitWidth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_result_Depth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_result_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_result_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_result_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_result_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_bd3_BaseAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_bd3_HighAddress(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_bd3_TotalBytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_bd3_BitWidth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Get_bd3_Depth(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_bd3_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_bd3_Words(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, int *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Write_bd3_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);
u32 XAdd_bias_and_relu_flatten3_softmax_Read_bd3_Bytes(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, int offset, char *data, int length);

void XAdd_bias_and_relu_flatten3_softmax_InterruptGlobalEnable(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
void XAdd_bias_and_relu_flatten3_softmax_InterruptGlobalDisable(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
void XAdd_bias_and_relu_flatten3_softmax_InterruptEnable(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, u32 Mask);
void XAdd_bias_and_relu_flatten3_softmax_InterruptDisable(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, u32 Mask);
void XAdd_bias_and_relu_flatten3_softmax_InterruptClear(XAdd_bias_and_relu_flatten3_softmax *InstancePtr, u32 Mask);
u32 XAdd_bias_and_relu_flatten3_softmax_InterruptGetEnabled(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);
u32 XAdd_bias_and_relu_flatten3_softmax_InterruptGetStatus(XAdd_bias_and_relu_flatten3_softmax *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
