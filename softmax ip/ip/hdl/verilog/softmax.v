// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="softmax,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.641000,HLS_SYN_LAT=56001,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=28,HLS_SYN_FF=3696,HLS_SYN_LUT=5845}" *)

module softmax (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt,
        s_axi_INPUT_AWVALID,
        s_axi_INPUT_AWREADY,
        s_axi_INPUT_AWADDR,
        s_axi_INPUT_WVALID,
        s_axi_INPUT_WREADY,
        s_axi_INPUT_WDATA,
        s_axi_INPUT_WSTRB,
        s_axi_INPUT_ARVALID,
        s_axi_INPUT_ARREADY,
        s_axi_INPUT_ARADDR,
        s_axi_INPUT_RVALID,
        s_axi_INPUT_RREADY,
        s_axi_INPUT_RDATA,
        s_axi_INPUT_RRESP,
        s_axi_INPUT_BVALID,
        s_axi_INPUT_BREADY,
        s_axi_INPUT_BRESP,
        s_axi_OUTPUT_AWVALID,
        s_axi_OUTPUT_AWREADY,
        s_axi_OUTPUT_AWADDR,
        s_axi_OUTPUT_WVALID,
        s_axi_OUTPUT_WREADY,
        s_axi_OUTPUT_WDATA,
        s_axi_OUTPUT_WSTRB,
        s_axi_OUTPUT_ARVALID,
        s_axi_OUTPUT_ARREADY,
        s_axi_OUTPUT_ARADDR,
        s_axi_OUTPUT_RVALID,
        s_axi_OUTPUT_RREADY,
        s_axi_OUTPUT_RDATA,
        s_axi_OUTPUT_RRESP,
        s_axi_OUTPUT_BVALID,
        s_axi_OUTPUT_BREADY,
        s_axi_OUTPUT_BRESP,
        s_axi_OUTPUT1_AWVALID,
        s_axi_OUTPUT1_AWREADY,
        s_axi_OUTPUT1_AWADDR,
        s_axi_OUTPUT1_WVALID,
        s_axi_OUTPUT1_WREADY,
        s_axi_OUTPUT1_WDATA,
        s_axi_OUTPUT1_WSTRB,
        s_axi_OUTPUT1_ARVALID,
        s_axi_OUTPUT1_ARREADY,
        s_axi_OUTPUT1_ARADDR,
        s_axi_OUTPUT1_RVALID,
        s_axi_OUTPUT1_RREADY,
        s_axi_OUTPUT1_RDATA,
        s_axi_OUTPUT1_RRESP,
        s_axi_OUTPUT1_BVALID,
        s_axi_OUTPUT1_BREADY,
        s_axi_OUTPUT1_BRESP
);

parameter    ap_ST_fsm_state1 = 58'd1;
parameter    ap_ST_fsm_state2 = 58'd2;
parameter    ap_ST_fsm_state3 = 58'd4;
parameter    ap_ST_fsm_state4 = 58'd8;
parameter    ap_ST_fsm_state5 = 58'd16;
parameter    ap_ST_fsm_state6 = 58'd32;
parameter    ap_ST_fsm_state7 = 58'd64;
parameter    ap_ST_fsm_state8 = 58'd128;
parameter    ap_ST_fsm_state9 = 58'd256;
parameter    ap_ST_fsm_state10 = 58'd512;
parameter    ap_ST_fsm_state11 = 58'd1024;
parameter    ap_ST_fsm_state12 = 58'd2048;
parameter    ap_ST_fsm_state13 = 58'd4096;
parameter    ap_ST_fsm_state14 = 58'd8192;
parameter    ap_ST_fsm_state15 = 58'd16384;
parameter    ap_ST_fsm_state16 = 58'd32768;
parameter    ap_ST_fsm_state17 = 58'd65536;
parameter    ap_ST_fsm_state18 = 58'd131072;
parameter    ap_ST_fsm_state19 = 58'd262144;
parameter    ap_ST_fsm_state20 = 58'd524288;
parameter    ap_ST_fsm_state21 = 58'd1048576;
parameter    ap_ST_fsm_state22 = 58'd2097152;
parameter    ap_ST_fsm_state23 = 58'd4194304;
parameter    ap_ST_fsm_state24 = 58'd8388608;
parameter    ap_ST_fsm_state25 = 58'd16777216;
parameter    ap_ST_fsm_state26 = 58'd33554432;
parameter    ap_ST_fsm_state27 = 58'd67108864;
parameter    ap_ST_fsm_state28 = 58'd134217728;
parameter    ap_ST_fsm_state29 = 58'd268435456;
parameter    ap_ST_fsm_state30 = 58'd536870912;
parameter    ap_ST_fsm_state31 = 58'd1073741824;
parameter    ap_ST_fsm_state32 = 58'd2147483648;
parameter    ap_ST_fsm_state33 = 58'd4294967296;
parameter    ap_ST_fsm_state34 = 58'd8589934592;
parameter    ap_ST_fsm_state35 = 58'd17179869184;
parameter    ap_ST_fsm_state36 = 58'd34359738368;
parameter    ap_ST_fsm_state37 = 58'd68719476736;
parameter    ap_ST_fsm_state38 = 58'd137438953472;
parameter    ap_ST_fsm_state39 = 58'd274877906944;
parameter    ap_ST_fsm_state40 = 58'd549755813888;
parameter    ap_ST_fsm_state41 = 58'd1099511627776;
parameter    ap_ST_fsm_state42 = 58'd2199023255552;
parameter    ap_ST_fsm_state43 = 58'd4398046511104;
parameter    ap_ST_fsm_state44 = 58'd8796093022208;
parameter    ap_ST_fsm_state45 = 58'd17592186044416;
parameter    ap_ST_fsm_state46 = 58'd35184372088832;
parameter    ap_ST_fsm_state47 = 58'd70368744177664;
parameter    ap_ST_fsm_state48 = 58'd140737488355328;
parameter    ap_ST_fsm_state49 = 58'd281474976710656;
parameter    ap_ST_fsm_state50 = 58'd562949953421312;
parameter    ap_ST_fsm_state51 = 58'd1125899906842624;
parameter    ap_ST_fsm_state52 = 58'd2251799813685248;
parameter    ap_ST_fsm_state53 = 58'd4503599627370496;
parameter    ap_ST_fsm_state54 = 58'd9007199254740992;
parameter    ap_ST_fsm_state55 = 58'd18014398509481984;
parameter    ap_ST_fsm_state56 = 58'd36028797018963968;
parameter    ap_ST_fsm_state57 = 58'd72057594037927936;
parameter    ap_ST_fsm_state58 = 58'd144115188075855872;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT_ADDR_WIDTH = 13;
parameter    C_S_AXI_OUTPUT1_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT1_ADDR_WIDTH = 13;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT1_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;
input   s_axi_INPUT_AWVALID;
output   s_axi_INPUT_AWREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_AWADDR;
input   s_axi_INPUT_WVALID;
output   s_axi_INPUT_WREADY;
input  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_WDATA;
input  [C_S_AXI_INPUT_WSTRB_WIDTH - 1:0] s_axi_INPUT_WSTRB;
input   s_axi_INPUT_ARVALID;
output   s_axi_INPUT_ARREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_ARADDR;
output   s_axi_INPUT_RVALID;
input   s_axi_INPUT_RREADY;
output  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_RDATA;
output  [1:0] s_axi_INPUT_RRESP;
output   s_axi_INPUT_BVALID;
input   s_axi_INPUT_BREADY;
output  [1:0] s_axi_INPUT_BRESP;
input   s_axi_OUTPUT_AWVALID;
output   s_axi_OUTPUT_AWREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_AWADDR;
input   s_axi_OUTPUT_WVALID;
output   s_axi_OUTPUT_WREADY;
input  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_WDATA;
input  [C_S_AXI_OUTPUT_WSTRB_WIDTH - 1:0] s_axi_OUTPUT_WSTRB;
input   s_axi_OUTPUT_ARVALID;
output   s_axi_OUTPUT_ARREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_ARADDR;
output   s_axi_OUTPUT_RVALID;
input   s_axi_OUTPUT_RREADY;
output  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_RDATA;
output  [1:0] s_axi_OUTPUT_RRESP;
output   s_axi_OUTPUT_BVALID;
input   s_axi_OUTPUT_BREADY;
output  [1:0] s_axi_OUTPUT_BRESP;
input   s_axi_OUTPUT1_AWVALID;
output   s_axi_OUTPUT1_AWREADY;
input  [C_S_AXI_OUTPUT1_ADDR_WIDTH - 1:0] s_axi_OUTPUT1_AWADDR;
input   s_axi_OUTPUT1_WVALID;
output   s_axi_OUTPUT1_WREADY;
input  [C_S_AXI_OUTPUT1_DATA_WIDTH - 1:0] s_axi_OUTPUT1_WDATA;
input  [C_S_AXI_OUTPUT1_WSTRB_WIDTH - 1:0] s_axi_OUTPUT1_WSTRB;
input   s_axi_OUTPUT1_ARVALID;
output   s_axi_OUTPUT1_ARREADY;
input  [C_S_AXI_OUTPUT1_ADDR_WIDTH - 1:0] s_axi_OUTPUT1_ARADDR;
output   s_axi_OUTPUT1_RVALID;
input   s_axi_OUTPUT1_RREADY;
output  [C_S_AXI_OUTPUT1_DATA_WIDTH - 1:0] s_axi_OUTPUT1_RDATA;
output  [1:0] s_axi_OUTPUT1_RRESP;
output   s_axi_OUTPUT1_BVALID;
input   s_axi_OUTPUT1_BREADY;
output  [1:0] s_axi_OUTPUT1_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [9:0] memblock2_dense_address0;
reg    memblock2_dense_ce0;
reg    memblock2_dense_we0;
reg   [31:0] memblock2_dense_d0;
wire   [31:0] memblock2_dense_q0;
wire   [9:0] class_address0;
reg    class_ce0;
reg    class_we0;
wire   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
reg   [31:0] reg_250;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_259_p2;
wire   [9:0] i_4_fu_270_p2;
reg   [9:0] i_4_reg_491;
reg   [31:0] max_val_2_reg_496;
wire    ap_CS_fsm_state4;
wire   [0:0] grp_fu_239_p2;
reg   [0:0] tmp_16_reg_503;
wire    ap_CS_fsm_state5;
wire   [31:0] max_val_1_fu_358_p3;
wire    ap_CS_fsm_state6;
wire   [9:0] i_5_fu_371_p2;
reg   [9:0] i_5_reg_516;
wire    ap_CS_fsm_state7;
reg   [9:0] memblock2_dense_addr_2_reg_521;
wire   [0:0] exitcond2_fu_365_p2;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] tmp_4_reg_526;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_5_fu_236_p1;
reg   [63:0] tmp_5_reg_531;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_245_p2;
reg   [63:0] tmp_6_reg_536;
wire    ap_CS_fsm_state32;
wire   [31:0] tmp_7_fu_233_p1;
reg   [31:0] tmp_7_reg_541;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire   [9:0] i_6_fu_388_p2;
reg   [9:0] i_6_reg_555;
wire    ap_CS_fsm_state39;
reg   [9:0] memblock2_dense_addr_3_reg_560;
wire   [0:0] exitcond1_fu_382_p2;
wire   [9:0] i_7_fu_405_p2;
reg   [9:0] i_7_reg_568;
wire    ap_CS_fsm_state56;
wire   [63:0] tmp_8_fu_411_p1;
reg   [63:0] tmp_8_reg_573;
wire   [0:0] exitcond_fu_399_p2;
wire   [31:0] counter_1_fu_470_p3;
wire    ap_CS_fsm_state58;
reg   [9:0] i_reg_141;
reg   [31:0] max_val1_reg_152;
reg   [9:0] i_1_reg_162;
reg   [31:0] sum_reg_173;
reg   [9:0] i_2_reg_185;
wire    ap_CS_fsm_state55;
reg   [9:0] i_3_reg_196;
reg   [31:0] counter_reg_207;
wire   [63:0] tmp_fu_265_p1;
wire   [63:0] tmp_3_fu_377_p1;
wire   [63:0] tmp_s_fu_394_p1;
wire   [0:0] tmp_22_fu_452_p2;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_226_p2;
reg   [31:0] grp_fu_220_p0;
reg   [31:0] grp_fu_220_p1;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_239_p0;
reg   [31:0] grp_fu_239_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] max_val_2_to_int_fu_276_p1;
wire   [31:0] max_val1_to_int_fu_293_p1;
wire   [7:0] tmp_1_fu_279_p4;
wire   [22:0] tmp_9_fu_289_p1;
wire   [0:0] notrhs_fu_317_p2;
wire   [0:0] notlhs_fu_311_p2;
wire   [7:0] tmp_11_fu_297_p4;
wire   [22:0] tmp_12_fu_307_p1;
wire   [0:0] notrhs6_fu_335_p2;
wire   [0:0] notlhs5_fu_329_p2;
wire   [0:0] tmp_13_fu_323_p2;
wire   [0:0] tmp_14_fu_341_p2;
wire   [0:0] tmp_15_fu_347_p2;
wire   [0:0] tmp_17_fu_353_p2;
wire   [31:0] memblock2_dense_load_5_fu_416_p1;
wire   [7:0] tmp_18_fu_420_p4;
wire   [22:0] tmp_19_fu_430_p1;
wire   [0:0] notrhs8_fu_440_p2;
wire   [0:0] notlhs7_fu_434_p2;
wire   [0:0] tmp_20_fu_446_p2;
wire   [0:0] tmp_10_fu_458_p2;
wire   [31:0] counter_0_op_fu_464_p2;
reg   [1:0] grp_fu_220_opcode;
reg   [4:0] grp_fu_239_opcode;
reg   [57:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 58'd1;
end

softmax_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
softmax_CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

softmax_INPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUT_DATA_WIDTH ))
softmax_INPUT_s_axi_U(
    .AWVALID(s_axi_INPUT_AWVALID),
    .AWREADY(s_axi_INPUT_AWREADY),
    .AWADDR(s_axi_INPUT_AWADDR),
    .WVALID(s_axi_INPUT_WVALID),
    .WREADY(s_axi_INPUT_WREADY),
    .WDATA(s_axi_INPUT_WDATA),
    .WSTRB(s_axi_INPUT_WSTRB),
    .ARVALID(s_axi_INPUT_ARVALID),
    .ARREADY(s_axi_INPUT_ARREADY),
    .ARADDR(s_axi_INPUT_ARADDR),
    .RVALID(s_axi_INPUT_RVALID),
    .RREADY(s_axi_INPUT_RREADY),
    .RDATA(s_axi_INPUT_RDATA),
    .RRESP(s_axi_INPUT_RRESP),
    .BVALID(s_axi_INPUT_BVALID),
    .BREADY(s_axi_INPUT_BREADY),
    .BRESP(s_axi_INPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .memblock2_dense_address0(memblock2_dense_address0),
    .memblock2_dense_ce0(memblock2_dense_ce0),
    .memblock2_dense_we0(memblock2_dense_we0),
    .memblock2_dense_d0(memblock2_dense_d0),
    .memblock2_dense_q0(memblock2_dense_q0)
);

softmax_OUTPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT_DATA_WIDTH ))
softmax_OUTPUT_s_axi_U(
    .AWVALID(s_axi_OUTPUT_AWVALID),
    .AWREADY(s_axi_OUTPUT_AWREADY),
    .AWADDR(s_axi_OUTPUT_AWADDR),
    .WVALID(s_axi_OUTPUT_WVALID),
    .WREADY(s_axi_OUTPUT_WREADY),
    .WDATA(s_axi_OUTPUT_WDATA),
    .WSTRB(s_axi_OUTPUT_WSTRB),
    .ARVALID(s_axi_OUTPUT_ARVALID),
    .ARREADY(s_axi_OUTPUT_ARREADY),
    .ARADDR(s_axi_OUTPUT_ARADDR),
    .RVALID(s_axi_OUTPUT_RVALID),
    .RREADY(s_axi_OUTPUT_RREADY),
    .RDATA(s_axi_OUTPUT_RDATA),
    .RRESP(s_axi_OUTPUT_RRESP),
    .BVALID(s_axi_OUTPUT_BVALID),
    .BREADY(s_axi_OUTPUT_BREADY),
    .BRESP(s_axi_OUTPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .class_address0(class_address0),
    .class_ce0(class_ce0),
    .class_we0(class_we0),
    .class_d0(counter_reg_207)
);

softmax_OUTPUT1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT1_DATA_WIDTH ))
softmax_OUTPUT1_s_axi_U(
    .AWVALID(s_axi_OUTPUT1_AWVALID),
    .AWREADY(s_axi_OUTPUT1_AWREADY),
    .AWADDR(s_axi_OUTPUT1_AWADDR),
    .WVALID(s_axi_OUTPUT1_WVALID),
    .WREADY(s_axi_OUTPUT1_WREADY),
    .WDATA(s_axi_OUTPUT1_WDATA),
    .WSTRB(s_axi_OUTPUT1_WSTRB),
    .ARVALID(s_axi_OUTPUT1_ARVALID),
    .ARREADY(s_axi_OUTPUT1_ARREADY),
    .ARADDR(s_axi_OUTPUT1_ARADDR),
    .RVALID(s_axi_OUTPUT1_RVALID),
    .RREADY(s_axi_OUTPUT1_RREADY),
    .RDATA(s_axi_OUTPUT1_RDATA),
    .RRESP(s_axi_OUTPUT1_RRESP),
    .BVALID(s_axi_OUTPUT1_BVALID),
    .BREADY(s_axi_OUTPUT1_BREADY),
    .BRESP(s_axi_OUTPUT1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .result_address0(result_address0),
    .result_ce0(result_ce0),
    .result_we0(result_we0),
    .result_d0(reg_250)
);

softmax_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .opcode(grp_fu_220_opcode),
    .ce(1'b1),
    .dout(grp_fu_220_p2)
);

softmax_fdiv_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_fdiv_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(memblock2_dense_q0),
    .din1(sum_reg_173),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

softmax_fptrunc_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
softmax_fptrunc_6dEe_U3(
    .din0(tmp_6_reg_536),
    .dout(tmp_7_fu_233_p1)
);

softmax_fpext_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
softmax_fpext_32neOg_U4(
    .din0(tmp_4_reg_526),
    .dout(tmp_5_fu_236_p1)
);

softmax_fcmp_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
softmax_fcmp_32nsfYi_U5(
    .din0(grp_fu_239_p0),
    .din1(grp_fu_239_p1),
    .opcode(grp_fu_239_opcode),
    .dout(grp_fu_239_p2)
);

softmax_dexp_64nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
softmax_dexp_64nsg8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_5_reg_531),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        counter_reg_207 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        counter_reg_207 <= counter_1_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_162 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        i_1_reg_162 <= i_5_reg_516;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_185 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        i_2_reg_185 <= i_6_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        i_3_reg_196 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        i_3_reg_196 <= i_7_reg_568;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_141 <= i_4_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_141 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_val1_reg_152 <= max_val_1_fu_358_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val1_reg_152 <= memblock2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_reg_173 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        sum_reg_173 <= grp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_4_reg_491 <= i_4_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_516 <= i_5_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_6_reg_555 <= i_6_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_7_reg_568 <= i_7_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_val_2_reg_496 <= memblock2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        memblock2_dense_addr_2_reg_521 <= tmp_3_fu_377_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        memblock2_dense_addr_3_reg_560 <= tmp_s_fu_394_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_250 <= memblock2_dense_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_16_reg_503 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_4_reg_526 <= grp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_5_reg_531 <= tmp_5_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_6_reg_536 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_7_reg_541 <= tmp_7_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
        tmp_8_reg_573[9 : 0] <= tmp_8_fu_411_p1[9 : 0];
    end
end

always @ (*) begin
    if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        class_ce0 = 1'b1;
    end else begin
        class_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        class_we0 = 1'b1;
    end else begin
        class_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_220_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_220_opcode = 2'd0;
    end else begin
        grp_fu_220_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_220_p0 = sum_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_220_p0 = reg_250;
    end else begin
        grp_fu_220_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_220_p1 = tmp_7_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_220_p1 = max_val1_reg_152;
    end else begin
        grp_fu_220_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_239_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_239_opcode = 5'd2;
    end else begin
        grp_fu_239_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_239_p0 = reg_250;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_239_p0 = max_val_2_reg_496;
    end else begin
        grp_fu_239_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_239_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_239_p1 = max_val1_reg_152;
    end else begin
        grp_fu_239_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        memblock2_dense_address0 = tmp_8_fu_411_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        memblock2_dense_address0 = memblock2_dense_addr_3_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        memblock2_dense_address0 = tmp_s_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        memblock2_dense_address0 = memblock2_dense_addr_2_reg_521;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memblock2_dense_address0 = tmp_3_fu_377_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        memblock2_dense_address0 = tmp_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        memblock2_dense_address0 = 64'd0;
    end else begin
        memblock2_dense_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        memblock2_dense_ce0 = 1'b1;
    end else begin
        memblock2_dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        memblock2_dense_d0 = grp_fu_226_p2;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        memblock2_dense_d0 = tmp_7_reg_541;
    end else begin
        memblock2_dense_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state55))) begin
        memblock2_dense_we0 = 1'b1;
    end else begin
        memblock2_dense_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond2_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state39 : begin
            if (((exitcond1_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state56 : begin
            if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign class_address0 = tmp_8_reg_573;

assign counter_0_op_fu_464_p2 = (counter_reg_207 + 32'd1);

assign counter_1_fu_470_p3 = ((tmp_10_fu_458_p2[0:0] === 1'b1) ? 32'd0 : counter_0_op_fu_464_p2);

assign exitcond1_fu_382_p2 = ((i_2_reg_185 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond2_fu_365_p2 = ((i_1_reg_162 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond3_fu_259_p2 = ((i_reg_141 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond_fu_399_p2 = ((i_3_reg_196 == 10'd1000) ? 1'b1 : 1'b0);

assign i_4_fu_270_p2 = (10'd1 + i_reg_141);

assign i_5_fu_371_p2 = (i_1_reg_162 + 10'd1);

assign i_6_fu_388_p2 = (i_2_reg_185 + 10'd1);

assign i_7_fu_405_p2 = (i_3_reg_196 + 10'd1);

assign max_val1_to_int_fu_293_p1 = max_val1_reg_152;

assign max_val_1_fu_358_p3 = ((tmp_17_fu_353_p2[0:0] === 1'b1) ? max_val_2_reg_496 : max_val1_reg_152);

assign max_val_2_to_int_fu_276_p1 = max_val_2_reg_496;

assign memblock2_dense_load_5_fu_416_p1 = reg_250;

assign notlhs5_fu_329_p2 = ((tmp_11_fu_297_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_434_p2 = ((tmp_18_fu_420_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_311_p2 = ((tmp_1_fu_279_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs6_fu_335_p2 = ((tmp_12_fu_307_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_440_p2 = ((tmp_19_fu_430_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_317_p2 = ((tmp_9_fu_289_p1 == 23'd0) ? 1'b1 : 1'b0);

assign result_address0 = tmp_8_reg_573;

assign tmp_10_fu_458_p2 = ((counter_reg_207 == 32'd999) ? 1'b1 : 1'b0);

assign tmp_11_fu_297_p4 = {{max_val1_to_int_fu_293_p1[30:23]}};

assign tmp_12_fu_307_p1 = max_val1_to_int_fu_293_p1[22:0];

assign tmp_13_fu_323_p2 = (notrhs_fu_317_p2 | notlhs_fu_311_p2);

assign tmp_14_fu_341_p2 = (notrhs6_fu_335_p2 | notlhs5_fu_329_p2);

assign tmp_15_fu_347_p2 = (tmp_14_fu_341_p2 & tmp_13_fu_323_p2);

assign tmp_17_fu_353_p2 = (tmp_16_reg_503 & tmp_15_fu_347_p2);

assign tmp_18_fu_420_p4 = {{memblock2_dense_load_5_fu_416_p1[30:23]}};

assign tmp_19_fu_430_p1 = memblock2_dense_load_5_fu_416_p1[22:0];

assign tmp_1_fu_279_p4 = {{max_val_2_to_int_fu_276_p1[30:23]}};

assign tmp_20_fu_446_p2 = (notrhs8_fu_440_p2 | notlhs7_fu_434_p2);

assign tmp_22_fu_452_p2 = (tmp_20_fu_446_p2 & grp_fu_239_p2);

assign tmp_3_fu_377_p1 = i_1_reg_162;

assign tmp_8_fu_411_p1 = i_3_reg_196;

assign tmp_9_fu_289_p1 = max_val_2_to_int_fu_276_p1[22:0];

assign tmp_fu_265_p1 = i_reg_141;

assign tmp_s_fu_394_p1 = i_2_reg_185;

always @ (posedge ap_clk) begin
    tmp_8_reg_573[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //softmax
