-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_INPUT_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_INPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT1_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_OUTPUT1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_INPUT_AWVALID : IN STD_LOGIC;
    s_axi_INPUT_AWREADY : OUT STD_LOGIC;
    s_axi_INPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_WVALID : IN STD_LOGIC;
    s_axi_INPUT_WREADY : OUT STD_LOGIC;
    s_axi_INPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_INPUT_ARVALID : IN STD_LOGIC;
    s_axi_INPUT_ARREADY : OUT STD_LOGIC;
    s_axi_INPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_RVALID : OUT STD_LOGIC;
    s_axi_INPUT_RREADY : IN STD_LOGIC;
    s_axi_INPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INPUT_BVALID : OUT STD_LOGIC;
    s_axi_INPUT_BREADY : IN STD_LOGIC;
    s_axi_INPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT1_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT1_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT1_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT1_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT1_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT1_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT1_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT1_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT1_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT1_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT1_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of softmax is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "softmax,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.641000,HLS_SYN_LAT=56001,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=28,HLS_SYN_FF=3696,HLS_SYN_LUT=5845}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal memblock2_dense_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal memblock2_dense_ce0 : STD_LOGIC;
    signal memblock2_dense_we0 : STD_LOGIC;
    signal memblock2_dense_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal memblock2_dense_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal class_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal class_ce0 : STD_LOGIC;
    signal class_we0 : STD_LOGIC;
    signal result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_491 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val_2_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal max_val_1_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_5_fu_371_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_516 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal memblock2_dense_addr_2_reg_521 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_5_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_531 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_7_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_6_fu_388_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal memblock2_dense_addr_3_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_405_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_568 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_8_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_573 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_1_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i_reg_141 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val1_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_185 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_3_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal counter_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal max_val_2_to_int_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val1_to_int_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_279_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_289_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_297_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_307_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal memblock2_dense_load_5_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_420_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_430_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_0_op_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_239_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);

    component softmax_faddfsub_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_fdiv_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_fptrunc_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_fpext_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component softmax_fcmp_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component softmax_dexp_64nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component softmax_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component softmax_INPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        memblock2_dense_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        memblock2_dense_ce0 : IN STD_LOGIC;
        memblock2_dense_we0 : IN STD_LOGIC;
        memblock2_dense_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        memblock2_dense_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_OUTPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        class_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        class_ce0 : IN STD_LOGIC;
        class_we0 : IN STD_LOGIC;
        class_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_OUTPUT1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        result_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        result_ce0 : IN STD_LOGIC;
        result_we0 : IN STD_LOGIC;
        result_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    softmax_CONTROL_s_axi_U : component softmax_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    softmax_INPUT_s_axi_U : component softmax_INPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INPUT_AWVALID,
        AWREADY => s_axi_INPUT_AWREADY,
        AWADDR => s_axi_INPUT_AWADDR,
        WVALID => s_axi_INPUT_WVALID,
        WREADY => s_axi_INPUT_WREADY,
        WDATA => s_axi_INPUT_WDATA,
        WSTRB => s_axi_INPUT_WSTRB,
        ARVALID => s_axi_INPUT_ARVALID,
        ARREADY => s_axi_INPUT_ARREADY,
        ARADDR => s_axi_INPUT_ARADDR,
        RVALID => s_axi_INPUT_RVALID,
        RREADY => s_axi_INPUT_RREADY,
        RDATA => s_axi_INPUT_RDATA,
        RRESP => s_axi_INPUT_RRESP,
        BVALID => s_axi_INPUT_BVALID,
        BREADY => s_axi_INPUT_BREADY,
        BRESP => s_axi_INPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        memblock2_dense_address0 => memblock2_dense_address0,
        memblock2_dense_ce0 => memblock2_dense_ce0,
        memblock2_dense_we0 => memblock2_dense_we0,
        memblock2_dense_d0 => memblock2_dense_d0,
        memblock2_dense_q0 => memblock2_dense_q0);

    softmax_OUTPUT_s_axi_U : component softmax_OUTPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT_AWVALID,
        AWREADY => s_axi_OUTPUT_AWREADY,
        AWADDR => s_axi_OUTPUT_AWADDR,
        WVALID => s_axi_OUTPUT_WVALID,
        WREADY => s_axi_OUTPUT_WREADY,
        WDATA => s_axi_OUTPUT_WDATA,
        WSTRB => s_axi_OUTPUT_WSTRB,
        ARVALID => s_axi_OUTPUT_ARVALID,
        ARREADY => s_axi_OUTPUT_ARREADY,
        ARADDR => s_axi_OUTPUT_ARADDR,
        RVALID => s_axi_OUTPUT_RVALID,
        RREADY => s_axi_OUTPUT_RREADY,
        RDATA => s_axi_OUTPUT_RDATA,
        RRESP => s_axi_OUTPUT_RRESP,
        BVALID => s_axi_OUTPUT_BVALID,
        BREADY => s_axi_OUTPUT_BREADY,
        BRESP => s_axi_OUTPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        class_address0 => class_address0,
        class_ce0 => class_ce0,
        class_we0 => class_we0,
        class_d0 => counter_reg_207);

    softmax_OUTPUT1_s_axi_U : component softmax_OUTPUT1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT1_AWVALID,
        AWREADY => s_axi_OUTPUT1_AWREADY,
        AWADDR => s_axi_OUTPUT1_AWADDR,
        WVALID => s_axi_OUTPUT1_WVALID,
        WREADY => s_axi_OUTPUT1_WREADY,
        WDATA => s_axi_OUTPUT1_WDATA,
        WSTRB => s_axi_OUTPUT1_WSTRB,
        ARVALID => s_axi_OUTPUT1_ARVALID,
        ARREADY => s_axi_OUTPUT1_ARREADY,
        ARADDR => s_axi_OUTPUT1_ARADDR,
        RVALID => s_axi_OUTPUT1_RVALID,
        RREADY => s_axi_OUTPUT1_RREADY,
        RDATA => s_axi_OUTPUT1_RDATA,
        RRESP => s_axi_OUTPUT1_RRESP,
        BVALID => s_axi_OUTPUT1_BVALID,
        BREADY => s_axi_OUTPUT1_BREADY,
        BRESP => s_axi_OUTPUT1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        result_address0 => result_address0,
        result_ce0 => result_ce0,
        result_we0 => result_we0,
        result_d0 => reg_250);

    softmax_faddfsub_bkb_U1 : component softmax_faddfsub_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        opcode => grp_fu_220_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    softmax_fdiv_32nscud_U2 : component softmax_fdiv_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => memblock2_dense_q0,
        din1 => sum_reg_173,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    softmax_fptrunc_6dEe_U3 : component softmax_fptrunc_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_6_reg_536,
        dout => tmp_7_fu_233_p1);

    softmax_fpext_32neOg_U4 : component softmax_fpext_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_4_reg_526,
        dout => tmp_5_fu_236_p1);

    softmax_fcmp_32nsfYi_U5 : component softmax_fcmp_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_239_p0,
        din1 => grp_fu_239_p1,
        opcode => grp_fu_239_opcode,
        dout => grp_fu_239_p2);

    softmax_dexp_64nsg8j_U6 : component softmax_dexp_64nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_5_reg_531,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                counter_reg_207 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                counter_reg_207 <= counter_1_fu_470_p3;
            end if; 
        end if;
    end process;

    i_1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_162 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i_1_reg_162 <= i_5_reg_516;
            end if; 
        end if;
    end process;

    i_2_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_2_reg_185 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_2_reg_185 <= i_6_reg_555;
            end if; 
        end if;
    end process;

    i_3_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_3_reg_196 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_3_reg_196 <= i_7_reg_568;
            end if; 
        end if;
    end process;

    i_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_141 <= i_4_reg_491;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_141 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    max_val1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                max_val1_reg_152 <= max_val_1_fu_358_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                max_val1_reg_152 <= memblock2_dense_q0;
            end if; 
        end if;
    end process;

    sum_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_reg_173 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                sum_reg_173 <= grp_fu_220_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_4_reg_491 <= i_4_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_5_reg_516 <= i_5_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_6_reg_555 <= i_6_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                i_7_reg_568 <= i_7_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                max_val_2_reg_496 <= memblock2_dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                memblock2_dense_addr_2_reg_521 <= tmp_3_fu_377_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                memblock2_dense_addr_3_reg_560 <= tmp_s_fu_394_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_250 <= memblock2_dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_16_reg_503 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_4_reg_526 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_5_reg_531 <= tmp_5_fu_236_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_6_reg_536 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_7_reg_541 <= tmp_7_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    tmp_8_reg_573(9 downto 0) <= tmp_8_fu_411_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_8_reg_573(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond3_fu_259_p2, ap_CS_fsm_state7, exitcond2_fu_365_p2, ap_CS_fsm_state39, exitcond1_fu_382_p2, ap_CS_fsm_state56, exitcond_fu_399_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((exitcond2_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state39 => 
                if (((exitcond1_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state56 => 
                if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state56, exitcond_fu_399_p2)
    begin
        if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state56, exitcond_fu_399_p2)
    begin
        if (((exitcond_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    class_address0 <= tmp_8_reg_573(10 - 1 downto 0);

    class_ce0_assign_proc : process(ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            class_ce0 <= ap_const_logic_1;
        else 
            class_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    class_we0_assign_proc : process(ap_CS_fsm_state58, tmp_22_fu_452_p2)
    begin
        if (((tmp_22_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            class_we0 <= ap_const_logic_1;
        else 
            class_we0 <= ap_const_logic_0;
        end if; 
    end process;

    counter_0_op_fu_464_p2 <= std_logic_vector(unsigned(counter_reg_207) + unsigned(ap_const_lv32_1));
    counter_1_fu_470_p3 <= 
        ap_const_lv32_0 when (tmp_10_fu_458_p2(0) = '1') else 
        counter_0_op_fu_464_p2;
    exitcond1_fu_382_p2 <= "1" when (i_2_reg_185 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_365_p2 <= "1" when (i_1_reg_162 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_259_p2 <= "1" when (i_reg_141 = ap_const_lv10_3E8) else "0";
    exitcond_fu_399_p2 <= "1" when (i_3_reg_196 = ap_const_lv10_3E8) else "0";

    grp_fu_220_opcode_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_220_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_220_opcode <= ap_const_lv2_0;
        else 
            grp_fu_220_opcode <= "XX";
        end if; 
    end process;


    grp_fu_220_p0_assign_proc : process(reg_250, sum_reg_173, ap_CS_fsm_state34, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_220_p0 <= sum_reg_173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_220_p0 <= reg_250;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p1_assign_proc : process(tmp_7_reg_541, max_val1_reg_152, ap_CS_fsm_state34, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_220_p1 <= tmp_7_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_220_p1 <= max_val1_reg_152;
        else 
            grp_fu_220_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_239_opcode <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_239_opcode <= ap_const_lv5_2;
        else 
            grp_fu_239_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_239_p0_assign_proc : process(reg_250, max_val_2_reg_496, ap_CS_fsm_state5, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_239_p0 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_239_p0 <= max_val_2_reg_496;
        else 
            grp_fu_239_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state58, max_val1_reg_152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_239_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_239_p1 <= max_val1_reg_152;
        else 
            grp_fu_239_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_reg_141));
    i_5_fu_371_p2 <= std_logic_vector(unsigned(i_1_reg_162) + unsigned(ap_const_lv10_1));
    i_6_fu_388_p2 <= std_logic_vector(unsigned(i_2_reg_185) + unsigned(ap_const_lv10_1));
    i_7_fu_405_p2 <= std_logic_vector(unsigned(i_3_reg_196) + unsigned(ap_const_lv10_1));
    max_val1_to_int_fu_293_p1 <= max_val1_reg_152;
    max_val_1_fu_358_p3 <= 
        max_val_2_reg_496 when (tmp_17_fu_353_p2(0) = '1') else 
        max_val1_reg_152;
    max_val_2_to_int_fu_276_p1 <= max_val_2_reg_496;

    memblock2_dense_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state7, memblock2_dense_addr_2_reg_521, ap_CS_fsm_state39, memblock2_dense_addr_3_reg_560, ap_CS_fsm_state56, tmp_8_fu_411_p1, ap_CS_fsm_state55, tmp_fu_265_p1, tmp_3_fu_377_p1, tmp_s_fu_394_p1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            memblock2_dense_address0 <= tmp_8_fu_411_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            memblock2_dense_address0 <= memblock2_dense_addr_3_reg_560;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            memblock2_dense_address0 <= tmp_s_fu_394_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            memblock2_dense_address0 <= memblock2_dense_addr_2_reg_521;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            memblock2_dense_address0 <= tmp_3_fu_377_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            memblock2_dense_address0 <= tmp_fu_265_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            memblock2_dense_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            memblock2_dense_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    memblock2_dense_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state39, ap_CS_fsm_state56, ap_CS_fsm_state55, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            memblock2_dense_ce0 <= ap_const_logic_1;
        else 
            memblock2_dense_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    memblock2_dense_d0_assign_proc : process(tmp_7_reg_541, ap_CS_fsm_state55, ap_CS_fsm_state34, grp_fu_226_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            memblock2_dense_d0 <= grp_fu_226_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            memblock2_dense_d0 <= tmp_7_reg_541;
        else 
            memblock2_dense_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    memblock2_dense_load_5_fu_416_p1 <= reg_250;

    memblock2_dense_we0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            memblock2_dense_we0 <= ap_const_logic_1;
        else 
            memblock2_dense_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs5_fu_329_p2 <= "0" when (tmp_11_fu_297_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_434_p2 <= "0" when (tmp_18_fu_420_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_311_p2 <= "0" when (tmp_1_fu_279_p4 = ap_const_lv8_FF) else "1";
    notrhs6_fu_335_p2 <= "1" when (tmp_12_fu_307_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_440_p2 <= "1" when (tmp_19_fu_430_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_317_p2 <= "1" when (tmp_9_fu_289_p1 = ap_const_lv23_0) else "0";
    result_address0 <= tmp_8_reg_573(10 - 1 downto 0);

    result_ce0_assign_proc : process(ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state58, tmp_22_fu_452_p2)
    begin
        if (((tmp_22_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_458_p2 <= "1" when (counter_reg_207 = ap_const_lv32_3E7) else "0";
    tmp_11_fu_297_p4 <= max_val1_to_int_fu_293_p1(30 downto 23);
    tmp_12_fu_307_p1 <= max_val1_to_int_fu_293_p1(23 - 1 downto 0);
    tmp_13_fu_323_p2 <= (notrhs_fu_317_p2 or notlhs_fu_311_p2);
    tmp_14_fu_341_p2 <= (notrhs6_fu_335_p2 or notlhs5_fu_329_p2);
    tmp_15_fu_347_p2 <= (tmp_14_fu_341_p2 and tmp_13_fu_323_p2);
    tmp_17_fu_353_p2 <= (tmp_16_reg_503 and tmp_15_fu_347_p2);
    tmp_18_fu_420_p4 <= memblock2_dense_load_5_fu_416_p1(30 downto 23);
    tmp_19_fu_430_p1 <= memblock2_dense_load_5_fu_416_p1(23 - 1 downto 0);
    tmp_1_fu_279_p4 <= max_val_2_to_int_fu_276_p1(30 downto 23);
    tmp_20_fu_446_p2 <= (notrhs8_fu_440_p2 or notlhs7_fu_434_p2);
    tmp_22_fu_452_p2 <= (tmp_20_fu_446_p2 and grp_fu_239_p2);
    tmp_3_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_162),64));
    tmp_8_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_196),64));
    tmp_9_fu_289_p1 <= max_val_2_to_int_fu_276_p1(23 - 1 downto 0);
    tmp_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_141),64));
    tmp_s_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_185),64));
end behav;
